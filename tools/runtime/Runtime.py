#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def bm_table_add_exact_match_entry(self, table_name, action_name, key, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - key
     - action_data
    """
    pass

  def bm_table_add_lpm_entry(self, table_name, action_name, key, prefix_length, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - key
     - prefix_length
     - action_data
    """
    pass

  def bm_table_add_ternary_match_entry(self, table_name, action_name, key, mask, priority, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - key
     - mask
     - priority
     - action_data
    """
    pass

  def bm_set_default_action(self, table_name, action_name, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - action_data
    """
    pass

  def bm_table_delete_entry(self, table_name, entry_handle):
    """
    Parameters:
     - table_name
     - entry_handle
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def bm_table_add_exact_match_entry(self, table_name, action_name, key, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - key
     - action_data
    """
    self.send_bm_table_add_exact_match_entry(table_name, action_name, key, action_data)
    return self.recv_bm_table_add_exact_match_entry()

  def send_bm_table_add_exact_match_entry(self, table_name, action_name, key, action_data):
    self._oprot.writeMessageBegin('bm_table_add_exact_match_entry', TMessageType.CALL, self._seqid)
    args = bm_table_add_exact_match_entry_args()
    args.table_name = table_name
    args.action_name = action_name
    args.key = key
    args.action_data = action_data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_table_add_exact_match_entry(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = bm_table_add_exact_match_entry_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_table_add_exact_match_entry failed: unknown result");

  def bm_table_add_lpm_entry(self, table_name, action_name, key, prefix_length, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - key
     - prefix_length
     - action_data
    """
    self.send_bm_table_add_lpm_entry(table_name, action_name, key, prefix_length, action_data)
    return self.recv_bm_table_add_lpm_entry()

  def send_bm_table_add_lpm_entry(self, table_name, action_name, key, prefix_length, action_data):
    self._oprot.writeMessageBegin('bm_table_add_lpm_entry', TMessageType.CALL, self._seqid)
    args = bm_table_add_lpm_entry_args()
    args.table_name = table_name
    args.action_name = action_name
    args.key = key
    args.prefix_length = prefix_length
    args.action_data = action_data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_table_add_lpm_entry(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = bm_table_add_lpm_entry_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_table_add_lpm_entry failed: unknown result");

  def bm_table_add_ternary_match_entry(self, table_name, action_name, key, mask, priority, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - key
     - mask
     - priority
     - action_data
    """
    self.send_bm_table_add_ternary_match_entry(table_name, action_name, key, mask, priority, action_data)
    return self.recv_bm_table_add_ternary_match_entry()

  def send_bm_table_add_ternary_match_entry(self, table_name, action_name, key, mask, priority, action_data):
    self._oprot.writeMessageBegin('bm_table_add_ternary_match_entry', TMessageType.CALL, self._seqid)
    args = bm_table_add_ternary_match_entry_args()
    args.table_name = table_name
    args.action_name = action_name
    args.key = key
    args.mask = mask
    args.priority = priority
    args.action_data = action_data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_table_add_ternary_match_entry(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = bm_table_add_ternary_match_entry_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_table_add_ternary_match_entry failed: unknown result");

  def bm_set_default_action(self, table_name, action_name, action_data):
    """
    Parameters:
     - table_name
     - action_name
     - action_data
    """
    self.send_bm_set_default_action(table_name, action_name, action_data)
    self.recv_bm_set_default_action()

  def send_bm_set_default_action(self, table_name, action_name, action_data):
    self._oprot.writeMessageBegin('bm_set_default_action', TMessageType.CALL, self._seqid)
    args = bm_set_default_action_args()
    args.table_name = table_name
    args.action_name = action_name
    args.action_data = action_data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_set_default_action(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = bm_set_default_action_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_table_delete_entry(self, table_name, entry_handle):
    """
    Parameters:
     - table_name
     - entry_handle
    """
    self.send_bm_table_delete_entry(table_name, entry_handle)
    self.recv_bm_table_delete_entry()

  def send_bm_table_delete_entry(self, table_name, entry_handle):
    self._oprot.writeMessageBegin('bm_table_delete_entry', TMessageType.CALL, self._seqid)
    args = bm_table_delete_entry_args()
    args.table_name = table_name
    args.entry_handle = entry_handle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_table_delete_entry(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = bm_table_delete_entry_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["bm_table_add_exact_match_entry"] = Processor.process_bm_table_add_exact_match_entry
    self._processMap["bm_table_add_lpm_entry"] = Processor.process_bm_table_add_lpm_entry
    self._processMap["bm_table_add_ternary_match_entry"] = Processor.process_bm_table_add_ternary_match_entry
    self._processMap["bm_set_default_action"] = Processor.process_bm_set_default_action
    self._processMap["bm_table_delete_entry"] = Processor.process_bm_table_delete_entry

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_bm_table_add_exact_match_entry(self, seqid, iprot, oprot):
    args = bm_table_add_exact_match_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_table_add_exact_match_entry_result()
    try:
      result.success = self._handler.bm_table_add_exact_match_entry(args.table_name, args.action_name, args.key, args.action_data)
    except InvalidTableOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_table_add_exact_match_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_table_add_lpm_entry(self, seqid, iprot, oprot):
    args = bm_table_add_lpm_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_table_add_lpm_entry_result()
    try:
      result.success = self._handler.bm_table_add_lpm_entry(args.table_name, args.action_name, args.key, args.prefix_length, args.action_data)
    except InvalidTableOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_table_add_lpm_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_table_add_ternary_match_entry(self, seqid, iprot, oprot):
    args = bm_table_add_ternary_match_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_table_add_ternary_match_entry_result()
    try:
      result.success = self._handler.bm_table_add_ternary_match_entry(args.table_name, args.action_name, args.key, args.mask, args.priority, args.action_data)
    except InvalidTableOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_table_add_ternary_match_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_set_default_action(self, seqid, iprot, oprot):
    args = bm_set_default_action_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_set_default_action_result()
    try:
      self._handler.bm_set_default_action(args.table_name, args.action_name, args.action_data)
    except InvalidTableOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_set_default_action", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_table_delete_entry(self, seqid, iprot, oprot):
    args = bm_table_delete_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_table_delete_entry_result()
    try:
      self._handler.bm_table_delete_entry(args.table_name, args.entry_handle)
    except InvalidTableOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_table_delete_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class bm_table_add_exact_match_entry_args:
  """
  Attributes:
   - table_name
   - action_name
   - key
   - action_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table_name', None, None, ), # 1
    (2, TType.STRING, 'action_name', None, None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
    (4, TType.LIST, 'action_data', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, table_name=None, action_name=None, key=None, action_data=None,):
    self.table_name = table_name
    self.action_name = action_name
    self.key = key
    self.action_data = action_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.action_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.action_data = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.action_data.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_add_exact_match_entry_args')
    if self.table_name is not None:
      oprot.writeFieldBegin('table_name', TType.STRING, 1)
      oprot.writeString(self.table_name)
      oprot.writeFieldEnd()
    if self.action_name is not None:
      oprot.writeFieldBegin('action_name', TType.STRING, 2)
      oprot.writeString(self.action_name)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.action_data is not None:
      oprot.writeFieldBegin('action_data', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.action_data))
      for iter6 in self.action_data:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_add_exact_match_entry_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidTableOperation, InvalidTableOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidTableOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_add_exact_match_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_add_lpm_entry_args:
  """
  Attributes:
   - table_name
   - action_name
   - key
   - prefix_length
   - action_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table_name', None, None, ), # 1
    (2, TType.STRING, 'action_name', None, None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
    (4, TType.I32, 'prefix_length', None, None, ), # 4
    (5, TType.LIST, 'action_data', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, table_name=None, action_name=None, key=None, prefix_length=None, action_data=None,):
    self.table_name = table_name
    self.action_name = action_name
    self.key = key
    self.prefix_length = prefix_length
    self.action_data = action_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.action_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.prefix_length = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.action_data = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.action_data.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_add_lpm_entry_args')
    if self.table_name is not None:
      oprot.writeFieldBegin('table_name', TType.STRING, 1)
      oprot.writeString(self.table_name)
      oprot.writeFieldEnd()
    if self.action_name is not None:
      oprot.writeFieldBegin('action_name', TType.STRING, 2)
      oprot.writeString(self.action_name)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.prefix_length is not None:
      oprot.writeFieldBegin('prefix_length', TType.I32, 4)
      oprot.writeI32(self.prefix_length)
      oprot.writeFieldEnd()
    if self.action_data is not None:
      oprot.writeFieldBegin('action_data', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.action_data))
      for iter13 in self.action_data:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_add_lpm_entry_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidTableOperation, InvalidTableOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidTableOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_add_lpm_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_add_ternary_match_entry_args:
  """
  Attributes:
   - table_name
   - action_name
   - key
   - mask
   - priority
   - action_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table_name', None, None, ), # 1
    (2, TType.STRING, 'action_name', None, None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
    (4, TType.STRING, 'mask', None, None, ), # 4
    (5, TType.I32, 'priority', None, None, ), # 5
    (6, TType.LIST, 'action_data', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, table_name=None, action_name=None, key=None, mask=None, priority=None, action_data=None,):
    self.table_name = table_name
    self.action_name = action_name
    self.key = key
    self.mask = mask
    self.priority = priority
    self.action_data = action_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.action_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mask = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.action_data = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.action_data.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_add_ternary_match_entry_args')
    if self.table_name is not None:
      oprot.writeFieldBegin('table_name', TType.STRING, 1)
      oprot.writeString(self.table_name)
      oprot.writeFieldEnd()
    if self.action_name is not None:
      oprot.writeFieldBegin('action_name', TType.STRING, 2)
      oprot.writeString(self.action_name)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.mask is not None:
      oprot.writeFieldBegin('mask', TType.STRING, 4)
      oprot.writeString(self.mask)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 5)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.action_data is not None:
      oprot.writeFieldBegin('action_data', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.action_data))
      for iter20 in self.action_data:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_add_ternary_match_entry_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidTableOperation, InvalidTableOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidTableOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_add_ternary_match_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_set_default_action_args:
  """
  Attributes:
   - table_name
   - action_name
   - action_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table_name', None, None, ), # 1
    (2, TType.STRING, 'action_name', None, None, ), # 2
    (3, TType.LIST, 'action_data', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, table_name=None, action_name=None, action_data=None,):
    self.table_name = table_name
    self.action_name = action_name
    self.action_data = action_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.action_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.action_data = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.action_data.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_set_default_action_args')
    if self.table_name is not None:
      oprot.writeFieldBegin('table_name', TType.STRING, 1)
      oprot.writeString(self.table_name)
      oprot.writeFieldEnd()
    if self.action_name is not None:
      oprot.writeFieldBegin('action_name', TType.STRING, 2)
      oprot.writeString(self.action_name)
      oprot.writeFieldEnd()
    if self.action_data is not None:
      oprot.writeFieldBegin('action_data', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.action_data))
      for iter27 in self.action_data:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_set_default_action_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidTableOperation, InvalidTableOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidTableOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_set_default_action_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_delete_entry_args:
  """
  Attributes:
   - table_name
   - entry_handle
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table_name', None, None, ), # 1
    (2, TType.I32, 'entry_handle', None, None, ), # 2
  )

  def __init__(self, table_name=None, entry_handle=None,):
    self.table_name = table_name
    self.entry_handle = entry_handle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.entry_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_delete_entry_args')
    if self.table_name is not None:
      oprot.writeFieldBegin('table_name', TType.STRING, 1)
      oprot.writeString(self.table_name)
      oprot.writeFieldEnd()
    if self.entry_handle is not None:
      oprot.writeFieldBegin('entry_handle', TType.I32, 2)
      oprot.writeI32(self.entry_handle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_table_delete_entry_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidTableOperation, InvalidTableOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidTableOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_table_delete_entry_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
