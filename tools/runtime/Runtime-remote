#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from runtime import Runtime
from runtime.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  BmEntryHandle bm_mt_add_entry(string table_name, BmMatchParams match_key, string action_name, BmActionData action_data, BmAddEntryOptions options)')
  print('  void bm_mt_set_default_action(string table_name, string action_name, BmActionData action_data)')
  print('  void bm_mt_delete_entry(string table_name, BmEntryHandle entry_handle)')
  print('  void bm_mt_modify_entry(string table_name, BmEntryHandle entry_handle, string action_name, BmActionData action_data)')
  print('  BmMemberHandle bm_mt_indirect_add_member(string table_name, string action_name, BmActionData action_data)')
  print('  void bm_mt_indirect_delete_member(string table_name, BmMemberHandle mbr_handle)')
  print('  void bm_mt_indirect_modify_member(string table_name, BmMemberHandle mbr_handle, string action_name, BmActionData action_data)')
  print('  BmEntryHandle bm_mt_indirect_add_entry(string table_name, BmMatchParams match_key, BmMemberHandle mbr_handle, BmAddEntryOptions options)')
  print('  void bm_mt_indirect_modify_entry(string table_name, BmEntryHandle entry_handle, BmMemberHandle mbr_handle)')
  print('  void bm_mt_indirect_delete_entry(string table_name, BmEntryHandle entry_handle)')
  print('  void bm_mt_indirect_set_default_member(string table_name, BmMemberHandle mbr_handle)')
  print('  BmGroupHandle bm_mt_indirect_ws_create_group(string table_name)')
  print('  void bm_mt_indirect_ws_delete_group(string table_name, BmGroupHandle grp_handle)')
  print('  void bm_mt_indirect_ws_add_member_to_group(string table_name, BmMemberHandle mbr_handle, BmGroupHandle grp_handle)')
  print('  void bm_mt_indirect_ws_remove_member_from_group(string table_name, BmMemberHandle mbr_handle, BmGroupHandle grp_handle)')
  print('  BmEntryHandle bm_mt_indirect_ws_add_entry(string table_name, BmMatchParams match_key, BmGroupHandle grp_handle, BmAddEntryOptions options)')
  print('  void bm_mt_indirect_ws_modify_entry(string table_name, BmEntryHandle entry_handle, BmGroupHandle grp_handle)')
  print('  void bm_mt_indirect_ws_set_default_group(string table_name, BmGroupHandle grp_handle)')
  print('  BmCounterValue bm_table_read_counter(string table_name, BmEntryHandle entry_handle)')
  print('  void bm_table_reset_counters(string table_name)')
  print('  void bm_learning_ack(BmLearningListId list_id, BmLearningBufferId buffer_id,  sample_ids)')
  print('  void bm_learning_ack_buffer(BmLearningListId list_id, BmLearningBufferId buffer_id)')
  print('  void bm_load_new_config(string config_str)')
  print('  void bm_swap_configs()')
  print('  BmMcMgrpHandle bm_mc_mgrp_create(BmMcMgrp mgrp)')
  print('  void bm_mc_mgrp_destroy(BmMcMgrpHandle mgrp_handle)')
  print('  BmMcL1Handle bm_mc_l1_node_create(BmMcRid rid)')
  print('  void bm_mc_l1_node_associate(BmMcMgrpHandle mgrp_handle, BmMcL1Handle l1_handle)')
  print('  void bm_mc_l1_node_destroy(BmMcL1Handle l1_handle)')
  print('  BmMcL2Handle bm_mc_l2_node_create(BmMcL1Handle l1_handle, BmMcPortMap port_map)')
  print('  void bm_mc_l2_node_update(BmMcL2Handle l2_handle, BmMcPortMap port_map)')
  print('  void bm_mc_l2_node_destroy(BmMcL2Handle l2_handle)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Runtime.Client(protocol)
transport.open()

if cmd == 'bm_mt_add_entry':
  if len(args) != 5:
    print('bm_mt_add_entry requires 5 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_add_entry(args[0],eval(args[1]),args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'bm_mt_set_default_action':
  if len(args) != 3:
    print('bm_mt_set_default_action requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_set_default_action(args[0],args[1],eval(args[2]),))

elif cmd == 'bm_mt_delete_entry':
  if len(args) != 2:
    print('bm_mt_delete_entry requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_delete_entry(args[0],eval(args[1]),))

elif cmd == 'bm_mt_modify_entry':
  if len(args) != 4:
    print('bm_mt_modify_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_modify_entry(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'bm_mt_indirect_add_member':
  if len(args) != 3:
    print('bm_mt_indirect_add_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_add_member(args[0],args[1],eval(args[2]),))

elif cmd == 'bm_mt_indirect_delete_member':
  if len(args) != 2:
    print('bm_mt_indirect_delete_member requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_delete_member(args[0],eval(args[1]),))

elif cmd == 'bm_mt_indirect_modify_member':
  if len(args) != 4:
    print('bm_mt_indirect_modify_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_modify_member(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'bm_mt_indirect_add_entry':
  if len(args) != 4:
    print('bm_mt_indirect_add_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_add_entry(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_indirect_modify_entry':
  if len(args) != 3:
    print('bm_mt_indirect_modify_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_modify_entry(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'bm_mt_indirect_delete_entry':
  if len(args) != 2:
    print('bm_mt_indirect_delete_entry requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_delete_entry(args[0],eval(args[1]),))

elif cmd == 'bm_mt_indirect_set_default_member':
  if len(args) != 2:
    print('bm_mt_indirect_set_default_member requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_set_default_member(args[0],eval(args[1]),))

elif cmd == 'bm_mt_indirect_ws_create_group':
  if len(args) != 1:
    print('bm_mt_indirect_ws_create_group requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_create_group(args[0],))

elif cmd == 'bm_mt_indirect_ws_delete_group':
  if len(args) != 2:
    print('bm_mt_indirect_ws_delete_group requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_delete_group(args[0],eval(args[1]),))

elif cmd == 'bm_mt_indirect_ws_add_member_to_group':
  if len(args) != 3:
    print('bm_mt_indirect_ws_add_member_to_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_add_member_to_group(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'bm_mt_indirect_ws_remove_member_from_group':
  if len(args) != 3:
    print('bm_mt_indirect_ws_remove_member_from_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_remove_member_from_group(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'bm_mt_indirect_ws_add_entry':
  if len(args) != 4:
    print('bm_mt_indirect_ws_add_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_add_entry(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_indirect_ws_modify_entry':
  if len(args) != 3:
    print('bm_mt_indirect_ws_modify_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_modify_entry(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'bm_mt_indirect_ws_set_default_group':
  if len(args) != 2:
    print('bm_mt_indirect_ws_set_default_group requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_set_default_group(args[0],eval(args[1]),))

elif cmd == 'bm_table_read_counter':
  if len(args) != 2:
    print('bm_table_read_counter requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_table_read_counter(args[0],eval(args[1]),))

elif cmd == 'bm_table_reset_counters':
  if len(args) != 1:
    print('bm_table_reset_counters requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_table_reset_counters(args[0],))

elif cmd == 'bm_learning_ack':
  if len(args) != 3:
    print('bm_learning_ack requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_learning_ack(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bm_learning_ack_buffer':
  if len(args) != 2:
    print('bm_learning_ack_buffer requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_learning_ack_buffer(eval(args[0]),eval(args[1]),))

elif cmd == 'bm_load_new_config':
  if len(args) != 1:
    print('bm_load_new_config requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_load_new_config(args[0],))

elif cmd == 'bm_swap_configs':
  if len(args) != 0:
    print('bm_swap_configs requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_swap_configs())

elif cmd == 'bm_mc_mgrp_create':
  if len(args) != 1:
    print('bm_mc_mgrp_create requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_mgrp_create(eval(args[0]),))

elif cmd == 'bm_mc_mgrp_destroy':
  if len(args) != 1:
    print('bm_mc_mgrp_destroy requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_mgrp_destroy(eval(args[0]),))

elif cmd == 'bm_mc_l1_node_create':
  if len(args) != 1:
    print('bm_mc_l1_node_create requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_l1_node_create(eval(args[0]),))

elif cmd == 'bm_mc_l1_node_associate':
  if len(args) != 2:
    print('bm_mc_l1_node_associate requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_l1_node_associate(eval(args[0]),eval(args[1]),))

elif cmd == 'bm_mc_l1_node_destroy':
  if len(args) != 1:
    print('bm_mc_l1_node_destroy requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_l1_node_destroy(eval(args[0]),))

elif cmd == 'bm_mc_l2_node_create':
  if len(args) != 2:
    print('bm_mc_l2_node_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_l2_node_create(eval(args[0]),eval(args[1]),))

elif cmd == 'bm_mc_l2_node_update':
  if len(args) != 2:
    print('bm_mc_l2_node_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_l2_node_update(eval(args[0]),eval(args[1]),))

elif cmd == 'bm_mc_l2_node_destroy':
  if len(args) != 1:
    print('bm_mc_l2_node_destroy requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_mc_l2_node_destroy(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
