/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef switch_sai_TYPES_H
#define switch_sai_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace switch_sai {

struct sai_fdb_entry_bridge_type_t {
  enum type {
    SAI_FDB_ENTRY_BRIDGE_TYPE_1Q = 0,
    SAI_FDB_ENTRY_BRIDGE_TYPE_1D = 1
  };
};

extern const std::map<int, const char*> _sai_fdb_entry_bridge_type_t_VALUES_TO_NAMES;

typedef int64_t sai_thrift_object_id_t;

typedef int16_t sai_thrift_vlan_id_t;

typedef std::string sai_thrift_mac_t;

typedef int8_t sai_thrift_vlan_tagging_mode_t;

typedef int32_t sai_thrift_status_t;

typedef std::string sai_thrift_ip4_t;

typedef std::string sai_thrift_ip6_t;

typedef int8_t sai_thrift_ip_addr_family_t;

typedef int8_t sai_thrift_port_stp_port_state_t;

typedef int32_t sai_thrift_hostif_trap_id_t;

typedef int32_t sai_thrift_next_hop_type_t;

typedef int32_t sai_thrift_vlan_stat_counter_t;

typedef int32_t sai_thrift_policer_stat_counter_t;

typedef int32_t sai_thrift_port_stat_counter_t;

typedef int32_t sai_thrift_queue_stat_counter_t;

typedef int32_t sai_thrift_pg_stat_counter_t;

class sai_thrift_fdb_entry_t;

class sai_thrift_vlan_port_t;

class sai_thrift_ip_t;

class sai_thrift_ip_address_t;

class sai_thrift_ip_prefix_t;

class sai_thrift_object_list_t;

class sai_thrift_vlan_list_t;

class sai_thrift_acl_mask_t;

class sai_thrift_acl_data_t;

class sai_thrift_acl_field_data_t;

class sai_thrift_acl_parameter_t;

class sai_thrift_acl_action_data_t;

class sai_thrift_u32_list_t;

class sai_thrift_qos_map_params_t;

class sai_thrift_qos_map_t;

class sai_thrift_qos_map_list_t;

class sai_thrift_attribute_value_t;

class sai_thrift_attribute_t;

class sai_thrift_unicast_route_entry_t;

class sai_thrift_neighbor_entry_t;

class sai_thrift_attribute_list_t;

typedef struct _sai_thrift_fdb_entry_t__isset {
  _sai_thrift_fdb_entry_t__isset() : mac_address(false), vlan_id(false), bridge_type(false), bridge_id(false) {}
  bool mac_address :1;
  bool vlan_id :1;
  bool bridge_type :1;
  bool bridge_id :1;
} _sai_thrift_fdb_entry_t__isset;

class sai_thrift_fdb_entry_t {
 public:

  static const char* ascii_fingerprint; // = "0FCC97F6633D5926E4DB49BC9F22517B";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0xCC,0x97,0xF6,0x63,0x3D,0x59,0x26,0xE4,0xDB,0x49,0xBC,0x9F,0x22,0x51,0x7B};

  sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t&);
  sai_thrift_fdb_entry_t& operator=(const sai_thrift_fdb_entry_t&);
  sai_thrift_fdb_entry_t() : mac_address(), vlan_id(0), bridge_type((sai_fdb_entry_bridge_type_t::type)0), bridge_id(0) {
  }

  virtual ~sai_thrift_fdb_entry_t() throw();
  sai_thrift_mac_t mac_address;
  sai_thrift_vlan_id_t vlan_id;
  sai_fdb_entry_bridge_type_t::type bridge_type;
  sai_thrift_object_id_t bridge_id;

  _sai_thrift_fdb_entry_t__isset __isset;

  void __set_mac_address(const sai_thrift_mac_t& val);

  void __set_vlan_id(const sai_thrift_vlan_id_t val);

  void __set_bridge_type(const sai_fdb_entry_bridge_type_t::type val);

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const sai_thrift_fdb_entry_t & rhs) const
  {
    if (!(mac_address == rhs.mac_address))
      return false;
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(bridge_type == rhs.bridge_type))
      return false;
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_fdb_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_fdb_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj);
};

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b);

typedef struct _sai_thrift_vlan_port_t__isset {
  _sai_thrift_vlan_port_t__isset() : port_id(false), tagging_mode(false) {}
  bool port_id :1;
  bool tagging_mode :1;
} _sai_thrift_vlan_port_t__isset;

class sai_thrift_vlan_port_t {
 public:

  static const char* ascii_fingerprint; // = "DDB540D232DEE4BB76F25D4DAA0FC261";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xB5,0x40,0xD2,0x32,0xDE,0xE4,0xBB,0x76,0xF2,0x5D,0x4D,0xAA,0x0F,0xC2,0x61};

  sai_thrift_vlan_port_t(const sai_thrift_vlan_port_t&);
  sai_thrift_vlan_port_t& operator=(const sai_thrift_vlan_port_t&);
  sai_thrift_vlan_port_t() : port_id(0), tagging_mode(0) {
  }

  virtual ~sai_thrift_vlan_port_t() throw();
  sai_thrift_object_id_t port_id;
  sai_thrift_vlan_tagging_mode_t tagging_mode;

  _sai_thrift_vlan_port_t__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_tagging_mode(const sai_thrift_vlan_tagging_mode_t val);

  bool operator == (const sai_thrift_vlan_port_t & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(tagging_mode == rhs.tagging_mode))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_vlan_port_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_vlan_port_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_port_t& obj);
};

void swap(sai_thrift_vlan_port_t &a, sai_thrift_vlan_port_t &b);

typedef struct _sai_thrift_ip_t__isset {
  _sai_thrift_ip_t__isset() : ip4(false), ip6(false) {}
  bool ip4 :1;
  bool ip6 :1;
} _sai_thrift_ip_t__isset;

class sai_thrift_ip_t {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  sai_thrift_ip_t(const sai_thrift_ip_t&);
  sai_thrift_ip_t& operator=(const sai_thrift_ip_t&);
  sai_thrift_ip_t() : ip4(), ip6() {
  }

  virtual ~sai_thrift_ip_t() throw();
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;

  _sai_thrift_ip_t__isset __isset;

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  bool operator == (const sai_thrift_ip_t & rhs) const
  {
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_t& obj);
};

void swap(sai_thrift_ip_t &a, sai_thrift_ip_t &b);

typedef struct _sai_thrift_ip_address_t__isset {
  _sai_thrift_ip_address_t__isset() : addr_family(false), addr(false) {}
  bool addr_family :1;
  bool addr :1;
} _sai_thrift_ip_address_t__isset;

class sai_thrift_ip_address_t {
 public:

  static const char* ascii_fingerprint; // = "B86DD0D72747728764BE008BF41FF2EC";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x6D,0xD0,0xD7,0x27,0x47,0x72,0x87,0x64,0xBE,0x00,0x8B,0xF4,0x1F,0xF2,0xEC};

  sai_thrift_ip_address_t(const sai_thrift_ip_address_t&);
  sai_thrift_ip_address_t& operator=(const sai_thrift_ip_address_t&);
  sai_thrift_ip_address_t() : addr_family(0) {
  }

  virtual ~sai_thrift_ip_address_t() throw();
  sai_thrift_ip_addr_family_t addr_family;
  sai_thrift_ip_t addr;

  _sai_thrift_ip_address_t__isset __isset;

  void __set_addr_family(const sai_thrift_ip_addr_family_t val);

  void __set_addr(const sai_thrift_ip_t& val);

  bool operator == (const sai_thrift_ip_address_t & rhs) const
  {
    if (!(addr_family == rhs.addr_family))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_address_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_address_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj);
};

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b);

typedef struct _sai_thrift_ip_prefix_t__isset {
  _sai_thrift_ip_prefix_t__isset() : addr_family(false), addr(false), mask(false) {}
  bool addr_family :1;
  bool addr :1;
  bool mask :1;
} _sai_thrift_ip_prefix_t__isset;

class sai_thrift_ip_prefix_t {
 public:

  static const char* ascii_fingerprint; // = "E386D6453C8DE928C9A469BCA249EA4A";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x86,0xD6,0x45,0x3C,0x8D,0xE9,0x28,0xC9,0xA4,0x69,0xBC,0xA2,0x49,0xEA,0x4A};

  sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t&);
  sai_thrift_ip_prefix_t& operator=(const sai_thrift_ip_prefix_t&);
  sai_thrift_ip_prefix_t() : addr_family(0) {
  }

  virtual ~sai_thrift_ip_prefix_t() throw();
  sai_thrift_ip_addr_family_t addr_family;
  sai_thrift_ip_t addr;
  sai_thrift_ip_t mask;

  _sai_thrift_ip_prefix_t__isset __isset;

  void __set_addr_family(const sai_thrift_ip_addr_family_t val);

  void __set_addr(const sai_thrift_ip_t& val);

  void __set_mask(const sai_thrift_ip_t& val);

  bool operator == (const sai_thrift_ip_prefix_t & rhs) const
  {
    if (!(addr_family == rhs.addr_family))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_prefix_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_prefix_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj);
};

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b);

typedef struct _sai_thrift_object_list_t__isset {
  _sai_thrift_object_list_t__isset() : count(false), object_id_list(false) {}
  bool count :1;
  bool object_id_list :1;
} _sai_thrift_object_list_t__isset;

class sai_thrift_object_list_t {
 public:

  static const char* ascii_fingerprint; // = "10B0DAF3A336BE67A0D106228B97776E";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0xB0,0xDA,0xF3,0xA3,0x36,0xBE,0x67,0xA0,0xD1,0x06,0x22,0x8B,0x97,0x77,0x6E};

  sai_thrift_object_list_t(const sai_thrift_object_list_t&);
  sai_thrift_object_list_t& operator=(const sai_thrift_object_list_t&);
  sai_thrift_object_list_t() : count(0) {
  }

  virtual ~sai_thrift_object_list_t() throw();
  int32_t count;
  std::vector<sai_thrift_object_id_t>  object_id_list;

  _sai_thrift_object_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_object_id_list(const std::vector<sai_thrift_object_id_t> & val);

  bool operator == (const sai_thrift_object_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(object_id_list == rhs.object_id_list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj);
};

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b);

typedef struct _sai_thrift_vlan_list_t__isset {
  _sai_thrift_vlan_list_t__isset() : vlan_count(false), vlan_list(false) {}
  bool vlan_count :1;
  bool vlan_list :1;
} _sai_thrift_vlan_list_t__isset;

class sai_thrift_vlan_list_t {
 public:

  static const char* ascii_fingerprint; // = "F63F7DE3A4DDE2FDD6CA7F23C86E5F62";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x3F,0x7D,0xE3,0xA4,0xDD,0xE2,0xFD,0xD6,0xCA,0x7F,0x23,0xC8,0x6E,0x5F,0x62};

  sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t&);
  sai_thrift_vlan_list_t& operator=(const sai_thrift_vlan_list_t&);
  sai_thrift_vlan_list_t() : vlan_count(0) {
  }

  virtual ~sai_thrift_vlan_list_t() throw();
  int32_t vlan_count;
  std::vector<sai_thrift_vlan_id_t>  vlan_list;

  _sai_thrift_vlan_list_t__isset __isset;

  void __set_vlan_count(const int32_t val);

  void __set_vlan_list(const std::vector<sai_thrift_vlan_id_t> & val);

  bool operator == (const sai_thrift_vlan_list_t & rhs) const
  {
    if (!(vlan_count == rhs.vlan_count))
      return false;
    if (!(vlan_list == rhs.vlan_list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_vlan_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_vlan_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj);
};

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b);

typedef struct _sai_thrift_acl_mask_t__isset {
  _sai_thrift_acl_mask_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
} _sai_thrift_acl_mask_t__isset;

class sai_thrift_acl_mask_t {
 public:

  static const char* ascii_fingerprint; // = "E5AD0FFDCBB7181F022E6B79FC68A4C3";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xAD,0x0F,0xFD,0xCB,0xB7,0x18,0x1F,0x02,0x2E,0x6B,0x79,0xFC,0x68,0xA4,0xC3};

  sai_thrift_acl_mask_t(const sai_thrift_acl_mask_t&);
  sai_thrift_acl_mask_t& operator=(const sai_thrift_acl_mask_t&);
  sai_thrift_acl_mask_t() : u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), mac(), ip4(), ip6() {
  }

  virtual ~sai_thrift_acl_mask_t() throw();
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;

  _sai_thrift_acl_mask_t__isset __isset;

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  bool operator == (const sai_thrift_acl_mask_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_mask_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_mask_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_mask_t& obj);
};

void swap(sai_thrift_acl_mask_t &a, sai_thrift_acl_mask_t &b);

typedef struct _sai_thrift_acl_data_t__isset {
  _sai_thrift_acl_data_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false), oid(false), objlist(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool oid :1;
  bool objlist :1;
} _sai_thrift_acl_data_t__isset;

class sai_thrift_acl_data_t {
 public:

  static const char* ascii_fingerprint; // = "69A5F89A4AC57555222082782D955546";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xA5,0xF8,0x9A,0x4A,0xC5,0x75,0x55,0x22,0x20,0x82,0x78,0x2D,0x95,0x55,0x46};

  sai_thrift_acl_data_t(const sai_thrift_acl_data_t&);
  sai_thrift_acl_data_t& operator=(const sai_thrift_acl_data_t&);
  sai_thrift_acl_data_t() : u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), mac(), ip4(), ip6(), oid(0) {
  }

  virtual ~sai_thrift_acl_data_t() throw();
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_object_id_t oid;
  sai_thrift_object_list_t objlist;

  _sai_thrift_acl_data_t__isset __isset;

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  bool operator == (const sai_thrift_acl_data_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_data_t& obj);
};

void swap(sai_thrift_acl_data_t &a, sai_thrift_acl_data_t &b);

typedef struct _sai_thrift_acl_field_data_t__isset {
  _sai_thrift_acl_field_data_t__isset() : enable(false), mask(false), data(false) {}
  bool enable :1;
  bool mask :1;
  bool data :1;
} _sai_thrift_acl_field_data_t__isset;

class sai_thrift_acl_field_data_t {
 public:

  static const char* ascii_fingerprint; // = "03664F4E12C8E48B0EC937A1E10C2C5A";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x66,0x4F,0x4E,0x12,0xC8,0xE4,0x8B,0x0E,0xC9,0x37,0xA1,0xE1,0x0C,0x2C,0x5A};

  sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t&);
  sai_thrift_acl_field_data_t& operator=(const sai_thrift_acl_field_data_t&);
  sai_thrift_acl_field_data_t() : enable(0) {
  }

  virtual ~sai_thrift_acl_field_data_t() throw();
  bool enable;
  sai_thrift_acl_mask_t mask;
  sai_thrift_acl_data_t data;

  _sai_thrift_acl_field_data_t__isset __isset;

  void __set_enable(const bool val);

  void __set_mask(const sai_thrift_acl_mask_t& val);

  void __set_data(const sai_thrift_acl_data_t& val);

  bool operator == (const sai_thrift_acl_field_data_t & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(mask == rhs.mask))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_field_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_field_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj);
};

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b);

typedef struct _sai_thrift_acl_parameter_t__isset {
  _sai_thrift_acl_parameter_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false), oid(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool oid :1;
} _sai_thrift_acl_parameter_t__isset;

class sai_thrift_acl_parameter_t {
 public:

  static const char* ascii_fingerprint; // = "3E650A0CE3F824E8AC503DA503FDB9C1";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x65,0x0A,0x0C,0xE3,0xF8,0x24,0xE8,0xAC,0x50,0x3D,0xA5,0x03,0xFD,0xB9,0xC1};

  sai_thrift_acl_parameter_t(const sai_thrift_acl_parameter_t&);
  sai_thrift_acl_parameter_t& operator=(const sai_thrift_acl_parameter_t&);
  sai_thrift_acl_parameter_t() : u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), mac(), ip4(), ip6(), oid(0) {
  }

  virtual ~sai_thrift_acl_parameter_t() throw();
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_object_id_t oid;

  _sai_thrift_acl_parameter_t__isset __isset;

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_thrift_acl_parameter_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(oid == rhs.oid))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_parameter_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_parameter_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_parameter_t& obj);
};

void swap(sai_thrift_acl_parameter_t &a, sai_thrift_acl_parameter_t &b);

typedef struct _sai_thrift_acl_action_data_t__isset {
  _sai_thrift_acl_action_data_t__isset() : enable(false), parameter(false) {}
  bool enable :1;
  bool parameter :1;
} _sai_thrift_acl_action_data_t__isset;

class sai_thrift_acl_action_data_t {
 public:

  static const char* ascii_fingerprint; // = "B69FE4D5FE1FEAF11719EF206344EB0C";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x9F,0xE4,0xD5,0xFE,0x1F,0xEA,0xF1,0x17,0x19,0xEF,0x20,0x63,0x44,0xEB,0x0C};

  sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t&);
  sai_thrift_acl_action_data_t& operator=(const sai_thrift_acl_action_data_t&);
  sai_thrift_acl_action_data_t() : enable(0) {
  }

  virtual ~sai_thrift_acl_action_data_t() throw();
  bool enable;
  sai_thrift_acl_parameter_t parameter;

  _sai_thrift_acl_action_data_t__isset __isset;

  void __set_enable(const bool val);

  void __set_parameter(const sai_thrift_acl_parameter_t& val);

  bool operator == (const sai_thrift_acl_action_data_t & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(parameter == rhs.parameter))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_action_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_action_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj);
};

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b);

typedef struct _sai_thrift_u32_list_t__isset {
  _sai_thrift_u32_list_t__isset() : count(false), u32list(false) {}
  bool count :1;
  bool u32list :1;
} _sai_thrift_u32_list_t__isset;

class sai_thrift_u32_list_t {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  sai_thrift_u32_list_t(const sai_thrift_u32_list_t&);
  sai_thrift_u32_list_t& operator=(const sai_thrift_u32_list_t&);
  sai_thrift_u32_list_t() : count(0) {
  }

  virtual ~sai_thrift_u32_list_t() throw();
  int32_t count;
  std::vector<int32_t>  u32list;

  _sai_thrift_u32_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_u32list(const std::vector<int32_t> & val);

  bool operator == (const sai_thrift_u32_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(u32list == rhs.u32list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u32_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u32_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj);
};

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b);

typedef struct _sai_thrift_qos_map_params_t__isset {
  _sai_thrift_qos_map_params_t__isset() : tc(false), dscp(false), dot1p(false), prio(false), pg(false), queue_index(false), color(false) {}
  bool tc :1;
  bool dscp :1;
  bool dot1p :1;
  bool prio :1;
  bool pg :1;
  bool queue_index :1;
  bool color :1;
} _sai_thrift_qos_map_params_t__isset;

class sai_thrift_qos_map_params_t {
 public:

  static const char* ascii_fingerprint; // = "B52DED7AB06D6B1C2B79707266F08CE3";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x2D,0xED,0x7A,0xB0,0x6D,0x6B,0x1C,0x2B,0x79,0x70,0x72,0x66,0xF0,0x8C,0xE3};

  sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t&);
  sai_thrift_qos_map_params_t& operator=(const sai_thrift_qos_map_params_t&);
  sai_thrift_qos_map_params_t() : tc(0), dscp(0), dot1p(0), prio(0), pg(0), queue_index(0), color(0) {
  }

  virtual ~sai_thrift_qos_map_params_t() throw();
  int8_t tc;
  int8_t dscp;
  int8_t dot1p;
  int8_t prio;
  int8_t pg;
  int8_t queue_index;
  int8_t color;

  _sai_thrift_qos_map_params_t__isset __isset;

  void __set_tc(const int8_t val);

  void __set_dscp(const int8_t val);

  void __set_dot1p(const int8_t val);

  void __set_prio(const int8_t val);

  void __set_pg(const int8_t val);

  void __set_queue_index(const int8_t val);

  void __set_color(const int8_t val);

  bool operator == (const sai_thrift_qos_map_params_t & rhs) const
  {
    if (!(tc == rhs.tc))
      return false;
    if (!(dscp == rhs.dscp))
      return false;
    if (!(dot1p == rhs.dot1p))
      return false;
    if (!(prio == rhs.prio))
      return false;
    if (!(pg == rhs.pg))
      return false;
    if (!(queue_index == rhs.queue_index))
      return false;
    if (!(color == rhs.color))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_params_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_params_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj);
};

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b);

typedef struct _sai_thrift_qos_map_t__isset {
  _sai_thrift_qos_map_t__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _sai_thrift_qos_map_t__isset;

class sai_thrift_qos_map_t {
 public:

  static const char* ascii_fingerprint; // = "E05B556F54258C0A928DA79EC2E3FC81";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x5B,0x55,0x6F,0x54,0x25,0x8C,0x0A,0x92,0x8D,0xA7,0x9E,0xC2,0xE3,0xFC,0x81};

  sai_thrift_qos_map_t(const sai_thrift_qos_map_t&);
  sai_thrift_qos_map_t& operator=(const sai_thrift_qos_map_t&);
  sai_thrift_qos_map_t() {
  }

  virtual ~sai_thrift_qos_map_t() throw();
  sai_thrift_qos_map_params_t key;
  sai_thrift_qos_map_params_t value;

  _sai_thrift_qos_map_t__isset __isset;

  void __set_key(const sai_thrift_qos_map_params_t& val);

  void __set_value(const sai_thrift_qos_map_params_t& val);

  bool operator == (const sai_thrift_qos_map_t & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj);
};

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b);

typedef struct _sai_thrift_qos_map_list_t__isset {
  _sai_thrift_qos_map_list_t__isset() : count(false), map_list(false) {}
  bool count :1;
  bool map_list :1;
} _sai_thrift_qos_map_list_t__isset;

class sai_thrift_qos_map_list_t {
 public:

  static const char* ascii_fingerprint; // = "0DE691264E4AB20B77786DC144CDA39F";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0xE6,0x91,0x26,0x4E,0x4A,0xB2,0x0B,0x77,0x78,0x6D,0xC1,0x44,0xCD,0xA3,0x9F};

  sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t&);
  sai_thrift_qos_map_list_t& operator=(const sai_thrift_qos_map_list_t&);
  sai_thrift_qos_map_list_t() : count(0) {
  }

  virtual ~sai_thrift_qos_map_list_t() throw();
  int32_t count;
  std::vector<sai_thrift_qos_map_t>  map_list;

  _sai_thrift_qos_map_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_map_list(const std::vector<sai_thrift_qos_map_t> & val);

  bool operator == (const sai_thrift_qos_map_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(map_list == rhs.map_list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj);
};

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b);

typedef struct _sai_thrift_attribute_value_t__isset {
  _sai_thrift_attribute_value_t__isset() : booldata(false), chardata(false), u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), u64(false), s64(false), mac(false), oid(false), ip4(false), ip6(false), ipaddr(false), objlist(false), vlanlist(false), aclfield(false), aclaction(false), u32list(false), qosmap(false) {}
  bool booldata :1;
  bool chardata :1;
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool u64 :1;
  bool s64 :1;
  bool mac :1;
  bool oid :1;
  bool ip4 :1;
  bool ip6 :1;
  bool ipaddr :1;
  bool objlist :1;
  bool vlanlist :1;
  bool aclfield :1;
  bool aclaction :1;
  bool u32list :1;
  bool qosmap :1;
} _sai_thrift_attribute_value_t__isset;

class sai_thrift_attribute_value_t {
 public:

  static const char* ascii_fingerprint; // = "50B61D38CFCD8C87E75A79E2604B665F";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xB6,0x1D,0x38,0xCF,0xCD,0x8C,0x87,0xE7,0x5A,0x79,0xE2,0x60,0x4B,0x66,0x5F};

  sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t&);
  sai_thrift_attribute_value_t& operator=(const sai_thrift_attribute_value_t&);
  sai_thrift_attribute_value_t() : booldata(0), chardata(), u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), u64(0), s64(0), mac(), oid(0), ip4(), ip6() {
  }

  virtual ~sai_thrift_attribute_value_t() throw();
  bool booldata;
  std::string chardata;
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  int64_t u64;
  int64_t s64;
  sai_thrift_mac_t mac;
  sai_thrift_object_id_t oid;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_ip_address_t ipaddr;
  sai_thrift_object_list_t objlist;
  sai_thrift_vlan_list_t vlanlist;
  sai_thrift_acl_field_data_t aclfield;
  sai_thrift_acl_action_data_t aclaction;
  sai_thrift_u32_list_t u32list;
  sai_thrift_qos_map_list_t qosmap;

  _sai_thrift_attribute_value_t__isset __isset;

  void __set_booldata(const bool val);

  void __set_chardata(const std::string& val);

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_u64(const int64_t val);

  void __set_s64(const int64_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_ipaddr(const sai_thrift_ip_address_t& val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  void __set_vlanlist(const sai_thrift_vlan_list_t& val);

  void __set_aclfield(const sai_thrift_acl_field_data_t& val);

  void __set_aclaction(const sai_thrift_acl_action_data_t& val);

  void __set_u32list(const sai_thrift_u32_list_t& val);

  void __set_qosmap(const sai_thrift_qos_map_list_t& val);

  bool operator == (const sai_thrift_attribute_value_t & rhs) const
  {
    if (!(booldata == rhs.booldata))
      return false;
    if (!(chardata == rhs.chardata))
      return false;
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(u64 == rhs.u64))
      return false;
    if (!(s64 == rhs.s64))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(ipaddr == rhs.ipaddr))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    if (!(vlanlist == rhs.vlanlist))
      return false;
    if (!(aclfield == rhs.aclfield))
      return false;
    if (!(aclaction == rhs.aclaction))
      return false;
    if (!(u32list == rhs.u32list))
      return false;
    if (!(qosmap == rhs.qosmap))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_value_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_value_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj);
};

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b);

typedef struct _sai_thrift_attribute_t__isset {
  _sai_thrift_attribute_t__isset() : id(false), value(false) {}
  bool id :1;
  bool value :1;
} _sai_thrift_attribute_t__isset;

class sai_thrift_attribute_t {
 public:

  static const char* ascii_fingerprint; // = "E62710BCD447FB6AA4A571AD81C5C05F";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x27,0x10,0xBC,0xD4,0x47,0xFB,0x6A,0xA4,0xA5,0x71,0xAD,0x81,0xC5,0xC0,0x5F};

  sai_thrift_attribute_t(const sai_thrift_attribute_t&);
  sai_thrift_attribute_t& operator=(const sai_thrift_attribute_t&);
  sai_thrift_attribute_t() : id(0) {
  }

  virtual ~sai_thrift_attribute_t() throw();
  int32_t id;
  sai_thrift_attribute_value_t value;

  _sai_thrift_attribute_t__isset __isset;

  void __set_id(const int32_t val);

  void __set_value(const sai_thrift_attribute_value_t& val);

  bool operator == (const sai_thrift_attribute_t & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj);
};

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b);

typedef struct _sai_thrift_unicast_route_entry_t__isset {
  _sai_thrift_unicast_route_entry_t__isset() : vr_id(false), destination(false) {}
  bool vr_id :1;
  bool destination :1;
} _sai_thrift_unicast_route_entry_t__isset;

class sai_thrift_unicast_route_entry_t {
 public:

  static const char* ascii_fingerprint; // = "1421265E56D07855254CAE38B8ECDEED";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x21,0x26,0x5E,0x56,0xD0,0x78,0x55,0x25,0x4C,0xAE,0x38,0xB8,0xEC,0xDE,0xED};

  sai_thrift_unicast_route_entry_t(const sai_thrift_unicast_route_entry_t&);
  sai_thrift_unicast_route_entry_t& operator=(const sai_thrift_unicast_route_entry_t&);
  sai_thrift_unicast_route_entry_t() : vr_id(0) {
  }

  virtual ~sai_thrift_unicast_route_entry_t() throw();
  sai_thrift_object_id_t vr_id;
  sai_thrift_ip_prefix_t destination;

  _sai_thrift_unicast_route_entry_t__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_destination(const sai_thrift_ip_prefix_t& val);

  bool operator == (const sai_thrift_unicast_route_entry_t & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_unicast_route_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_unicast_route_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_unicast_route_entry_t& obj);
};

void swap(sai_thrift_unicast_route_entry_t &a, sai_thrift_unicast_route_entry_t &b);

typedef struct _sai_thrift_neighbor_entry_t__isset {
  _sai_thrift_neighbor_entry_t__isset() : rif_id(false), ip_address(false) {}
  bool rif_id :1;
  bool ip_address :1;
} _sai_thrift_neighbor_entry_t__isset;

class sai_thrift_neighbor_entry_t {
 public:

  static const char* ascii_fingerprint; // = "E645009464B75A249EBD2F0FDC535687";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x45,0x00,0x94,0x64,0xB7,0x5A,0x24,0x9E,0xBD,0x2F,0x0F,0xDC,0x53,0x56,0x87};

  sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t&);
  sai_thrift_neighbor_entry_t& operator=(const sai_thrift_neighbor_entry_t&);
  sai_thrift_neighbor_entry_t() : rif_id(0) {
  }

  virtual ~sai_thrift_neighbor_entry_t() throw();
  sai_thrift_object_id_t rif_id;
  sai_thrift_ip_address_t ip_address;

  _sai_thrift_neighbor_entry_t__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_ip_address(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_neighbor_entry_t & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_neighbor_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_neighbor_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj);
};

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b);

typedef struct _sai_thrift_attribute_list_t__isset {
  _sai_thrift_attribute_list_t__isset() : attr_list(false), attr_count(false) {}
  bool attr_list :1;
  bool attr_count :1;
} _sai_thrift_attribute_list_t__isset;

class sai_thrift_attribute_list_t {
 public:

  static const char* ascii_fingerprint; // = "AF369FBA2310663E2FBE3866234FB5A5";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0x36,0x9F,0xBA,0x23,0x10,0x66,0x3E,0x2F,0xBE,0x38,0x66,0x23,0x4F,0xB5,0xA5};

  sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t&);
  sai_thrift_attribute_list_t& operator=(const sai_thrift_attribute_list_t&);
  sai_thrift_attribute_list_t() : attr_count(0) {
  }

  virtual ~sai_thrift_attribute_list_t() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;
  int32_t attr_count;

  _sai_thrift_attribute_list_t__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_attr_count(const int32_t val);

  bool operator == (const sai_thrift_attribute_list_t & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj);
};

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b);

} // namespace

#endif
