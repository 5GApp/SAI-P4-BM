/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "switch_sai_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace switch_sai {

int _ksai_thrift_fdb_entry_bridge_type_tValues[] = {
  sai_thrift_fdb_entry_bridge_type_t::SAI_FDB_ENTRY_BRIDGE_TYPE_1Q,
  sai_thrift_fdb_entry_bridge_type_t::SAI_FDB_ENTRY_BRIDGE_TYPE_1D
};
const char* _ksai_thrift_fdb_entry_bridge_type_tNames[] = {
  "SAI_FDB_ENTRY_BRIDGE_TYPE_1Q",
  "SAI_FDB_ENTRY_BRIDGE_TYPE_1D"
};
const std::map<int, const char*> _sai_thrift_fdb_entry_bridge_type_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _ksai_thrift_fdb_entry_bridge_type_tValues, _ksai_thrift_fdb_entry_bridge_type_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


sai_thrift_fdb_entry_t::~sai_thrift_fdb_entry_t() throw() {
}


void sai_thrift_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_fdb_entry_t::__set_vlan_id(const sai_thrift_vlan_id_t val) {
  this->vlan_id = val;
}

void sai_thrift_fdb_entry_t::__set_bridge_type(const sai_thrift_fdb_entry_bridge_type_t::type val) {
  this->bridge_type = val;
}

void sai_thrift_fdb_entry_t::__set_bridge_id(const sai_thrift_object_id_t val) {
  this->bridge_id = val;
}

const char* sai_thrift_fdb_entry_t::ascii_fingerprint = "0FCC97F6633D5926E4DB49BC9F22517B";
const uint8_t sai_thrift_fdb_entry_t::binary_fingerprint[16] = {0x0F,0xCC,0x97,0xF6,0x63,0x3D,0x59,0x26,0xE4,0xDB,0x49,0xBC,0x9F,0x22,0x51,0x7B};

uint32_t sai_thrift_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->bridge_type = (sai_thrift_fdb_entry_bridge_type_t::type)ecast0;
          this->__isset.bridge_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_fdb_entry_t");

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bridge_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->bridge_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.mac_address, b.mac_address);
  swap(a.vlan_id, b.vlan_id);
  swap(a.bridge_type, b.bridge_type);
  swap(a.bridge_id, b.bridge_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_entry_t::sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t& other1) {
  mac_address = other1.mac_address;
  vlan_id = other1.vlan_id;
  bridge_type = other1.bridge_type;
  bridge_id = other1.bridge_id;
  __isset = other1.__isset;
}
sai_thrift_fdb_entry_t& sai_thrift_fdb_entry_t::operator=(const sai_thrift_fdb_entry_t& other2) {
  mac_address = other2.mac_address;
  vlan_id = other2.vlan_id;
  bridge_type = other2.bridge_type;
  bridge_id = other2.bridge_id;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_fdb_entry_t(";
  out << "mac_address=" << to_string(obj.mac_address);
  out << ", " << "vlan_id=" << to_string(obj.vlan_id);
  out << ", " << "bridge_type=" << to_string(obj.bridge_type);
  out << ", " << "bridge_id=" << to_string(obj.bridge_id);
  out << ")";
  return out;
}


sai_thrift_vlan_port_t::~sai_thrift_vlan_port_t() throw() {
}


void sai_thrift_vlan_port_t::__set_port_id(const sai_thrift_object_id_t val) {
  this->port_id = val;
}

void sai_thrift_vlan_port_t::__set_tagging_mode(const sai_thrift_vlan_tagging_mode_t val) {
  this->tagging_mode = val;
}

const char* sai_thrift_vlan_port_t::ascii_fingerprint = "DDB540D232DEE4BB76F25D4DAA0FC261";
const uint8_t sai_thrift_vlan_port_t::binary_fingerprint[16] = {0xDD,0xB5,0x40,0xD2,0x32,0xDE,0xE4,0xBB,0x76,0xF2,0x5D,0x4D,0xAA,0x0F,0xC2,0x61};

uint32_t sai_thrift_vlan_port_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tagging_mode);
          this->__isset.tagging_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_port_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_vlan_port_t");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagging_mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->tagging_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_vlan_port_t &a, sai_thrift_vlan_port_t &b) {
  using ::std::swap;
  swap(a.port_id, b.port_id);
  swap(a.tagging_mode, b.tagging_mode);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_port_t::sai_thrift_vlan_port_t(const sai_thrift_vlan_port_t& other3) {
  port_id = other3.port_id;
  tagging_mode = other3.tagging_mode;
  __isset = other3.__isset;
}
sai_thrift_vlan_port_t& sai_thrift_vlan_port_t::operator=(const sai_thrift_vlan_port_t& other4) {
  port_id = other4.port_id;
  tagging_mode = other4.tagging_mode;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_port_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_vlan_port_t(";
  out << "port_id=" << to_string(obj.port_id);
  out << ", " << "tagging_mode=" << to_string(obj.tagging_mode);
  out << ")";
  return out;
}


sai_thrift_ip_t::~sai_thrift_ip_t() throw() {
}


void sai_thrift_ip_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_ip_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

const char* sai_thrift_ip_t::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t sai_thrift_ip_t::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t sai_thrift_ip_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ip_t");

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ip_t &a, sai_thrift_ip_t &b) {
  using ::std::swap;
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_t::sai_thrift_ip_t(const sai_thrift_ip_t& other5) {
  ip4 = other5.ip4;
  ip6 = other5.ip6;
  __isset = other5.__isset;
}
sai_thrift_ip_t& sai_thrift_ip_t::operator=(const sai_thrift_ip_t& other6) {
  ip4 = other6.ip4;
  ip6 = other6.ip6;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ip_t(";
  out << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ")";
  return out;
}


sai_thrift_ip_address_t::~sai_thrift_ip_address_t() throw() {
}


void sai_thrift_ip_address_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_address_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}

const char* sai_thrift_ip_address_t::ascii_fingerprint = "B86DD0D72747728764BE008BF41FF2EC";
const uint8_t sai_thrift_ip_address_t::binary_fingerprint[16] = {0xB8,0x6D,0xD0,0xD7,0x27,0x47,0x72,0x87,0x64,0xBE,0x00,0x8B,0xF4,0x1F,0xF2,0xEC};

uint32_t sai_thrift_ip_address_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_address_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ip_address_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_address_t::sai_thrift_ip_address_t(const sai_thrift_ip_address_t& other7) {
  addr_family = other7.addr_family;
  addr = other7.addr;
  __isset = other7.__isset;
}
sai_thrift_ip_address_t& sai_thrift_ip_address_t::operator=(const sai_thrift_ip_address_t& other8) {
  addr_family = other8.addr_family;
  addr = other8.addr;
  __isset = other8.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ip_address_t(";
  out << "addr_family=" << to_string(obj.addr_family);
  out << ", " << "addr=" << to_string(obj.addr);
  out << ")";
  return out;
}


sai_thrift_ip_prefix_t::~sai_thrift_ip_prefix_t() throw() {
}


void sai_thrift_ip_prefix_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_prefix_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}

void sai_thrift_ip_prefix_t::__set_mask(const sai_thrift_ip_t& val) {
  this->mask = val;
}

const char* sai_thrift_ip_prefix_t::ascii_fingerprint = "E386D6453C8DE928C9A469BCA249EA4A";
const uint8_t sai_thrift_ip_prefix_t::binary_fingerprint[16] = {0xE3,0x86,0xD6,0x45,0x3C,0x8D,0xE9,0x28,0xC9,0xA4,0x69,0xBC,0xA2,0x49,0xEA,0x4A};

uint32_t sai_thrift_ip_prefix_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_prefix_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ip_prefix_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_prefix_t::sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t& other9) {
  addr_family = other9.addr_family;
  addr = other9.addr;
  mask = other9.mask;
  __isset = other9.__isset;
}
sai_thrift_ip_prefix_t& sai_thrift_ip_prefix_t::operator=(const sai_thrift_ip_prefix_t& other10) {
  addr_family = other10.addr_family;
  addr = other10.addr;
  mask = other10.mask;
  __isset = other10.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ip_prefix_t(";
  out << "addr_family=" << to_string(obj.addr_family);
  out << ", " << "addr=" << to_string(obj.addr);
  out << ", " << "mask=" << to_string(obj.mask);
  out << ")";
  return out;
}


sai_thrift_object_list_t::~sai_thrift_object_list_t() throw() {
}


void sai_thrift_object_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_object_list_t::__set_object_id_list(const std::vector<sai_thrift_object_id_t> & val) {
  this->object_id_list = val;
}

const char* sai_thrift_object_list_t::ascii_fingerprint = "10B0DAF3A336BE67A0D106228B97776E";
const uint8_t sai_thrift_object_list_t::binary_fingerprint[16] = {0x10,0xB0,0xDA,0xF3,0xA3,0x36,0xBE,0x67,0xA0,0xD1,0x06,0x22,0x8B,0x97,0x77,0x6E};

uint32_t sai_thrift_object_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->object_id_list.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->object_id_list.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readI64(this->object_id_list[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.object_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_object_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("object_id_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->object_id_list.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter16;
    for (_iter16 = this->object_id_list.begin(); _iter16 != this->object_id_list.end(); ++_iter16)
    {
      xfer += oprot->writeI64((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.object_id_list, b.object_id_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_list_t::sai_thrift_object_list_t(const sai_thrift_object_list_t& other17) {
  count = other17.count;
  object_id_list = other17.object_id_list;
  __isset = other17.__isset;
}
sai_thrift_object_list_t& sai_thrift_object_list_t::operator=(const sai_thrift_object_list_t& other18) {
  count = other18.count;
  object_id_list = other18.object_id_list;
  __isset = other18.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_object_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "object_id_list=" << to_string(obj.object_id_list);
  out << ")";
  return out;
}


sai_thrift_vlan_list_t::~sai_thrift_vlan_list_t() throw() {
}


void sai_thrift_vlan_list_t::__set_vlan_count(const int32_t val) {
  this->vlan_count = val;
}

void sai_thrift_vlan_list_t::__set_vlan_list(const std::vector<sai_thrift_vlan_id_t> & val) {
  this->vlan_list = val;
}

const char* sai_thrift_vlan_list_t::ascii_fingerprint = "F63F7DE3A4DDE2FDD6CA7F23C86E5F62";
const uint8_t sai_thrift_vlan_list_t::binary_fingerprint[16] = {0xF6,0x3F,0x7D,0xE3,0xA4,0xDD,0xE2,0xFD,0xD6,0xCA,0x7F,0x23,0xC8,0x6E,0x5F,0x62};

uint32_t sai_thrift_vlan_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vlan_count);
          this->__isset.vlan_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vlan_list.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->vlan_list.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += iprot->readI16(this->vlan_list[_i23]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vlan_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_vlan_list_t");

  xfer += oprot->writeFieldBegin("vlan_count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vlan_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlan_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->vlan_list.size()));
    std::vector<sai_thrift_vlan_id_t> ::const_iterator _iter24;
    for (_iter24 = this->vlan_list.begin(); _iter24 != this->vlan_list.end(); ++_iter24)
    {
      xfer += oprot->writeI16((*_iter24));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b) {
  using ::std::swap;
  swap(a.vlan_count, b.vlan_count);
  swap(a.vlan_list, b.vlan_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_list_t::sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t& other25) {
  vlan_count = other25.vlan_count;
  vlan_list = other25.vlan_list;
  __isset = other25.__isset;
}
sai_thrift_vlan_list_t& sai_thrift_vlan_list_t::operator=(const sai_thrift_vlan_list_t& other26) {
  vlan_count = other26.vlan_count;
  vlan_list = other26.vlan_list;
  __isset = other26.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_vlan_list_t(";
  out << "vlan_count=" << to_string(obj.vlan_count);
  out << ", " << "vlan_list=" << to_string(obj.vlan_list);
  out << ")";
  return out;
}


sai_thrift_acl_mask_t::~sai_thrift_acl_mask_t() throw() {
}


void sai_thrift_acl_mask_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_mask_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_mask_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_mask_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_mask_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_mask_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_mask_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_mask_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_mask_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

const char* sai_thrift_acl_mask_t::ascii_fingerprint = "E5AD0FFDCBB7181F022E6B79FC68A4C3";
const uint8_t sai_thrift_acl_mask_t::binary_fingerprint[16] = {0xE5,0xAD,0x0F,0xFD,0xCB,0xB7,0x18,0x1F,0x02,0x2E,0x6B,0x79,0xFC,0x68,0xA4,0xC3};

uint32_t sai_thrift_acl_mask_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_mask_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_mask_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_mask_t &a, sai_thrift_acl_mask_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_mask_t::sai_thrift_acl_mask_t(const sai_thrift_acl_mask_t& other27) {
  u8 = other27.u8;
  s8 = other27.s8;
  u16 = other27.u16;
  s16 = other27.s16;
  u32 = other27.u32;
  s32 = other27.s32;
  mac = other27.mac;
  ip4 = other27.ip4;
  ip6 = other27.ip6;
  __isset = other27.__isset;
}
sai_thrift_acl_mask_t& sai_thrift_acl_mask_t::operator=(const sai_thrift_acl_mask_t& other28) {
  u8 = other28.u8;
  s8 = other28.s8;
  u16 = other28.u16;
  s16 = other28.s16;
  u32 = other28.u32;
  s32 = other28.s32;
  mac = other28.mac;
  ip4 = other28.ip4;
  ip6 = other28.ip6;
  __isset = other28.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_mask_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_mask_t(";
  out << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ")";
  return out;
}


sai_thrift_acl_data_t::~sai_thrift_acl_data_t() throw() {
}


void sai_thrift_acl_data_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_data_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_data_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_data_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_data_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_data_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_data_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_data_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

const char* sai_thrift_acl_data_t::ascii_fingerprint = "69A5F89A4AC57555222082782D955546";
const uint8_t sai_thrift_acl_data_t::binary_fingerprint[16] = {0x69,0xA5,0xF8,0x9A,0x4A,0xC5,0x75,0x55,0x22,0x20,0x82,0x78,0x2D,0x95,0x55,0x46};

uint32_t sai_thrift_acl_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_data_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_data_t &a, sai_thrift_acl_data_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_data_t::sai_thrift_acl_data_t(const sai_thrift_acl_data_t& other29) {
  u8 = other29.u8;
  s8 = other29.s8;
  u16 = other29.u16;
  s16 = other29.s16;
  u32 = other29.u32;
  s32 = other29.s32;
  mac = other29.mac;
  ip4 = other29.ip4;
  ip6 = other29.ip6;
  oid = other29.oid;
  objlist = other29.objlist;
  __isset = other29.__isset;
}
sai_thrift_acl_data_t& sai_thrift_acl_data_t::operator=(const sai_thrift_acl_data_t& other30) {
  u8 = other30.u8;
  s8 = other30.s8;
  u16 = other30.u16;
  s16 = other30.s16;
  u32 = other30.u32;
  s32 = other30.s32;
  mac = other30.mac;
  ip4 = other30.ip4;
  ip6 = other30.ip6;
  oid = other30.oid;
  objlist = other30.objlist;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_data_t(";
  out << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ", " << "objlist=" << to_string(obj.objlist);
  out << ")";
  return out;
}


sai_thrift_acl_field_data_t::~sai_thrift_acl_field_data_t() throw() {
}


void sai_thrift_acl_field_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_field_data_t::__set_mask(const sai_thrift_acl_mask_t& val) {
  this->mask = val;
}

void sai_thrift_acl_field_data_t::__set_data(const sai_thrift_acl_data_t& val) {
  this->data = val;
}

const char* sai_thrift_acl_field_data_t::ascii_fingerprint = "03664F4E12C8E48B0EC937A1E10C2C5A";
const uint8_t sai_thrift_acl_field_data_t::binary_fingerprint[16] = {0x03,0x66,0x4F,0x4E,0x12,0xC8,0xE4,0x8B,0x0E,0xC9,0x37,0xA1,0xE1,0x0C,0x2C,0x5A};

uint32_t sai_thrift_acl_field_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.mask, b.mask);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_t::sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t& other31) {
  enable = other31.enable;
  mask = other31.mask;
  data = other31.data;
  __isset = other31.__isset;
}
sai_thrift_acl_field_data_t& sai_thrift_acl_field_data_t::operator=(const sai_thrift_acl_field_data_t& other32) {
  enable = other32.enable;
  mask = other32.mask;
  data = other32.data;
  __isset = other32.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_t(";
  out << "enable=" << to_string(obj.enable);
  out << ", " << "mask=" << to_string(obj.mask);
  out << ", " << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


sai_thrift_acl_parameter_t::~sai_thrift_acl_parameter_t() throw() {
}


void sai_thrift_acl_parameter_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_parameter_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_parameter_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_parameter_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_parameter_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_parameter_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_parameter_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_parameter_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_parameter_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_parameter_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

const char* sai_thrift_acl_parameter_t::ascii_fingerprint = "3E650A0CE3F824E8AC503DA503FDB9C1";
const uint8_t sai_thrift_acl_parameter_t::binary_fingerprint[16] = {0x3E,0x65,0x0A,0x0C,0xE3,0xF8,0x24,0xE8,0xAC,0x50,0x3D,0xA5,0x03,0xFD,0xB9,0xC1};

uint32_t sai_thrift_acl_parameter_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_parameter_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_parameter_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_parameter_t &a, sai_thrift_acl_parameter_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_parameter_t::sai_thrift_acl_parameter_t(const sai_thrift_acl_parameter_t& other33) {
  u8 = other33.u8;
  s8 = other33.s8;
  u16 = other33.u16;
  s16 = other33.s16;
  u32 = other33.u32;
  s32 = other33.s32;
  mac = other33.mac;
  ip4 = other33.ip4;
  ip6 = other33.ip6;
  oid = other33.oid;
  __isset = other33.__isset;
}
sai_thrift_acl_parameter_t& sai_thrift_acl_parameter_t::operator=(const sai_thrift_acl_parameter_t& other34) {
  u8 = other34.u8;
  s8 = other34.s8;
  u16 = other34.u16;
  s16 = other34.s16;
  u32 = other34.u32;
  s32 = other34.s32;
  mac = other34.mac;
  ip4 = other34.ip4;
  ip6 = other34.ip6;
  oid = other34.oid;
  __isset = other34.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_parameter_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_parameter_t(";
  out << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ")";
  return out;
}


sai_thrift_acl_action_data_t::~sai_thrift_acl_action_data_t() throw() {
}


void sai_thrift_acl_action_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_action_data_t::__set_parameter(const sai_thrift_acl_parameter_t& val) {
  this->parameter = val;
}

const char* sai_thrift_acl_action_data_t::ascii_fingerprint = "B69FE4D5FE1FEAF11719EF206344EB0C";
const uint8_t sai_thrift_acl_action_data_t::binary_fingerprint[16] = {0xB6,0x9F,0xE4,0xD5,0xFE,0x1F,0xEA,0xF1,0x17,0x19,0xEF,0x20,0x63,0x44,0xEB,0x0C};

uint32_t sai_thrift_acl_action_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameter.read(iprot);
          this->__isset.parameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_action_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_action_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameter", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->parameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.parameter, b.parameter);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_action_data_t::sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t& other35) {
  enable = other35.enable;
  parameter = other35.parameter;
  __isset = other35.__isset;
}
sai_thrift_acl_action_data_t& sai_thrift_acl_action_data_t::operator=(const sai_thrift_acl_action_data_t& other36) {
  enable = other36.enable;
  parameter = other36.parameter;
  __isset = other36.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_action_data_t(";
  out << "enable=" << to_string(obj.enable);
  out << ", " << "parameter=" << to_string(obj.parameter);
  out << ")";
  return out;
}


sai_thrift_u32_list_t::~sai_thrift_u32_list_t() throw() {
}


void sai_thrift_u32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_u32_list_t::__set_u32list(const std::vector<int32_t> & val) {
  this->u32list = val;
}

const char* sai_thrift_u32_list_t::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t sai_thrift_u32_list_t::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t sai_thrift_u32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u32list.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->u32list.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readI32(this->u32list[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_u32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->u32list.size()));
    std::vector<int32_t> ::const_iterator _iter42;
    for (_iter42 = this->u32list.begin(); _iter42 != this->u32list.end(); ++_iter42)
    {
      xfer += oprot->writeI32((*_iter42));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.u32list, b.u32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_list_t::sai_thrift_u32_list_t(const sai_thrift_u32_list_t& other43) {
  count = other43.count;
  u32list = other43.u32list;
  __isset = other43.__isset;
}
sai_thrift_u32_list_t& sai_thrift_u32_list_t::operator=(const sai_thrift_u32_list_t& other44) {
  count = other44.count;
  u32list = other44.u32list;
  __isset = other44.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_u32_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "u32list=" << to_string(obj.u32list);
  out << ")";
  return out;
}


sai_thrift_qos_map_params_t::~sai_thrift_qos_map_params_t() throw() {
}


void sai_thrift_qos_map_params_t::__set_tc(const int8_t val) {
  this->tc = val;
}

void sai_thrift_qos_map_params_t::__set_dscp(const int8_t val) {
  this->dscp = val;
}

void sai_thrift_qos_map_params_t::__set_dot1p(const int8_t val) {
  this->dot1p = val;
}

void sai_thrift_qos_map_params_t::__set_prio(const int8_t val) {
  this->prio = val;
}

void sai_thrift_qos_map_params_t::__set_pg(const int8_t val) {
  this->pg = val;
}

void sai_thrift_qos_map_params_t::__set_queue_index(const int8_t val) {
  this->queue_index = val;
}

void sai_thrift_qos_map_params_t::__set_color(const int8_t val) {
  this->color = val;
}

const char* sai_thrift_qos_map_params_t::ascii_fingerprint = "B52DED7AB06D6B1C2B79707266F08CE3";
const uint8_t sai_thrift_qos_map_params_t::binary_fingerprint[16] = {0xB5,0x2D,0xED,0x7A,0xB0,0x6D,0x6B,0x1C,0x2B,0x79,0x70,0x72,0x66,0xF0,0x8C,0xE3};

uint32_t sai_thrift_qos_map_params_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tc);
          this->__isset.tc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dscp);
          this->__isset.dscp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dot1p);
          this->__isset.dot1p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->prio);
          this->__isset.prio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pg);
          this->__isset.pg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->queue_index);
          this->__isset.queue_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_params_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_params_t");

  xfer += oprot->writeFieldBegin("tc", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->tc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dscp", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->dscp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dot1p", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->dot1p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prio", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->prio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pg", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->pg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue_index", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->queue_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b) {
  using ::std::swap;
  swap(a.tc, b.tc);
  swap(a.dscp, b.dscp);
  swap(a.dot1p, b.dot1p);
  swap(a.prio, b.prio);
  swap(a.pg, b.pg);
  swap(a.queue_index, b.queue_index);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_params_t::sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t& other45) {
  tc = other45.tc;
  dscp = other45.dscp;
  dot1p = other45.dot1p;
  prio = other45.prio;
  pg = other45.pg;
  queue_index = other45.queue_index;
  color = other45.color;
  __isset = other45.__isset;
}
sai_thrift_qos_map_params_t& sai_thrift_qos_map_params_t::operator=(const sai_thrift_qos_map_params_t& other46) {
  tc = other46.tc;
  dscp = other46.dscp;
  dot1p = other46.dot1p;
  prio = other46.prio;
  pg = other46.pg;
  queue_index = other46.queue_index;
  color = other46.color;
  __isset = other46.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_qos_map_params_t(";
  out << "tc=" << to_string(obj.tc);
  out << ", " << "dscp=" << to_string(obj.dscp);
  out << ", " << "dot1p=" << to_string(obj.dot1p);
  out << ", " << "prio=" << to_string(obj.prio);
  out << ", " << "pg=" << to_string(obj.pg);
  out << ", " << "queue_index=" << to_string(obj.queue_index);
  out << ", " << "color=" << to_string(obj.color);
  out << ")";
  return out;
}


sai_thrift_qos_map_t::~sai_thrift_qos_map_t() throw() {
}


void sai_thrift_qos_map_t::__set_key(const sai_thrift_qos_map_params_t& val) {
  this->key = val;
}

void sai_thrift_qos_map_t::__set_value(const sai_thrift_qos_map_params_t& val) {
  this->value = val;
}

const char* sai_thrift_qos_map_t::ascii_fingerprint = "E05B556F54258C0A928DA79EC2E3FC81";
const uint8_t sai_thrift_qos_map_t::binary_fingerprint[16] = {0xE0,0x5B,0x55,0x6F,0x54,0x25,0x8C,0x0A,0x92,0x8D,0xA7,0x9E,0xC2,0xE3,0xFC,0x81};

uint32_t sai_thrift_qos_map_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_t::sai_thrift_qos_map_t(const sai_thrift_qos_map_t& other47) {
  key = other47.key;
  value = other47.value;
  __isset = other47.__isset;
}
sai_thrift_qos_map_t& sai_thrift_qos_map_t::operator=(const sai_thrift_qos_map_t& other48) {
  key = other48.key;
  value = other48.value;
  __isset = other48.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_qos_map_t(";
  out << "key=" << to_string(obj.key);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


sai_thrift_qos_map_list_t::~sai_thrift_qos_map_list_t() throw() {
}


void sai_thrift_qos_map_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_qos_map_list_t::__set_map_list(const std::vector<sai_thrift_qos_map_t> & val) {
  this->map_list = val;
}

const char* sai_thrift_qos_map_list_t::ascii_fingerprint = "0DE691264E4AB20B77786DC144CDA39F";
const uint8_t sai_thrift_qos_map_list_t::binary_fingerprint[16] = {0x0D,0xE6,0x91,0x26,0x4E,0x4A,0xB2,0x0B,0x77,0x78,0x6D,0xC1,0x44,0xCD,0xA3,0x9F};

uint32_t sai_thrift_qos_map_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->map_list.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->map_list.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->map_list[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.map_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->map_list.size()));
    std::vector<sai_thrift_qos_map_t> ::const_iterator _iter54;
    for (_iter54 = this->map_list.begin(); _iter54 != this->map_list.end(); ++_iter54)
    {
      xfer += (*_iter54).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.map_list, b.map_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_list_t::sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t& other55) {
  count = other55.count;
  map_list = other55.map_list;
  __isset = other55.__isset;
}
sai_thrift_qos_map_list_t& sai_thrift_qos_map_list_t::operator=(const sai_thrift_qos_map_list_t& other56) {
  count = other56.count;
  map_list = other56.map_list;
  __isset = other56.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_qos_map_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "map_list=" << to_string(obj.map_list);
  out << ")";
  return out;
}


sai_thrift_attribute_value_t::~sai_thrift_attribute_value_t() throw() {
}


void sai_thrift_attribute_value_t::__set_booldata(const bool val) {
  this->booldata = val;
}

void sai_thrift_attribute_value_t::__set_chardata(const std::string& val) {
  this->chardata = val;
}

void sai_thrift_attribute_value_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_attribute_value_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_attribute_value_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_attribute_value_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_attribute_value_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_attribute_value_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_attribute_value_t::__set_u64(const int64_t val) {
  this->u64 = val;
}

void sai_thrift_attribute_value_t::__set_s64(const int64_t val) {
  this->s64 = val;
}

void sai_thrift_attribute_value_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_attribute_value_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_attribute_value_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_attribute_value_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_attribute_value_t::__set_ipaddr(const sai_thrift_ip_address_t& val) {
  this->ipaddr = val;
}

void sai_thrift_attribute_value_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_attribute_value_t::__set_vlanlist(const sai_thrift_vlan_list_t& val) {
  this->vlanlist = val;
}

void sai_thrift_attribute_value_t::__set_aclfield(const sai_thrift_acl_field_data_t& val) {
  this->aclfield = val;
}

void sai_thrift_attribute_value_t::__set_aclaction(const sai_thrift_acl_action_data_t& val) {
  this->aclaction = val;
}

void sai_thrift_attribute_value_t::__set_u32list(const sai_thrift_u32_list_t& val) {
  this->u32list = val;
}

void sai_thrift_attribute_value_t::__set_qosmap(const sai_thrift_qos_map_list_t& val) {
  this->qosmap = val;
}

const char* sai_thrift_attribute_value_t::ascii_fingerprint = "50B61D38CFCD8C87E75A79E2604B665F";
const uint8_t sai_thrift_attribute_value_t::binary_fingerprint[16] = {0x50,0xB6,0x1D,0x38,0xCF,0xCD,0x8C,0x87,0xE7,0x5A,0x79,0xE2,0x60,0x4B,0x66,0x5F};

uint32_t sai_thrift_attribute_value_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chardata);
          this->__isset.chardata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->s64);
          this->__isset.s64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddr.read(iprot);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vlanlist.read(iprot);
          this->__isset.vlanlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclfield.read(iprot);
          this->__isset.aclfield = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclaction.read(iprot);
          this->__isset.aclaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32list.read(iprot);
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->qosmap.read(iprot);
          this->__isset.qosmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_value_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_attribute_value_t");

  xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->booldata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chardata", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chardata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->u64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s64", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->s64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->ipaddr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlanlist", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->vlanlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclfield", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->aclfield.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclaction", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->aclaction.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->u32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qosmap", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->qosmap.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.chardata, b.chardata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.s64, b.s64);
  swap(a.mac, b.mac);
  swap(a.oid, b.oid);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.ipaddr, b.ipaddr);
  swap(a.objlist, b.objlist);
  swap(a.vlanlist, b.vlanlist);
  swap(a.aclfield, b.aclfield);
  swap(a.aclaction, b.aclaction);
  swap(a.u32list, b.u32list);
  swap(a.qosmap, b.qosmap);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_value_t::sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t& other57) {
  booldata = other57.booldata;
  chardata = other57.chardata;
  u8 = other57.u8;
  s8 = other57.s8;
  u16 = other57.u16;
  s16 = other57.s16;
  u32 = other57.u32;
  s32 = other57.s32;
  u64 = other57.u64;
  s64 = other57.s64;
  mac = other57.mac;
  oid = other57.oid;
  ip4 = other57.ip4;
  ip6 = other57.ip6;
  ipaddr = other57.ipaddr;
  objlist = other57.objlist;
  vlanlist = other57.vlanlist;
  aclfield = other57.aclfield;
  aclaction = other57.aclaction;
  u32list = other57.u32list;
  qosmap = other57.qosmap;
  __isset = other57.__isset;
}
sai_thrift_attribute_value_t& sai_thrift_attribute_value_t::operator=(const sai_thrift_attribute_value_t& other58) {
  booldata = other58.booldata;
  chardata = other58.chardata;
  u8 = other58.u8;
  s8 = other58.s8;
  u16 = other58.u16;
  s16 = other58.s16;
  u32 = other58.u32;
  s32 = other58.s32;
  u64 = other58.u64;
  s64 = other58.s64;
  mac = other58.mac;
  oid = other58.oid;
  ip4 = other58.ip4;
  ip6 = other58.ip6;
  ipaddr = other58.ipaddr;
  objlist = other58.objlist;
  vlanlist = other58.vlanlist;
  aclfield = other58.aclfield;
  aclaction = other58.aclaction;
  u32list = other58.u32list;
  qosmap = other58.qosmap;
  __isset = other58.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_attribute_value_t(";
  out << "booldata=" << to_string(obj.booldata);
  out << ", " << "chardata=" << to_string(obj.chardata);
  out << ", " << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "u64=" << to_string(obj.u64);
  out << ", " << "s64=" << to_string(obj.s64);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ", " << "ipaddr=" << to_string(obj.ipaddr);
  out << ", " << "objlist=" << to_string(obj.objlist);
  out << ", " << "vlanlist=" << to_string(obj.vlanlist);
  out << ", " << "aclfield=" << to_string(obj.aclfield);
  out << ", " << "aclaction=" << to_string(obj.aclaction);
  out << ", " << "u32list=" << to_string(obj.u32list);
  out << ", " << "qosmap=" << to_string(obj.qosmap);
  out << ")";
  return out;
}


sai_thrift_attribute_t::~sai_thrift_attribute_t() throw() {
}


void sai_thrift_attribute_t::__set_id(const int32_t val) {
  this->id = val;
}

void sai_thrift_attribute_t::__set_value(const sai_thrift_attribute_value_t& val) {
  this->value = val;
}

const char* sai_thrift_attribute_t::ascii_fingerprint = "E62710BCD447FB6AA4A571AD81C5C05F";
const uint8_t sai_thrift_attribute_t::binary_fingerprint[16] = {0xE6,0x27,0x10,0xBC,0xD4,0x47,0xFB,0x6A,0xA4,0xA5,0x71,0xAD,0x81,0xC5,0xC0,0x5F};

uint32_t sai_thrift_attribute_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_attribute_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_t::sai_thrift_attribute_t(const sai_thrift_attribute_t& other59) {
  id = other59.id;
  value = other59.value;
  __isset = other59.__isset;
}
sai_thrift_attribute_t& sai_thrift_attribute_t::operator=(const sai_thrift_attribute_t& other60) {
  id = other60.id;
  value = other60.value;
  __isset = other60.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_attribute_t(";
  out << "id=" << to_string(obj.id);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


sai_thrift_unicast_route_entry_t::~sai_thrift_unicast_route_entry_t() throw() {
}


void sai_thrift_unicast_route_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_unicast_route_entry_t::__set_destination(const sai_thrift_ip_prefix_t& val) {
  this->destination = val;
}

const char* sai_thrift_unicast_route_entry_t::ascii_fingerprint = "1421265E56D07855254CAE38B8ECDEED";
const uint8_t sai_thrift_unicast_route_entry_t::binary_fingerprint[16] = {0x14,0x21,0x26,0x5E,0x56,0xD0,0x78,0x55,0x25,0x4C,0xAE,0x38,0xB8,0xEC,0xDE,0xED};

uint32_t sai_thrift_unicast_route_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_unicast_route_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_unicast_route_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_unicast_route_entry_t &a, sai_thrift_unicast_route_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_unicast_route_entry_t::sai_thrift_unicast_route_entry_t(const sai_thrift_unicast_route_entry_t& other61) {
  vr_id = other61.vr_id;
  destination = other61.destination;
  __isset = other61.__isset;
}
sai_thrift_unicast_route_entry_t& sai_thrift_unicast_route_entry_t::operator=(const sai_thrift_unicast_route_entry_t& other62) {
  vr_id = other62.vr_id;
  destination = other62.destination;
  __isset = other62.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_unicast_route_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_unicast_route_entry_t(";
  out << "vr_id=" << to_string(obj.vr_id);
  out << ", " << "destination=" << to_string(obj.destination);
  out << ")";
  return out;
}


sai_thrift_neighbor_entry_t::~sai_thrift_neighbor_entry_t() throw() {
}


void sai_thrift_neighbor_entry_t::__set_rif_id(const sai_thrift_object_id_t val) {
  this->rif_id = val;
}

void sai_thrift_neighbor_entry_t::__set_ip_address(const sai_thrift_ip_address_t& val) {
  this->ip_address = val;
}

const char* sai_thrift_neighbor_entry_t::ascii_fingerprint = "E645009464B75A249EBD2F0FDC535687";
const uint8_t sai_thrift_neighbor_entry_t::binary_fingerprint[16] = {0xE6,0x45,0x00,0x94,0x64,0xB7,0x5A,0x24,0x9E,0xBD,0x2F,0x0F,0xDC,0x53,0x56,0x87};

uint32_t sai_thrift_neighbor_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip_address.read(iprot);
          this->__isset.ip_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_neighbor_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_neighbor_entry_t");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip_address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b) {
  using ::std::swap;
  swap(a.rif_id, b.rif_id);
  swap(a.ip_address, b.ip_address);
  swap(a.__isset, b.__isset);
}

sai_thrift_neighbor_entry_t::sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t& other63) {
  rif_id = other63.rif_id;
  ip_address = other63.ip_address;
  __isset = other63.__isset;
}
sai_thrift_neighbor_entry_t& sai_thrift_neighbor_entry_t::operator=(const sai_thrift_neighbor_entry_t& other64) {
  rif_id = other64.rif_id;
  ip_address = other64.ip_address;
  __isset = other64.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_neighbor_entry_t(";
  out << "rif_id=" << to_string(obj.rif_id);
  out << ", " << "ip_address=" << to_string(obj.ip_address);
  out << ")";
  return out;
}


sai_thrift_attribute_list_t::~sai_thrift_attribute_list_t() throw() {
}


void sai_thrift_attribute_list_t::__set_attr_list(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr_list = val;
}

void sai_thrift_attribute_list_t::__set_attr_count(const int32_t val) {
  this->attr_count = val;
}

const char* sai_thrift_attribute_list_t::ascii_fingerprint = "AF369FBA2310663E2FBE3866234FB5A5";
const uint8_t sai_thrift_attribute_list_t::binary_fingerprint[16] = {0xAF,0x36,0x9F,0xBA,0x23,0x10,0x66,0x3E,0x2F,0xBE,0x38,0x66,0x23,0x4F,0xB5,0xA5};

uint32_t sai_thrift_attribute_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr_list.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->attr_list.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += this->attr_list[_i69].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attr_count);
          this->__isset.attr_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_attribute_list_t");

  xfer += oprot->writeFieldBegin("attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter70;
    for (_iter70 = this->attr_list.begin(); _iter70 != this->attr_list.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attr_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b) {
  using ::std::swap;
  swap(a.attr_list, b.attr_list);
  swap(a.attr_count, b.attr_count);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_list_t::sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t& other71) {
  attr_list = other71.attr_list;
  attr_count = other71.attr_count;
  __isset = other71.__isset;
}
sai_thrift_attribute_list_t& sai_thrift_attribute_list_t::operator=(const sai_thrift_attribute_list_t& other72) {
  attr_list = other72.attr_list;
  attr_count = other72.attr_count;
  __isset = other72.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_attribute_list_t(";
  out << "attr_list=" << to_string(obj.attr_list);
  out << ", " << "attr_count=" << to_string(obj.attr_count);
  out << ")";
  return out;
}

} // namespace
