/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "switch_sai_rpc.h"

namespace switch_sai {


switch_sai_rpc_sai_thrift_set_port_attribute_args::~switch_sai_rpc_sai_thrift_set_port_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_port_attribute_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_port_attribute_pargs::~switch_sai_rpc_sai_thrift_set_port_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_port_attribute_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_port_attribute_result::~switch_sai_rpc_sai_thrift_set_port_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_port_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_port_attribute_presult::~switch_sai_rpc_sai_thrift_set_port_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_args::~switch_sai_rpc_sai_thrift_get_port_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_attribute_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_pargs::~switch_sai_rpc_sai_thrift_get_port_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_attribute_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_result::~switch_sai_rpc_sai_thrift_get_port_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_presult::~switch_sai_rpc_sai_thrift_get_port_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_args::~switch_sai_rpc_sai_thrift_get_port_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->counter_ids.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += iprot->readI32(this->counter_ids[_i77]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_stats_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_port_stat_counter_t> ::const_iterator _iter78;
    for (_iter78 = this->counter_ids.begin(); _iter78 != this->counter_ids.end(); ++_iter78)
    {
      xfer += oprot->writeI32((*_iter78));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_pargs::~switch_sai_rpc_sai_thrift_get_port_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_stats_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_port_stat_counter_t> ::const_iterator _iter79;
    for (_iter79 = (*(this->counter_ids)).begin(); _iter79 != (*(this->counter_ids)).end(); ++_iter79)
    {
      xfer += oprot->writeI32((*_iter79));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_result::~switch_sai_rpc_sai_thrift_get_port_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            xfer += iprot->readListBegin(_etype83, _size80);
            this->success.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += iprot->readI64(this->success[_i84]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter85;
      for (_iter85 = this->success.begin(); _iter85 != this->success.end(); ++_iter85)
      {
        xfer += oprot->writeI64((*_iter85));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_presult::~switch_sai_rpc_sai_thrift_get_port_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size86;
            ::apache::thrift::protocol::TType _etype89;
            xfer += iprot->readListBegin(_etype89, _size86);
            (*(this->success)).resize(_size86);
            uint32_t _i90;
            for (_i90 = 0; _i90 < _size86; ++_i90)
            {
              xfer += iprot->readI64((*(this->success))[_i90]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_args::~switch_sai_rpc_sai_thrift_clear_port_all_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_port_all_stats_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs::~switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_result::~switch_sai_rpc_sai_thrift_clear_port_all_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_port_all_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_presult::~switch_sai_rpc_sai_thrift_clear_port_all_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_port_args::~switch_sai_rpc_sai_thrift_remove_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_port_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_port_pargs::~switch_sai_rpc_sai_thrift_remove_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_port_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_port_result::~switch_sai_rpc_sai_thrift_remove_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_port_presult::~switch_sai_rpc_sai_thrift_remove_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_port_args::~switch_sai_rpc_sai_thrift_create_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size91;
            ::apache::thrift::protocol::TType _etype94;
            xfer += iprot->readListBegin(_etype94, _size91);
            this->thrift_attr_list.resize(_size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              xfer += this->thrift_attr_list[_i95].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_port_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter96;
    for (_iter96 = this->thrift_attr_list.begin(); _iter96 != this->thrift_attr_list.end(); ++_iter96)
    {
      xfer += (*_iter96).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_port_pargs::~switch_sai_rpc_sai_thrift_create_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_port_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter97;
    for (_iter97 = (*(this->thrift_attr_list)).begin(); _iter97 != (*(this->thrift_attr_list)).end(); ++_iter97)
    {
      xfer += (*_iter97).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_port_result::~switch_sai_rpc_sai_thrift_create_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_port_presult::~switch_sai_rpc_sai_thrift_create_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_args::~switch_sai_rpc_sai_thrift_create_bridge_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size98;
            ::apache::thrift::protocol::TType _etype101;
            xfer += iprot->readListBegin(_etype101, _size98);
            this->thrift_attr_list.resize(_size98);
            uint32_t _i102;
            for (_i102 = 0; _i102 < _size98; ++_i102)
            {
              xfer += this->thrift_attr_list[_i102].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter103;
    for (_iter103 = this->thrift_attr_list.begin(); _iter103 != this->thrift_attr_list.end(); ++_iter103)
    {
      xfer += (*_iter103).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_pargs::~switch_sai_rpc_sai_thrift_create_bridge_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter104;
    for (_iter104 = (*(this->thrift_attr_list)).begin(); _iter104 != (*(this->thrift_attr_list)).end(); ++_iter104)
    {
      xfer += (*_iter104).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_result::~switch_sai_rpc_sai_thrift_create_bridge_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_presult::~switch_sai_rpc_sai_thrift_create_bridge_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_args::~switch_sai_rpc_sai_thrift_remove_bridge_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_args");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_pargs::~switch_sai_rpc_sai_thrift_remove_bridge_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_pargs");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_result::~switch_sai_rpc_sai_thrift_remove_bridge_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_presult::~switch_sai_rpc_sai_thrift_remove_bridge_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_args::~switch_sai_rpc_sai_thrift_create_bridge_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->thrift_attr_list.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->thrift_attr_list[_i109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_port_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter110;
    for (_iter110 = this->thrift_attr_list.begin(); _iter110 != this->thrift_attr_list.end(); ++_iter110)
    {
      xfer += (*_iter110).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_pargs::~switch_sai_rpc_sai_thrift_create_bridge_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_port_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter111;
    for (_iter111 = (*(this->thrift_attr_list)).begin(); _iter111 != (*(this->thrift_attr_list)).end(); ++_iter111)
    {
      xfer += (*_iter111).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_result::~switch_sai_rpc_sai_thrift_create_bridge_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_presult::~switch_sai_rpc_sai_thrift_create_bridge_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_args::~switch_sai_rpc_sai_thrift_remove_bridge_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_port_id);
          this->__isset.bridge_port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_port_args");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_pargs::~switch_sai_rpc_sai_thrift_remove_bridge_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_port_pargs");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_result::~switch_sai_rpc_sai_thrift_remove_bridge_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_presult::~switch_sai_rpc_sai_thrift_remove_bridge_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thirft_get_bridge_attribute_args::~switch_sai_rpc_sai_thirft_get_bridge_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thirft_get_bridge_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _etype115;
            xfer += iprot->readListBegin(_etype115, _size112);
            this->thrift_attr_list.resize(_size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              xfer += this->thrift_attr_list[_i116].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thirft_get_bridge_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thirft_get_bridge_attribute_args");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter117;
    for (_iter117 = this->thrift_attr_list.begin(); _iter117 != this->thrift_attr_list.end(); ++_iter117)
    {
      xfer += (*_iter117).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thirft_get_bridge_attribute_pargs::~switch_sai_rpc_sai_thirft_get_bridge_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thirft_get_bridge_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thirft_get_bridge_attribute_pargs");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter118;
    for (_iter118 = (*(this->thrift_attr_list)).begin(); _iter118 != (*(this->thrift_attr_list)).end(); ++_iter118)
    {
      xfer += (*_iter118).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thirft_get_bridge_attribute_result::~switch_sai_rpc_sai_thirft_get_bridge_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thirft_get_bridge_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thirft_get_bridge_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thirft_get_bridge_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thirft_get_bridge_attribute_presult::~switch_sai_rpc_sai_thirft_get_bridge_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thirft_get_bridge_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_args::~switch_sai_rpc_sai_thrift_create_fdb_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size119;
            ::apache::thrift::protocol::TType _etype122;
            xfer += iprot->readListBegin(_etype122, _size119);
            this->thrift_attr_list.resize(_size119);
            uint32_t _i123;
            for (_i123 = 0; _i123 < _size119; ++_i123)
            {
              xfer += this->thrift_attr_list[_i123].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_fdb_entry_args");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter124;
    for (_iter124 = this->thrift_attr_list.begin(); _iter124 != this->thrift_attr_list.end(); ++_iter124)
    {
      xfer += (*_iter124).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_pargs::~switch_sai_rpc_sai_thrift_create_fdb_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_fdb_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter125;
    for (_iter125 = (*(this->thrift_attr_list)).begin(); _iter125 != (*(this->thrift_attr_list)).end(); ++_iter125)
    {
      xfer += (*_iter125).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_result::~switch_sai_rpc_sai_thrift_create_fdb_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_fdb_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_presult::~switch_sai_rpc_sai_thrift_create_fdb_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_args::~switch_sai_rpc_sai_thrift_delete_fdb_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_fdb_entry_args");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs::~switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_result::~switch_sai_rpc_sai_thrift_delete_fdb_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_fdb_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_presult::~switch_sai_rpc_sai_thrift_delete_fdb_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_args::~switch_sai_rpc_sai_thrift_flush_fdb_entries_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size126;
            ::apache::thrift::protocol::TType _etype129;
            xfer += iprot->readListBegin(_etype129, _size126);
            this->thrift_attr_list.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += this->thrift_attr_list[_i130].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_flush_fdb_entries_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter131;
    for (_iter131 = this->thrift_attr_list.begin(); _iter131 != this->thrift_attr_list.end(); ++_iter131)
    {
      xfer += (*_iter131).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs::~switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter132;
    for (_iter132 = (*(this->thrift_attr_list)).begin(); _iter132 != (*(this->thrift_attr_list)).end(); ++_iter132)
    {
      xfer += (*_iter132).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_result::~switch_sai_rpc_sai_thrift_flush_fdb_entries_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_flush_fdb_entries_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_presult::~switch_sai_rpc_sai_thrift_flush_fdb_entries_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_args::~switch_sai_rpc_sai_thrift_create_vlan_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->thrift_attr_list.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += this->thrift_attr_list[_i137].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter138;
    for (_iter138 = this->thrift_attr_list.begin(); _iter138 != this->thrift_attr_list.end(); ++_iter138)
    {
      xfer += (*_iter138).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_pargs::~switch_sai_rpc_sai_thrift_create_vlan_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter139;
    for (_iter139 = (*(this->thrift_attr_list)).begin(); _iter139 != (*(this->thrift_attr_list)).end(); ++_iter139)
    {
      xfer += (*_iter139).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_result::~switch_sai_rpc_sai_thrift_create_vlan_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_presult::~switch_sai_rpc_sai_thrift_create_vlan_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_delete_vlan_args::~switch_sai_rpc_sai_thrift_delete_vlan_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_vlan_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_vlan_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_vlan_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_vlan_pargs::~switch_sai_rpc_sai_thrift_delete_vlan_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_vlan_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_vlan_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_vlan_result::~switch_sai_rpc_sai_thrift_delete_vlan_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_vlan_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_vlan_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_vlan_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_vlan_presult::~switch_sai_rpc_sai_thrift_delete_vlan_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_vlan_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_args::~switch_sai_rpc_sai_thrift_get_vlan_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size140;
            ::apache::thrift::protocol::TType _etype143;
            xfer += iprot->readListBegin(_etype143, _size140);
            this->counter_ids.resize(_size140);
            uint32_t _i144;
            for (_i144 = 0; _i144 < _size140; ++_i144)
            {
              xfer += iprot->readI32(this->counter_ids[_i144]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_stats_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_vlan_stat_counter_t> ::const_iterator _iter145;
    for (_iter145 = this->counter_ids.begin(); _iter145 != this->counter_ids.end(); ++_iter145)
    {
      xfer += oprot->writeI32((*_iter145));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_pargs::~switch_sai_rpc_sai_thrift_get_vlan_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_stats_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_vlan_stat_counter_t> ::const_iterator _iter146;
    for (_iter146 = (*(this->counter_ids)).begin(); _iter146 != (*(this->counter_ids)).end(); ++_iter146)
    {
      xfer += oprot->writeI32((*_iter146));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_result::~switch_sai_rpc_sai_thrift_get_vlan_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size147;
            ::apache::thrift::protocol::TType _etype150;
            xfer += iprot->readListBegin(_etype150, _size147);
            this->success.resize(_size147);
            uint32_t _i151;
            for (_i151 = 0; _i151 < _size147; ++_i151)
            {
              xfer += iprot->readI64(this->success[_i151]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter152;
      for (_iter152 = this->success.begin(); _iter152 != this->success.end(); ++_iter152)
      {
        xfer += oprot->writeI64((*_iter152));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_presult::~switch_sai_rpc_sai_thrift_get_vlan_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size153;
            ::apache::thrift::protocol::TType _etype156;
            xfer += iprot->readListBegin(_etype156, _size153);
            (*(this->success)).resize(_size153);
            uint32_t _i157;
            for (_i157 = 0; _i157 < _size153; ++_i157)
            {
              xfer += iprot->readI64((*(this->success))[_i157]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_args::~switch_sai_rpc_sai_thrift_create_vlan_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size158;
            ::apache::thrift::protocol::TType _etype161;
            xfer += iprot->readListBegin(_etype161, _size158);
            this->thrift_attr_list.resize(_size158);
            uint32_t _i162;
            for (_i162 = 0; _i162 < _size158; ++_i162)
            {
              xfer += this->thrift_attr_list[_i162].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter163;
    for (_iter163 = this->thrift_attr_list.begin(); _iter163 != this->thrift_attr_list.end(); ++_iter163)
    {
      xfer += (*_iter163).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_pargs::~switch_sai_rpc_sai_thrift_create_vlan_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter164;
    for (_iter164 = (*(this->thrift_attr_list)).begin(); _iter164 != (*(this->thrift_attr_list)).end(); ++_iter164)
    {
      xfer += (*_iter164).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_result::~switch_sai_rpc_sai_thrift_create_vlan_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_presult::~switch_sai_rpc_sai_thrift_create_vlan_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_args::~switch_sai_rpc_sai_thrift_remove_vlan_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_member_id);
          this->__isset.vlan_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_member_args");

  xfer += oprot->writeFieldBegin("vlan_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_pargs::~switch_sai_rpc_sai_thrift_remove_vlan_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_member_pargs");

  xfer += oprot->writeFieldBegin("vlan_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_result::~switch_sai_rpc_sai_thrift_remove_vlan_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_presult::~switch_sai_rpc_sai_thrift_remove_vlan_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_args::~switch_sai_rpc_sai_thrift_get_vlan_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_attribute_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs::~switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_result::~switch_sai_rpc_sai_thrift_get_vlan_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_presult::~switch_sai_rpc_sai_thrift_get_vlan_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_args::~switch_sai_rpc_sai_thrift_create_virtual_router_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size165;
            ::apache::thrift::protocol::TType _etype168;
            xfer += iprot->readListBegin(_etype168, _size165);
            this->thrift_attr_list.resize(_size165);
            uint32_t _i169;
            for (_i169 = 0; _i169 < _size165; ++_i169)
            {
              xfer += this->thrift_attr_list[_i169].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_virtual_router_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter170;
    for (_iter170 = this->thrift_attr_list.begin(); _iter170 != this->thrift_attr_list.end(); ++_iter170)
    {
      xfer += (*_iter170).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_pargs::~switch_sai_rpc_sai_thrift_create_virtual_router_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_virtual_router_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter171;
    for (_iter171 = (*(this->thrift_attr_list)).begin(); _iter171 != (*(this->thrift_attr_list)).end(); ++_iter171)
    {
      xfer += (*_iter171).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_result::~switch_sai_rpc_sai_thrift_create_virtual_router_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_virtual_router_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_presult::~switch_sai_rpc_sai_thrift_create_virtual_router_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_args::~switch_sai_rpc_sai_thrift_remove_virtual_router_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_virtual_router_args");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_pargs::~switch_sai_rpc_sai_thrift_remove_virtual_router_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_virtual_router_pargs");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vr_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_result::~switch_sai_rpc_sai_thrift_remove_virtual_router_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_virtual_router_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_presult::~switch_sai_rpc_sai_thrift_remove_virtual_router_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_args::~switch_sai_rpc_sai_thrift_create_route_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_unicast_route_entry.read(iprot);
          this->__isset.thrift_unicast_route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->thrift_attr_list.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += this->thrift_attr_list[_i176].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_route_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_route_args");

  xfer += oprot->writeFieldBegin("thrift_unicast_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_unicast_route_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter177;
    for (_iter177 = this->thrift_attr_list.begin(); _iter177 != this->thrift_attr_list.end(); ++_iter177)
    {
      xfer += (*_iter177).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_pargs::~switch_sai_rpc_sai_thrift_create_route_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_route_pargs");

  xfer += oprot->writeFieldBegin("thrift_unicast_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_unicast_route_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter178;
    for (_iter178 = (*(this->thrift_attr_list)).begin(); _iter178 != (*(this->thrift_attr_list)).end(); ++_iter178)
    {
      xfer += (*_iter178).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_result::~switch_sai_rpc_sai_thrift_create_route_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_route_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_route_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_presult::~switch_sai_rpc_sai_thrift_create_route_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_args::~switch_sai_rpc_sai_thrift_remove_route_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_unicast_route_entry.read(iprot);
          this->__isset.thrift_unicast_route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_route_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_route_args");

  xfer += oprot->writeFieldBegin("thrift_unicast_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_unicast_route_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_pargs::~switch_sai_rpc_sai_thrift_remove_route_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_route_pargs");

  xfer += oprot->writeFieldBegin("thrift_unicast_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_unicast_route_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_result::~switch_sai_rpc_sai_thrift_remove_route_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_route_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_route_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_presult::~switch_sai_rpc_sai_thrift_remove_route_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_args::~switch_sai_rpc_sai_thrift_create_router_interface_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size179;
            ::apache::thrift::protocol::TType _etype182;
            xfer += iprot->readListBegin(_etype182, _size179);
            this->thrift_attr_list.resize(_size179);
            uint32_t _i183;
            for (_i183 = 0; _i183 < _size179; ++_i183)
            {
              xfer += this->thrift_attr_list[_i183].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_router_interface_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_router_interface_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter184;
    for (_iter184 = this->thrift_attr_list.begin(); _iter184 != this->thrift_attr_list.end(); ++_iter184)
    {
      xfer += (*_iter184).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_pargs::~switch_sai_rpc_sai_thrift_create_router_interface_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_router_interface_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter185;
    for (_iter185 = (*(this->thrift_attr_list)).begin(); _iter185 != (*(this->thrift_attr_list)).end(); ++_iter185)
    {
      xfer += (*_iter185).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_result::~switch_sai_rpc_sai_thrift_create_router_interface_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_router_interface_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_router_interface_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_presult::~switch_sai_rpc_sai_thrift_create_router_interface_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_args::~switch_sai_rpc_sai_thrift_remove_router_interface_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_router_interface_args");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_pargs::~switch_sai_rpc_sai_thrift_remove_router_interface_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_router_interface_pargs");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->rif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_result::~switch_sai_rpc_sai_thrift_remove_router_interface_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_router_interface_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_presult::~switch_sai_rpc_sai_thrift_remove_router_interface_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_args::~switch_sai_rpc_sai_thrift_create_next_hop_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size186;
            ::apache::thrift::protocol::TType _etype189;
            xfer += iprot->readListBegin(_etype189, _size186);
            this->thrift_attr_list.resize(_size186);
            uint32_t _i190;
            for (_i190 = 0; _i190 < _size186; ++_i190)
            {
              xfer += this->thrift_attr_list[_i190].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter191;
    for (_iter191 = this->thrift_attr_list.begin(); _iter191 != this->thrift_attr_list.end(); ++_iter191)
    {
      xfer += (*_iter191).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_pargs::~switch_sai_rpc_sai_thrift_create_next_hop_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter192;
    for (_iter192 = (*(this->thrift_attr_list)).begin(); _iter192 != (*(this->thrift_attr_list)).end(); ++_iter192)
    {
      xfer += (*_iter192).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_result::~switch_sai_rpc_sai_thrift_create_next_hop_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_presult::~switch_sai_rpc_sai_thrift_create_next_hop_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_args::~switch_sai_rpc_sai_thrift_remove_next_hop_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->next_hop_id);
          this->__isset.next_hop_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_args");

  xfer += oprot->writeFieldBegin("next_hop_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->next_hop_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_pargs::~switch_sai_rpc_sai_thrift_remove_next_hop_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_pargs");

  xfer += oprot->writeFieldBegin("next_hop_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->next_hop_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_result::~switch_sai_rpc_sai_thrift_remove_next_hop_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_presult::~switch_sai_rpc_sai_thrift_remove_next_hop_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_args::~switch_sai_rpc_sai_thrift_create_next_hop_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size193;
            ::apache::thrift::protocol::TType _etype196;
            xfer += iprot->readListBegin(_etype196, _size193);
            this->thrift_attr_list.resize(_size193);
            uint32_t _i197;
            for (_i197 = 0; _i197 < _size193; ++_i197)
            {
              xfer += this->thrift_attr_list[_i197].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter198;
    for (_iter198 = this->thrift_attr_list.begin(); _iter198 != this->thrift_attr_list.end(); ++_iter198)
    {
      xfer += (*_iter198).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_pargs::~switch_sai_rpc_sai_thrift_create_next_hop_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter199;
    for (_iter199 = (*(this->thrift_attr_list)).begin(); _iter199 != (*(this->thrift_attr_list)).end(); ++_iter199)
    {
      xfer += (*_iter199).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_result::~switch_sai_rpc_sai_thrift_create_next_hop_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_presult::~switch_sai_rpc_sai_thrift_create_next_hop_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_args::~switch_sai_rpc_sai_thrift_remove_next_hop_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->next_hop_group_id);
          this->__isset.next_hop_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_args");

  xfer += oprot->writeFieldBegin("next_hop_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->next_hop_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs::~switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs");

  xfer += oprot->writeFieldBegin("next_hop_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->next_hop_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_result::~switch_sai_rpc_sai_thrift_remove_next_hop_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_presult::~switch_sai_rpc_sai_thrift_remove_next_hop_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_add_next_hop_to_group_args::~switch_sai_rpc_sai_thrift_add_next_hop_to_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_add_next_hop_to_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->next_hop_group_id);
          this->__isset.next_hop_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_nexthops.clear();
            uint32_t _size200;
            ::apache::thrift::protocol::TType _etype203;
            xfer += iprot->readListBegin(_etype203, _size200);
            this->thrift_nexthops.resize(_size200);
            uint32_t _i204;
            for (_i204 = 0; _i204 < _size200; ++_i204)
            {
              xfer += iprot->readI64(this->thrift_nexthops[_i204]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_nexthops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_add_next_hop_to_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_add_next_hop_to_group_args");

  xfer += oprot->writeFieldBegin("next_hop_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->next_hop_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_nexthops", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->thrift_nexthops.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter205;
    for (_iter205 = this->thrift_nexthops.begin(); _iter205 != this->thrift_nexthops.end(); ++_iter205)
    {
      xfer += oprot->writeI64((*_iter205));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_add_next_hop_to_group_pargs::~switch_sai_rpc_sai_thrift_add_next_hop_to_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_add_next_hop_to_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_add_next_hop_to_group_pargs");

  xfer += oprot->writeFieldBegin("next_hop_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->next_hop_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_nexthops", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->thrift_nexthops)).size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter206;
    for (_iter206 = (*(this->thrift_nexthops)).begin(); _iter206 != (*(this->thrift_nexthops)).end(); ++_iter206)
    {
      xfer += oprot->writeI64((*_iter206));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_add_next_hop_to_group_result::~switch_sai_rpc_sai_thrift_add_next_hop_to_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_add_next_hop_to_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_add_next_hop_to_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_add_next_hop_to_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_add_next_hop_to_group_presult::~switch_sai_rpc_sai_thrift_add_next_hop_to_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_add_next_hop_to_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_from_group_args::~switch_sai_rpc_sai_thrift_remove_next_hop_from_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_from_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->next_hop_group_id);
          this->__isset.next_hop_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_nexthops.clear();
            uint32_t _size207;
            ::apache::thrift::protocol::TType _etype210;
            xfer += iprot->readListBegin(_etype210, _size207);
            this->thrift_nexthops.resize(_size207);
            uint32_t _i211;
            for (_i211 = 0; _i211 < _size207; ++_i211)
            {
              xfer += iprot->readI64(this->thrift_nexthops[_i211]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_nexthops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_from_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_from_group_args");

  xfer += oprot->writeFieldBegin("next_hop_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->next_hop_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_nexthops", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->thrift_nexthops.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter212;
    for (_iter212 = this->thrift_nexthops.begin(); _iter212 != this->thrift_nexthops.end(); ++_iter212)
    {
      xfer += oprot->writeI64((*_iter212));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_from_group_pargs::~switch_sai_rpc_sai_thrift_remove_next_hop_from_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_from_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_from_group_pargs");

  xfer += oprot->writeFieldBegin("next_hop_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->next_hop_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_nexthops", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->thrift_nexthops)).size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter213;
    for (_iter213 = (*(this->thrift_nexthops)).begin(); _iter213 != (*(this->thrift_nexthops)).end(); ++_iter213)
    {
      xfer += oprot->writeI64((*_iter213));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_from_group_result::~switch_sai_rpc_sai_thrift_remove_next_hop_from_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_from_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_from_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_from_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_from_group_presult::~switch_sai_rpc_sai_thrift_remove_next_hop_from_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_from_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_args::~switch_sai_rpc_sai_thrift_create_lag_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size214;
            ::apache::thrift::protocol::TType _etype217;
            xfer += iprot->readListBegin(_etype217, _size214);
            this->thrift_attr_list.resize(_size214);
            uint32_t _i218;
            for (_i218 = 0; _i218 < _size214; ++_i218)
            {
              xfer += this->thrift_attr_list[_i218].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter219;
    for (_iter219 = this->thrift_attr_list.begin(); _iter219 != this->thrift_attr_list.end(); ++_iter219)
    {
      xfer += (*_iter219).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_pargs::~switch_sai_rpc_sai_thrift_create_lag_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter220;
    for (_iter220 = (*(this->thrift_attr_list)).begin(); _iter220 != (*(this->thrift_attr_list)).end(); ++_iter220)
    {
      xfer += (*_iter220).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_result::~switch_sai_rpc_sai_thrift_create_lag_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_presult::~switch_sai_rpc_sai_thrift_create_lag_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_args::~switch_sai_rpc_sai_thrift_remove_lag_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_id);
          this->__isset.lag_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_args");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_pargs::~switch_sai_rpc_sai_thrift_remove_lag_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_pargs");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_result::~switch_sai_rpc_sai_thrift_remove_lag_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_presult::~switch_sai_rpc_sai_thrift_remove_lag_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_args::~switch_sai_rpc_sai_thrift_create_lag_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size221;
            ::apache::thrift::protocol::TType _etype224;
            xfer += iprot->readListBegin(_etype224, _size221);
            this->thrift_attr_list.resize(_size221);
            uint32_t _i225;
            for (_i225 = 0; _i225 < _size221; ++_i225)
            {
              xfer += this->thrift_attr_list[_i225].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter226;
    for (_iter226 = this->thrift_attr_list.begin(); _iter226 != this->thrift_attr_list.end(); ++_iter226)
    {
      xfer += (*_iter226).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_pargs::~switch_sai_rpc_sai_thrift_create_lag_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter227;
    for (_iter227 = (*(this->thrift_attr_list)).begin(); _iter227 != (*(this->thrift_attr_list)).end(); ++_iter227)
    {
      xfer += (*_iter227).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_result::~switch_sai_rpc_sai_thrift_create_lag_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_presult::~switch_sai_rpc_sai_thrift_create_lag_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_args::~switch_sai_rpc_sai_thrift_remove_lag_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_member_id);
          this->__isset.lag_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_member_args");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_pargs::~switch_sai_rpc_sai_thrift_remove_lag_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_member_pargs");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_result::~switch_sai_rpc_sai_thrift_remove_lag_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_presult::~switch_sai_rpc_sai_thrift_remove_lag_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_args::~switch_sai_rpc_sai_thrift_create_stp_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _etype231;
            xfer += iprot->readListBegin(_etype231, _size228);
            this->thrift_attr_list.resize(_size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              xfer += this->thrift_attr_list[_i232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_stp_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter233;
    for (_iter233 = this->thrift_attr_list.begin(); _iter233 != this->thrift_attr_list.end(); ++_iter233)
    {
      xfer += (*_iter233).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_pargs::~switch_sai_rpc_sai_thrift_create_stp_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_stp_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter234;
    for (_iter234 = (*(this->thrift_attr_list)).begin(); _iter234 != (*(this->thrift_attr_list)).end(); ++_iter234)
    {
      xfer += (*_iter234).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_result::~switch_sai_rpc_sai_thrift_create_stp_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_stp_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_presult::~switch_sai_rpc_sai_thrift_create_stp_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_args::~switch_sai_rpc_sai_thrift_remove_stp_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stp_id);
          this->__isset.stp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_stp_entry_args");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->stp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_pargs::~switch_sai_rpc_sai_thrift_remove_stp_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_stp_entry_pargs");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->stp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_result::~switch_sai_rpc_sai_thrift_remove_stp_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_stp_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_presult::~switch_sai_rpc_sai_thrift_remove_stp_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_args::~switch_sai_rpc_sai_thrift_set_stp_port_state_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stp_id);
          this->__isset.stp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->stp_port_state);
          this->__isset.stp_port_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_stp_port_state_args");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->stp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stp_port_state", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->stp_port_state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_pargs::~switch_sai_rpc_sai_thrift_set_stp_port_state_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_stp_port_state_pargs");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->stp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stp_port_state", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->stp_port_state)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_result::~switch_sai_rpc_sai_thrift_set_stp_port_state_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_stp_port_state_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_presult::~switch_sai_rpc_sai_thrift_set_stp_port_state_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_args::~switch_sai_rpc_sai_thrift_get_stp_port_state_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stp_id);
          this->__isset.stp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_stp_port_state_args");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->stp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_pargs::~switch_sai_rpc_sai_thrift_get_stp_port_state_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_stp_port_state_pargs");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->stp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_result::~switch_sai_rpc_sai_thrift_get_stp_port_state_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_stp_port_state_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BYTE, 0);
    xfer += oprot->writeByte(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_presult::~switch_sai_rpc_sai_thrift_get_stp_port_state_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_args::~switch_sai_rpc_sai_thrift_create_neighbor_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_neighbor_entry.read(iprot);
          this->__isset.thrift_neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size235;
            ::apache::thrift::protocol::TType _etype238;
            xfer += iprot->readListBegin(_etype238, _size235);
            this->thrift_attr_list.resize(_size235);
            uint32_t _i239;
            for (_i239 = 0; _i239 < _size235; ++_i239)
            {
              xfer += this->thrift_attr_list[_i239].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_neighbor_entry_args");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_neighbor_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter240;
    for (_iter240 = this->thrift_attr_list.begin(); _iter240 != this->thrift_attr_list.end(); ++_iter240)
    {
      xfer += (*_iter240).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs::~switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_neighbor_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter241;
    for (_iter241 = (*(this->thrift_attr_list)).begin(); _iter241 != (*(this->thrift_attr_list)).end(); ++_iter241)
    {
      xfer += (*_iter241).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_result::~switch_sai_rpc_sai_thrift_create_neighbor_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_neighbor_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_presult::~switch_sai_rpc_sai_thrift_create_neighbor_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_args::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_neighbor_entry.read(iprot);
          this->__isset.thrift_neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_neighbor_entry_args");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_neighbor_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_neighbor_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_result::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_neighbor_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_args::~switch_sai_rpc_sai_thrift_create_switch_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size242;
            ::apache::thrift::protocol::TType _etype245;
            xfer += iprot->readListBegin(_etype245, _size242);
            this->thrift_attr_list.resize(_size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              xfer += this->thrift_attr_list[_i246].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_switch_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_switch_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter247;
    for (_iter247 = this->thrift_attr_list.begin(); _iter247 != this->thrift_attr_list.end(); ++_iter247)
    {
      xfer += (*_iter247).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_pargs::~switch_sai_rpc_sai_thrift_create_switch_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_switch_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter248;
    for (_iter248 = (*(this->thrift_attr_list)).begin(); _iter248 != (*(this->thrift_attr_list)).end(); ++_iter248)
    {
      xfer += (*_iter248).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_result::~switch_sai_rpc_sai_thrift_create_switch_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_switch_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_switch_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_presult::~switch_sai_rpc_sai_thrift_create_switch_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_args::~switch_sai_rpc_sai_thrift_get_switch_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size249;
            ::apache::thrift::protocol::TType _etype252;
            xfer += iprot->readListBegin(_etype252, _size249);
            this->thrift_attr_list.resize(_size249);
            uint32_t _i253;
            for (_i253 = 0; _i253 < _size249; ++_i253)
            {
              xfer += this->thrift_attr_list[_i253].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_switch_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter254;
    for (_iter254 = this->thrift_attr_list.begin(); _iter254 != this->thrift_attr_list.end(); ++_iter254)
    {
      xfer += (*_iter254).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_pargs::~switch_sai_rpc_sai_thrift_get_switch_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_switch_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter255;
    for (_iter255 = (*(this->thrift_attr_list)).begin(); _iter255 != (*(this->thrift_attr_list)).end(); ++_iter255)
    {
      xfer += (*_iter255).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_result::~switch_sai_rpc_sai_thrift_get_switch_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_switch_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_presult::~switch_sai_rpc_sai_thrift_get_switch_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_args::~switch_sai_rpc_sai_thrift_get_cpu_port_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_port_id_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs::~switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_result::~switch_sai_rpc_sai_thrift_get_cpu_port_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_port_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_presult::~switch_sai_rpc_sai_thrift_get_cpu_port_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_args::~switch_sai_rpc_sai_thrift_get_default_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_trap_group_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_pargs::~switch_sai_rpc_sai_thrift_get_default_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_trap_group_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_result::~switch_sai_rpc_sai_thrift_get_default_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_presult::~switch_sai_rpc_sai_thrift_get_default_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_args::~switch_sai_rpc_sai_thrift_get_default_router_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_router_id_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_pargs::~switch_sai_rpc_sai_thrift_get_default_router_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_router_id_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_result::~switch_sai_rpc_sai_thrift_get_default_router_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_router_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_presult::~switch_sai_rpc_sai_thrift_get_default_router_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port_name);
          this->__isset.port_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args");

  xfer += oprot->writeFieldBegin("port_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->port_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs");

  xfer += oprot->writeFieldBegin("port_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->port_name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_args::~switch_sai_rpc_sai_thrift_set_switch_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attribute.read(iprot);
          this->__isset.attribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_switch_attribute_args");

  xfer += oprot->writeFieldBegin("attribute", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->attribute.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_pargs::~switch_sai_rpc_sai_thrift_set_switch_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_switch_attribute_pargs");

  xfer += oprot->writeFieldBegin("attribute", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->attribute)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_result::~switch_sai_rpc_sai_thrift_set_switch_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_switch_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_presult::~switch_sai_rpc_sai_thrift_set_switch_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_args::~switch_sai_rpc_sai_thrift_create_hostif_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size256;
            ::apache::thrift::protocol::TType _etype259;
            xfer += iprot->readListBegin(_etype259, _size256);
            this->thrift_attr_list.resize(_size256);
            uint32_t _i260;
            for (_i260 = 0; _i260 < _size256; ++_i260)
            {
              xfer += this->thrift_attr_list[_i260].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter261;
    for (_iter261 = this->thrift_attr_list.begin(); _iter261 != this->thrift_attr_list.end(); ++_iter261)
    {
      xfer += (*_iter261).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_pargs::~switch_sai_rpc_sai_thrift_create_hostif_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter262;
    for (_iter262 = (*(this->thrift_attr_list)).begin(); _iter262 != (*(this->thrift_attr_list)).end(); ++_iter262)
    {
      xfer += (*_iter262).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_result::~switch_sai_rpc_sai_thrift_create_hostif_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_presult::~switch_sai_rpc_sai_thrift_create_hostif_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_args::~switch_sai_rpc_sai_thrift_remove_hostif_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hif_id);
          this->__isset.hif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_args");

  xfer += oprot->writeFieldBegin("hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->hif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_pargs");

  xfer += oprot->writeFieldBegin("hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->hif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_result::~switch_sai_rpc_sai_thrift_remove_hostif_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_presult::~switch_sai_rpc_sai_thrift_remove_hostif_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_args::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size263;
            ::apache::thrift::protocol::TType _etype266;
            xfer += iprot->readListBegin(_etype266, _size263);
            this->thrift_attr_list.resize(_size263);
            uint32_t _i267;
            for (_i267 = 0; _i267 < _size263; ++_i267)
            {
              xfer += this->thrift_attr_list[_i267].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter268;
    for (_iter268 = this->thrift_attr_list.begin(); _iter268 != this->thrift_attr_list.end(); ++_iter268)
    {
      xfer += (*_iter268).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter269;
    for (_iter269 = (*(this->thrift_attr_list)).begin(); _iter269 != (*(this->thrift_attr_list)).end(); ++_iter269)
    {
      xfer += (*_iter269).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_result::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->trap_group_id);
          this->__isset.trap_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args");

  xfer += oprot->writeFieldBegin("trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->trap_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs");

  xfer += oprot->writeFieldBegin("trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->trap_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_args::~switch_sai_rpc_sai_thrift_create_hostif_trap_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size270;
            ::apache::thrift::protocol::TType _etype273;
            xfer += iprot->readListBegin(_etype273, _size270);
            this->thrift_attr_list.resize(_size270);
            uint32_t _i274;
            for (_i274 = 0; _i274 < _size270; ++_i274)
            {
              xfer += this->thrift_attr_list[_i274].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter275;
    for (_iter275 = this->thrift_attr_list.begin(); _iter275 != this->thrift_attr_list.end(); ++_iter275)
    {
      xfer += (*_iter275).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_pargs::~switch_sai_rpc_sai_thrift_create_hostif_trap_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter276;
    for (_iter276 = (*(this->thrift_attr_list)).begin(); _iter276 != (*(this->thrift_attr_list)).end(); ++_iter276)
    {
      xfer += (*_iter276).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_result::~switch_sai_rpc_sai_thrift_create_hostif_trap_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_presult::~switch_sai_rpc_sai_thrift_create_hostif_trap_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_args::~switch_sai_rpc_sai_thrift_remove_hostif_trap_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trap_id);
          this->__isset.trap_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_args");

  xfer += oprot->writeFieldBegin("trap_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->trap_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs");

  xfer += oprot->writeFieldBegin("trap_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->trap_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_result::~switch_sai_rpc_sai_thrift_remove_hostif_trap_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_presult::~switch_sai_rpc_sai_thrift_remove_hostif_trap_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_args::~switch_sai_rpc_sai_thrift_set_hostif_trap_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trap_id);
          this->__isset.trap_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_args");

  xfer += oprot->writeFieldBegin("trap_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->trap_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_pargs::~switch_sai_rpc_sai_thrift_set_hostif_trap_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_pargs");

  xfer += oprot->writeFieldBegin("trap_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->trap_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_result::~switch_sai_rpc_sai_thrift_set_hostif_trap_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_presult::~switch_sai_rpc_sai_thrift_set_hostif_trap_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_args::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->trap_group_id);
          this->__isset.trap_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_group_args");

  xfer += oprot->writeFieldBegin("trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->trap_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_pargs::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_group_pargs");

  xfer += oprot->writeFieldBegin("trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->trap_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_result::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_presult::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_args::~switch_sai_rpc_sai_thrift_create_acl_table_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size277;
            ::apache::thrift::protocol::TType _etype280;
            xfer += iprot->readListBegin(_etype280, _size277);
            this->thrift_attr_list.resize(_size277);
            uint32_t _i281;
            for (_i281 = 0; _i281 < _size277; ++_i281)
            {
              xfer += this->thrift_attr_list[_i281].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter282;
    for (_iter282 = this->thrift_attr_list.begin(); _iter282 != this->thrift_attr_list.end(); ++_iter282)
    {
      xfer += (*_iter282).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_pargs::~switch_sai_rpc_sai_thrift_create_acl_table_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter283;
    for (_iter283 = (*(this->thrift_attr_list)).begin(); _iter283 != (*(this->thrift_attr_list)).end(); ++_iter283)
    {
      xfer += (*_iter283).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_result::~switch_sai_rpc_sai_thrift_create_acl_table_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_presult::~switch_sai_rpc_sai_thrift_create_acl_table_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_table_args::~switch_sai_rpc_sai_thrift_delete_acl_table_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_id);
          this->__isset.acl_table_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_acl_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_table_args");

  xfer += oprot->writeFieldBegin("acl_table_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_table_pargs::~switch_sai_rpc_sai_thrift_delete_acl_table_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_table_pargs");

  xfer += oprot->writeFieldBegin("acl_table_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_table_result::~switch_sai_rpc_sai_thrift_delete_acl_table_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_acl_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_table_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_table_presult::~switch_sai_rpc_sai_thrift_delete_acl_table_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_args::~switch_sai_rpc_sai_thrift_create_acl_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size284;
            ::apache::thrift::protocol::TType _etype287;
            xfer += iprot->readListBegin(_etype287, _size284);
            this->thrift_attr_list.resize(_size284);
            uint32_t _i288;
            for (_i288 = 0; _i288 < _size284; ++_i288)
            {
              xfer += this->thrift_attr_list[_i288].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter289;
    for (_iter289 = this->thrift_attr_list.begin(); _iter289 != this->thrift_attr_list.end(); ++_iter289)
    {
      xfer += (*_iter289).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_pargs::~switch_sai_rpc_sai_thrift_create_acl_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter290;
    for (_iter290 = (*(this->thrift_attr_list)).begin(); _iter290 != (*(this->thrift_attr_list)).end(); ++_iter290)
    {
      xfer += (*_iter290).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_result::~switch_sai_rpc_sai_thrift_create_acl_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_presult::~switch_sai_rpc_sai_thrift_create_acl_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_entry_args::~switch_sai_rpc_sai_thrift_delete_acl_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_entry);
          this->__isset.acl_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_acl_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_entry_args");

  xfer += oprot->writeFieldBegin("acl_entry", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_entry_pargs::~switch_sai_rpc_sai_thrift_delete_acl_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_entry_pargs");

  xfer += oprot->writeFieldBegin("acl_entry", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_entry)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_entry_result::~switch_sai_rpc_sai_thrift_delete_acl_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_acl_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_entry_presult::~switch_sai_rpc_sai_thrift_delete_acl_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_args::~switch_sai_rpc_sai_thrift_create_acl_counter_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size291;
            ::apache::thrift::protocol::TType _etype294;
            xfer += iprot->readListBegin(_etype294, _size291);
            this->thrift_attr_list.resize(_size291);
            uint32_t _i295;
            for (_i295 = 0; _i295 < _size291; ++_i295)
            {
              xfer += this->thrift_attr_list[_i295].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_counter_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter296;
    for (_iter296 = this->thrift_attr_list.begin(); _iter296 != this->thrift_attr_list.end(); ++_iter296)
    {
      xfer += (*_iter296).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_pargs::~switch_sai_rpc_sai_thrift_create_acl_counter_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_counter_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter297;
    for (_iter297 = (*(this->thrift_attr_list)).begin(); _iter297 != (*(this->thrift_attr_list)).end(); ++_iter297)
    {
      xfer += (*_iter297).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_result::~switch_sai_rpc_sai_thrift_create_acl_counter_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_counter_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_presult::~switch_sai_rpc_sai_thrift_create_acl_counter_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_counter_args::~switch_sai_rpc_sai_thrift_delete_acl_counter_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_counter_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_counter_id);
          this->__isset.acl_counter_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_acl_counter_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_counter_args");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_counter_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_counter_pargs::~switch_sai_rpc_sai_thrift_delete_acl_counter_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_counter_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_counter_pargs");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_counter_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_counter_result::~switch_sai_rpc_sai_thrift_delete_acl_counter_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_counter_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_acl_counter_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_acl_counter_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_acl_counter_presult::~switch_sai_rpc_sai_thrift_delete_acl_counter_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_acl_counter_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_counter_id);
          this->__isset.acl_counter_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size298;
            ::apache::thrift::protocol::TType _etype301;
            xfer += iprot->readListBegin(_etype301, _size298);
            this->thrift_attr_ids.resize(_size298);
            uint32_t _i302;
            for (_i302 = 0; _i302 < _size298; ++_i302)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i302]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_counter_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter303;
    for (_iter303 = this->thrift_attr_ids.begin(); _iter303 != this->thrift_attr_ids.end(); ++_iter303)
    {
      xfer += oprot->writeI32((*_iter303));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_counter_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter304;
    for (_iter304 = (*(this->thrift_attr_ids)).begin(); _iter304 != (*(this->thrift_attr_ids)).end(); ++_iter304)
    {
      xfer += oprot->writeI32((*_iter304));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size305;
            ::apache::thrift::protocol::TType _etype308;
            xfer += iprot->readListBegin(_etype308, _size305);
            this->success.resize(_size305);
            uint32_t _i309;
            for (_i309 = 0; _i309 < _size305; ++_i309)
            {
              xfer += this->success[_i309].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector<sai_thrift_attribute_value_t> ::const_iterator _iter310;
      for (_iter310 = this->success.begin(); _iter310 != this->success.end(); ++_iter310)
      {
        xfer += (*_iter310).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size311;
            ::apache::thrift::protocol::TType _etype314;
            xfer += iprot->readListBegin(_etype314, _size311);
            (*(this->success)).resize(_size311);
            uint32_t _i315;
            for (_i315 = 0; _i315 < _size311; ++_i315)
            {
              xfer += (*(this->success))[_i315].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_args::~switch_sai_rpc_sai_thrift_create_mirror_session_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size316;
            ::apache::thrift::protocol::TType _etype319;
            xfer += iprot->readListBegin(_etype319, _size316);
            this->thrift_attr_list.resize(_size316);
            uint32_t _i320;
            for (_i320 = 0; _i320 < _size316; ++_i320)
            {
              xfer += this->thrift_attr_list[_i320].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mirror_session_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter321;
    for (_iter321 = this->thrift_attr_list.begin(); _iter321 != this->thrift_attr_list.end(); ++_iter321)
    {
      xfer += (*_iter321).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_pargs::~switch_sai_rpc_sai_thrift_create_mirror_session_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mirror_session_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter322;
    for (_iter322 = (*(this->thrift_attr_list)).begin(); _iter322 != (*(this->thrift_attr_list)).end(); ++_iter322)
    {
      xfer += (*_iter322).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_result::~switch_sai_rpc_sai_thrift_create_mirror_session_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mirror_session_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_presult::~switch_sai_rpc_sai_thrift_create_mirror_session_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_args::~switch_sai_rpc_sai_thrift_remove_mirror_session_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mirror_session_args");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_pargs::~switch_sai_rpc_sai_thrift_remove_mirror_session_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mirror_session_pargs");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->session_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_result::~switch_sai_rpc_sai_thrift_remove_mirror_session_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mirror_session_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_presult::~switch_sai_rpc_sai_thrift_remove_mirror_session_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_args::~switch_sai_rpc_sai_thrift_create_policer_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size323;
            ::apache::thrift::protocol::TType _etype326;
            xfer += iprot->readListBegin(_etype326, _size323);
            this->thrift_attr_list.resize(_size323);
            uint32_t _i327;
            for (_i327 = 0; _i327 < _size323; ++_i327)
            {
              xfer += this->thrift_attr_list[_i327].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_policer_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_policer_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter328;
    for (_iter328 = this->thrift_attr_list.begin(); _iter328 != this->thrift_attr_list.end(); ++_iter328)
    {
      xfer += (*_iter328).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_pargs::~switch_sai_rpc_sai_thrift_create_policer_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_policer_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter329;
    for (_iter329 = (*(this->thrift_attr_list)).begin(); _iter329 != (*(this->thrift_attr_list)).end(); ++_iter329)
    {
      xfer += (*_iter329).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_result::~switch_sai_rpc_sai_thrift_create_policer_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_policer_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_policer_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_presult::~switch_sai_rpc_sai_thrift_create_policer_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_args::~switch_sai_rpc_sai_thrift_remove_policer_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->policer_id);
          this->__isset.policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_policer_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_policer_args");

  xfer += oprot->writeFieldBegin("policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_pargs::~switch_sai_rpc_sai_thrift_remove_policer_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_policer_pargs");

  xfer += oprot->writeFieldBegin("policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_result::~switch_sai_rpc_sai_thrift_remove_policer_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_policer_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_policer_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_presult::~switch_sai_rpc_sai_thrift_remove_policer_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_args::~switch_sai_rpc_sai_thrift_get_policer_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->policer_id);
          this->__isset.policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size330;
            ::apache::thrift::protocol::TType _etype333;
            xfer += iprot->readListBegin(_etype333, _size330);
            this->counter_ids.resize(_size330);
            uint32_t _i334;
            for (_i334 = 0; _i334 < _size330; ++_i334)
            {
              xfer += iprot->readI32(this->counter_ids[_i334]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_stats_args");

  xfer += oprot->writeFieldBegin("policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_policer_stat_counter_t> ::const_iterator _iter335;
    for (_iter335 = this->counter_ids.begin(); _iter335 != this->counter_ids.end(); ++_iter335)
    {
      xfer += oprot->writeI32((*_iter335));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_pargs::~switch_sai_rpc_sai_thrift_get_policer_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_stats_pargs");

  xfer += oprot->writeFieldBegin("policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_policer_stat_counter_t> ::const_iterator _iter336;
    for (_iter336 = (*(this->counter_ids)).begin(); _iter336 != (*(this->counter_ids)).end(); ++_iter336)
    {
      xfer += oprot->writeI32((*_iter336));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_result::~switch_sai_rpc_sai_thrift_get_policer_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size337;
            ::apache::thrift::protocol::TType _etype340;
            xfer += iprot->readListBegin(_etype340, _size337);
            this->success.resize(_size337);
            uint32_t _i341;
            for (_i341 = 0; _i341 < _size337; ++_i341)
            {
              xfer += iprot->readI64(this->success[_i341]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter342;
      for (_iter342 = this->success.begin(); _iter342 != this->success.end(); ++_iter342)
      {
        xfer += oprot->writeI64((*_iter342));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_presult::~switch_sai_rpc_sai_thrift_get_policer_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size343;
            ::apache::thrift::protocol::TType _etype346;
            xfer += iprot->readListBegin(_etype346, _size343);
            (*(this->success)).resize(_size343);
            uint32_t _i347;
            for (_i347 = 0; _i347 < _size343; ++_i347)
            {
              xfer += iprot->readI64((*(this->success))[_i347]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_args::~switch_sai_rpc_sai_thrift_create_scheduler_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size348;
            ::apache::thrift::protocol::TType _etype351;
            xfer += iprot->readListBegin(_etype351, _size348);
            this->thrift_attr_list.resize(_size348);
            uint32_t _i352;
            for (_i352 = 0; _i352 < _size348; ++_i352)
            {
              xfer += this->thrift_attr_list[_i352].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter353;
    for (_iter353 = this->thrift_attr_list.begin(); _iter353 != this->thrift_attr_list.end(); ++_iter353)
    {
      xfer += (*_iter353).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs::~switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter354;
    for (_iter354 = (*(this->thrift_attr_list)).begin(); _iter354 != (*(this->thrift_attr_list)).end(); ++_iter354)
    {
      xfer += (*_iter354).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_result::~switch_sai_rpc_sai_thrift_create_scheduler_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_presult::~switch_sai_rpc_sai_thrift_create_scheduler_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_args::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scheduler_id);
          this->__isset.scheduler_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_profile_args");

  xfer += oprot->writeFieldBegin("scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scheduler_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs");

  xfer += oprot->writeFieldBegin("scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->scheduler_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_result::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_args::~switch_sai_rpc_sai_thrift_get_queue_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size355;
            ::apache::thrift::protocol::TType _etype358;
            xfer += iprot->readListBegin(_etype358, _size355);
            this->counter_ids.resize(_size355);
            uint32_t _i359;
            for (_i359 = 0; _i359 < _size355; ++_i359)
            {
              xfer += iprot->readI32(this->counter_ids[_i359]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_stats_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter360;
    for (_iter360 = this->counter_ids.begin(); _iter360 != this->counter_ids.end(); ++_iter360)
    {
      xfer += oprot->writeI32((*_iter360));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_pargs::~switch_sai_rpc_sai_thrift_get_queue_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_stats_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter361;
    for (_iter361 = (*(this->counter_ids)).begin(); _iter361 != (*(this->counter_ids)).end(); ++_iter361)
    {
      xfer += oprot->writeI32((*_iter361));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_result::~switch_sai_rpc_sai_thrift_get_queue_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size362;
            ::apache::thrift::protocol::TType _etype365;
            xfer += iprot->readListBegin(_etype365, _size362);
            this->success.resize(_size362);
            uint32_t _i366;
            for (_i366 = 0; _i366 < _size362; ++_i366)
            {
              xfer += iprot->readI64(this->success[_i366]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter367;
      for (_iter367 = this->success.begin(); _iter367 != this->success.end(); ++_iter367)
      {
        xfer += oprot->writeI64((*_iter367));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_presult::~switch_sai_rpc_sai_thrift_get_queue_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size368;
            ::apache::thrift::protocol::TType _etype371;
            xfer += iprot->readListBegin(_etype371, _size368);
            (*(this->success)).resize(_size368);
            uint32_t _i372;
            for (_i372 = 0; _i372 < _size368; ++_i372)
            {
              xfer += iprot->readI64((*(this->success))[_i372]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_args::~switch_sai_rpc_sai_thrift_clear_queue_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size373;
            ::apache::thrift::protocol::TType _etype376;
            xfer += iprot->readListBegin(_etype376, _size373);
            this->counter_ids.resize(_size373);
            uint32_t _i377;
            for (_i377 = 0; _i377 < _size373; ++_i377)
            {
              xfer += iprot->readI32(this->counter_ids[_i377]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_queue_stats_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter378;
    for (_iter378 = this->counter_ids.begin(); _iter378 != this->counter_ids.end(); ++_iter378)
    {
      xfer += oprot->writeI32((*_iter378));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_pargs::~switch_sai_rpc_sai_thrift_clear_queue_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_queue_stats_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter379;
    for (_iter379 = (*(this->counter_ids)).begin(); _iter379 != (*(this->counter_ids)).end(); ++_iter379)
    {
      xfer += oprot->writeI32((*_iter379));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_result::~switch_sai_rpc_sai_thrift_clear_queue_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_queue_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_presult::~switch_sai_rpc_sai_thrift_clear_queue_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_args::~switch_sai_rpc_sai_thrift_set_queue_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_queue_attribute_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_pargs::~switch_sai_rpc_sai_thrift_set_queue_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_queue_attribute_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_result::~switch_sai_rpc_sai_thrift_set_queue_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_queue_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_presult::~switch_sai_rpc_sai_thrift_set_queue_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_args::~switch_sai_rpc_sai_thrift_create_buffer_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size380;
            ::apache::thrift::protocol::TType _etype383;
            xfer += iprot->readListBegin(_etype383, _size380);
            this->thrift_attr_list.resize(_size380);
            uint32_t _i384;
            for (_i384 = 0; _i384 < _size380; ++_i384)
            {
              xfer += this->thrift_attr_list[_i384].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_buffer_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter385;
    for (_iter385 = this->thrift_attr_list.begin(); _iter385 != this->thrift_attr_list.end(); ++_iter385)
    {
      xfer += (*_iter385).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_pargs::~switch_sai_rpc_sai_thrift_create_buffer_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_buffer_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter386;
    for (_iter386 = (*(this->thrift_attr_list)).begin(); _iter386 != (*(this->thrift_attr_list)).end(); ++_iter386)
    {
      xfer += (*_iter386).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_result::~switch_sai_rpc_sai_thrift_create_buffer_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_buffer_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_presult::~switch_sai_rpc_sai_thrift_create_buffer_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_args::~switch_sai_rpc_sai_thrift_create_pool_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size387;
            ::apache::thrift::protocol::TType _etype390;
            xfer += iprot->readListBegin(_etype390, _size387);
            this->thrift_attr_list.resize(_size387);
            uint32_t _i391;
            for (_i391 = 0; _i391 < _size387; ++_i391)
            {
              xfer += this->thrift_attr_list[_i391].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_pool_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter392;
    for (_iter392 = this->thrift_attr_list.begin(); _iter392 != this->thrift_attr_list.end(); ++_iter392)
    {
      xfer += (*_iter392).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_pargs::~switch_sai_rpc_sai_thrift_create_pool_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_pool_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter393;
    for (_iter393 = (*(this->thrift_attr_list)).begin(); _iter393 != (*(this->thrift_attr_list)).end(); ++_iter393)
    {
      xfer += (*_iter393).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_result::~switch_sai_rpc_sai_thrift_create_pool_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_pool_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_presult::~switch_sai_rpc_sai_thrift_create_pool_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_args::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pg_id);
          this->__isset.pg_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_priority_group_attribute_args");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->pg_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->pg_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_result::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_priority_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_args::~switch_sai_rpc_sai_thrift_get_pg_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pg_id);
          this->__isset.pg_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size394;
            ::apache::thrift::protocol::TType _etype397;
            xfer += iprot->readListBegin(_etype397, _size394);
            this->counter_ids.resize(_size394);
            uint32_t _i398;
            for (_i398 = 0; _i398 < _size394; ++_i398)
            {
              xfer += iprot->readI32(this->counter_ids[_i398]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_pg_stats_args");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->pg_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_pg_stat_counter_t> ::const_iterator _iter399;
    for (_iter399 = this->counter_ids.begin(); _iter399 != this->counter_ids.end(); ++_iter399)
    {
      xfer += oprot->writeI32((*_iter399));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_pargs::~switch_sai_rpc_sai_thrift_get_pg_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_pg_stats_pargs");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->pg_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_pg_stat_counter_t> ::const_iterator _iter400;
    for (_iter400 = (*(this->counter_ids)).begin(); _iter400 != (*(this->counter_ids)).end(); ++_iter400)
    {
      xfer += oprot->writeI32((*_iter400));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_result::~switch_sai_rpc_sai_thrift_get_pg_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size401;
            ::apache::thrift::protocol::TType _etype404;
            xfer += iprot->readListBegin(_etype404, _size401);
            this->success.resize(_size401);
            uint32_t _i405;
            for (_i405 = 0; _i405 < _size401; ++_i405)
            {
              xfer += iprot->readI64(this->success[_i405]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_pg_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter406;
      for (_iter406 = this->success.begin(); _iter406 != this->success.end(); ++_iter406)
      {
        xfer += oprot->writeI64((*_iter406));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_presult::~switch_sai_rpc_sai_thrift_get_pg_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size407;
            ::apache::thrift::protocol::TType _etype410;
            xfer += iprot->readListBegin(_etype410, _size407);
            (*(this->success)).resize(_size407);
            uint32_t _i411;
            for (_i411 = 0; _i411 < _size407; ++_i411)
            {
              xfer += iprot->readI64((*(this->success))[_i411]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_args::~switch_sai_rpc_sai_thrift_create_wred_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size412;
            ::apache::thrift::protocol::TType _etype415;
            xfer += iprot->readListBegin(_etype415, _size412);
            this->thrift_attr_list.resize(_size412);
            uint32_t _i416;
            for (_i416 = 0; _i416 < _size412; ++_i416)
            {
              xfer += this->thrift_attr_list[_i416].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_wred_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter417;
    for (_iter417 = this->thrift_attr_list.begin(); _iter417 != this->thrift_attr_list.end(); ++_iter417)
    {
      xfer += (*_iter417).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_pargs::~switch_sai_rpc_sai_thrift_create_wred_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_wred_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter418;
    for (_iter418 = (*(this->thrift_attr_list)).begin(); _iter418 != (*(this->thrift_attr_list)).end(); ++_iter418)
    {
      xfer += (*_iter418).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_result::~switch_sai_rpc_sai_thrift_create_wred_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_wred_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_presult::~switch_sai_rpc_sai_thrift_create_wred_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_args::~switch_sai_rpc_sai_thrift_remove_wred_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->wred_id);
          this->__isset.wred_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_wred_profile_args");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->wred_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_pargs::~switch_sai_rpc_sai_thrift_remove_wred_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_wred_profile_pargs");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->wred_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_result::~switch_sai_rpc_sai_thrift_remove_wred_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_wred_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_presult::~switch_sai_rpc_sai_thrift_remove_wred_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_args::~switch_sai_rpc_sai_thrift_create_qos_map_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size419;
            ::apache::thrift::protocol::TType _etype422;
            xfer += iprot->readListBegin(_etype422, _size419);
            this->thrift_attr_list.resize(_size419);
            uint32_t _i423;
            for (_i423 = 0; _i423 < _size419; ++_i423)
            {
              xfer += this->thrift_attr_list[_i423].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_qos_map_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_qos_map_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter424;
    for (_iter424 = this->thrift_attr_list.begin(); _iter424 != this->thrift_attr_list.end(); ++_iter424)
    {
      xfer += (*_iter424).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_pargs::~switch_sai_rpc_sai_thrift_create_qos_map_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_qos_map_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter425;
    for (_iter425 = (*(this->thrift_attr_list)).begin(); _iter425 != (*(this->thrift_attr_list)).end(); ++_iter425)
    {
      xfer += (*_iter425).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_result::~switch_sai_rpc_sai_thrift_create_qos_map_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_qos_map_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_qos_map_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_presult::~switch_sai_rpc_sai_thrift_create_qos_map_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_args::~switch_sai_rpc_sai_thrift_remove_qos_map_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->qos_map_id);
          this->__isset.qos_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_qos_map_args");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->qos_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_pargs::~switch_sai_rpc_sai_thrift_remove_qos_map_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_qos_map_pargs");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->qos_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_result::~switch_sai_rpc_sai_thrift_remove_qos_map_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_qos_map_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_presult::~switch_sai_rpc_sai_thrift_remove_qos_map_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_port_attribute(port_id, thrift_attr);
  return recv_sai_thrift_set_port_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_port_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_port_attribute_pargs args;
  args.port_id = &port_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_port_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_port_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_port_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_port_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_get_port_attribute(port_id);
  recv_sai_thrift_get_port_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_attribute_pargs args;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_port_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_port_stats(port_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_port_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_stats_pargs args;
  args.port_id = &port_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_port_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_port_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_clear_port_all_stats(port_id);
  return recv_sai_thrift_clear_port_all_stats();
}

void switch_sai_rpcClient::send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_port_all_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs args;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_clear_port_all_stats()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_port_all_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_clear_port_all_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_port_all_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_port(const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_remove_port(port_id);
  return recv_sai_thrift_remove_port();
}

void switch_sai_rpcClient::send_sai_thrift_remove_port(const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_port_pargs args;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_port failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_port(thrift_attr_list);
  return recv_sai_thrift_create_port();
}

void switch_sai_rpcClient::send_sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_port_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_port failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_bridge(thrift_attr_list);
  return recv_sai_thrift_create_bridge();
}

void switch_sai_rpcClient::send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_bridge", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_bridge_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_bridge()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_bridge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_bridge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_bridge failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id)
{
  send_sai_thrift_remove_bridge(bridge_id);
  return recv_sai_thrift_remove_bridge();
}

void switch_sai_rpcClient::send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_bridge", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_bridge_pargs args;
  args.bridge_id = &bridge_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_bridge()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_bridge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_bridge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_bridge failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_bridge_port(thrift_attr_list);
  return recv_sai_thrift_create_bridge_port();
}

void switch_sai_rpcClient::send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_bridge_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_bridge_port_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_bridge_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_bridge_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_bridge_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_bridge_port failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id)
{
  send_sai_thrift_remove_bridge_port(bridge_port_id);
  return recv_sai_thrift_remove_bridge_port();
}

void switch_sai_rpcClient::send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_bridge_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_bridge_port_pargs args;
  args.bridge_port_id = &bridge_port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_bridge_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_bridge_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_bridge_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_bridge_port failed: unknown result");
}

void switch_sai_rpcClient::sai_thirft_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thirft_get_bridge_attribute(bridge_id, thrift_attr_list);
  recv_sai_thirft_get_bridge_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thirft_get_bridge_attribute(const sai_thrift_object_id_t bridge_id, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thirft_get_bridge_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thirft_get_bridge_attribute_pargs args;
  args.bridge_id = &bridge_id;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thirft_get_bridge_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thirft_get_bridge_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thirft_get_bridge_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thirft_get_bridge_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list);
  return recv_sai_thrift_create_fdb_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_fdb_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_fdb_entry_pargs args;
  args.thrift_fdb_entry = &thrift_fdb_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_fdb_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_fdb_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_fdb_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_fdb_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry)
{
  send_sai_thrift_delete_fdb_entry(thrift_fdb_entry);
  return recv_sai_thrift_delete_fdb_entry();
}

void switch_sai_rpcClient::send_sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_delete_fdb_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs args;
  args.thrift_fdb_entry = &thrift_fdb_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_delete_fdb_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_delete_fdb_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_delete_fdb_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_delete_fdb_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_flush_fdb_entries(thrift_attr_list);
  return recv_sai_thrift_flush_fdb_entries();
}

void switch_sai_rpcClient::send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_flush_fdb_entries", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_flush_fdb_entries()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_flush_fdb_entries") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_flush_fdb_entries_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_flush_fdb_entries failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_vlan(thrift_attr_list);
  return recv_sai_thrift_create_vlan();
}

void switch_sai_rpcClient::send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_vlan", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_vlan_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_vlan()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_vlan") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_vlan_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_vlan failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_delete_vlan(const sai_thrift_object_id_t vlan_id)
{
  send_sai_thrift_delete_vlan(vlan_id);
  return recv_sai_thrift_delete_vlan();
}

void switch_sai_rpcClient::send_sai_thrift_delete_vlan(const sai_thrift_object_id_t vlan_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_delete_vlan", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_delete_vlan_pargs args;
  args.vlan_id = &vlan_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_delete_vlan()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_delete_vlan") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_delete_vlan_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_delete_vlan failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_vlan_stats(vlan_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_vlan_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_vlan_stats(const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_vlan_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_vlan_stats_pargs args;
  args.vlan_id = &vlan_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_vlan_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_vlan_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_vlan_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_vlan_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_vlan_member(thrift_attr_list);
  return recv_sai_thrift_create_vlan_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_vlan_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_vlan_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_vlan_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_vlan_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_vlan_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_vlan_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id)
{
  send_sai_thrift_remove_vlan_member(vlan_member_id);
  return recv_sai_thrift_remove_vlan_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_vlan_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_vlan_member_pargs args;
  args.vlan_member_id = &vlan_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_vlan_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_vlan_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_vlan_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_vlan_member failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id)
{
  send_sai_thrift_get_vlan_attribute(vlan_id);
  recv_sai_thrift_get_vlan_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_vlan_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs args;
  args.vlan_id = &vlan_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_vlan_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_vlan_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_vlan_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_virtual_router(thrift_attr_list);
  return recv_sai_thrift_create_virtual_router();
}

void switch_sai_rpcClient::send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_virtual_router", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_virtual_router_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_virtual_router()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_virtual_router") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_virtual_router_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_virtual_router failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id)
{
  send_sai_thrift_remove_virtual_router(vr_id);
  return recv_sai_thrift_remove_virtual_router();
}

void switch_sai_rpcClient::send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_virtual_router", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_virtual_router_pargs args;
  args.vr_id = &vr_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_virtual_router()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_virtual_router") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_virtual_router_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_virtual_router failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_route(const sai_thrift_unicast_route_entry_t& thrift_unicast_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_route(thrift_unicast_route_entry, thrift_attr_list);
  return recv_sai_thrift_create_route();
}

void switch_sai_rpcClient::send_sai_thrift_create_route(const sai_thrift_unicast_route_entry_t& thrift_unicast_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_route", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_route_pargs args;
  args.thrift_unicast_route_entry = &thrift_unicast_route_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_route()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_route") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_route_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_route failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_route(const sai_thrift_unicast_route_entry_t& thrift_unicast_route_entry)
{
  send_sai_thrift_remove_route(thrift_unicast_route_entry);
  return recv_sai_thrift_remove_route();
}

void switch_sai_rpcClient::send_sai_thrift_remove_route(const sai_thrift_unicast_route_entry_t& thrift_unicast_route_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_route", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_route_pargs args;
  args.thrift_unicast_route_entry = &thrift_unicast_route_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_route()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_route") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_route_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_route failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_router_interface(thrift_attr_list);
  return recv_sai_thrift_create_router_interface();
}

void switch_sai_rpcClient::send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_router_interface", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_router_interface_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_router_interface()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_router_interface") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_router_interface_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_router_interface failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id)
{
  send_sai_thrift_remove_router_interface(rif_id);
  return recv_sai_thrift_remove_router_interface();
}

void switch_sai_rpcClient::send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_router_interface", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_router_interface_pargs args;
  args.rif_id = &rif_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_router_interface()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_router_interface") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_router_interface_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_router_interface failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_next_hop(thrift_attr_list);
  return recv_sai_thrift_create_next_hop();
}

void switch_sai_rpcClient::send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_next_hop", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_next_hop_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_next_hop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_next_hop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_next_hop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_next_hop failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id)
{
  send_sai_thrift_remove_next_hop(next_hop_id);
  return recv_sai_thrift_remove_next_hop();
}

void switch_sai_rpcClient::send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_next_hop", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_next_hop_pargs args;
  args.next_hop_id = &next_hop_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_next_hop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_next_hop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_next_hop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_next_hop failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_next_hop_group(thrift_attr_list);
  return recv_sai_thrift_create_next_hop_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_next_hop_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_next_hop_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_next_hop_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_next_hop_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_next_hop_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_next_hop_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_id)
{
  send_sai_thrift_remove_next_hop_group(next_hop_group_id);
  return recv_sai_thrift_remove_next_hop_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_next_hop_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs args;
  args.next_hop_group_id = &next_hop_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_next_hop_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_next_hop_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_next_hop_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_next_hop_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_add_next_hop_to_group(const sai_thrift_object_id_t next_hop_group_id, const std::vector<sai_thrift_object_id_t> & thrift_nexthops)
{
  send_sai_thrift_add_next_hop_to_group(next_hop_group_id, thrift_nexthops);
  return recv_sai_thrift_add_next_hop_to_group();
}

void switch_sai_rpcClient::send_sai_thrift_add_next_hop_to_group(const sai_thrift_object_id_t next_hop_group_id, const std::vector<sai_thrift_object_id_t> & thrift_nexthops)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_add_next_hop_to_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_add_next_hop_to_group_pargs args;
  args.next_hop_group_id = &next_hop_group_id;
  args.thrift_nexthops = &thrift_nexthops;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_add_next_hop_to_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_add_next_hop_to_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_add_next_hop_to_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_add_next_hop_to_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_next_hop_from_group(const sai_thrift_object_id_t next_hop_group_id, const std::vector<sai_thrift_object_id_t> & thrift_nexthops)
{
  send_sai_thrift_remove_next_hop_from_group(next_hop_group_id, thrift_nexthops);
  return recv_sai_thrift_remove_next_hop_from_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_next_hop_from_group(const sai_thrift_object_id_t next_hop_group_id, const std::vector<sai_thrift_object_id_t> & thrift_nexthops)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_next_hop_from_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_next_hop_from_group_pargs args;
  args.next_hop_group_id = &next_hop_group_id;
  args.thrift_nexthops = &thrift_nexthops;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_next_hop_from_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_next_hop_from_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_next_hop_from_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_next_hop_from_group failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_lag(thrift_attr_list);
  return recv_sai_thrift_create_lag();
}

void switch_sai_rpcClient::send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_lag", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_lag_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_lag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_lag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_lag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_lag failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id)
{
  send_sai_thrift_remove_lag(lag_id);
  return recv_sai_thrift_remove_lag();
}

void switch_sai_rpcClient::send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_lag", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_lag_pargs args;
  args.lag_id = &lag_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_lag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_lag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_lag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_lag failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_lag_member(thrift_attr_list);
  return recv_sai_thrift_create_lag_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_lag_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_lag_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_lag_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_lag_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_lag_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_lag_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id)
{
  send_sai_thrift_remove_lag_member(lag_member_id);
  return recv_sai_thrift_remove_lag_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_lag_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_lag_member_pargs args;
  args.lag_member_id = &lag_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_lag_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_lag_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_lag_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_lag_member failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_stp_entry(thrift_attr_list);
  return recv_sai_thrift_create_stp_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_stp_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_stp_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_stp_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_stp_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_stp_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_stp_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id)
{
  send_sai_thrift_remove_stp_entry(stp_id);
  return recv_sai_thrift_remove_stp_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_stp_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_stp_entry_pargs args;
  args.stp_id = &stp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_stp_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_stp_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_stp_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_stp_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state)
{
  send_sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state);
  return recv_sai_thrift_set_stp_port_state();
}

void switch_sai_rpcClient::send_sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_stp_port_state", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_stp_port_state_pargs args;
  args.stp_id = &stp_id;
  args.port_id = &port_id;
  args.stp_port_state = &stp_port_state;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_stp_port_state()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_stp_port_state") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_stp_port_state_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_stp_port_state failed: unknown result");
}

sai_thrift_port_stp_port_state_t switch_sai_rpcClient::sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_get_stp_port_state(stp_id, port_id);
  return recv_sai_thrift_get_stp_port_state();
}

void switch_sai_rpcClient::send_sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_stp_port_state", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_stp_port_state_pargs args;
  args.stp_id = &stp_id;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_port_stp_port_state_t switch_sai_rpcClient::recv_sai_thrift_get_stp_port_state()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_stp_port_state") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_port_stp_port_state_t _return;
  switch_sai_rpc_sai_thrift_get_stp_port_state_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_stp_port_state failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list);
  return recv_sai_thrift_create_neighbor_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_neighbor_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs args;
  args.thrift_neighbor_entry = &thrift_neighbor_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_neighbor_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_neighbor_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_neighbor_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_neighbor_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry)
{
  send_sai_thrift_remove_neighbor_entry(thrift_neighbor_entry);
  return recv_sai_thrift_remove_neighbor_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_neighbor_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs args;
  args.thrift_neighbor_entry = &thrift_neighbor_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_neighbor_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_neighbor_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_neighbor_entry failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_switch(thrift_attr_list);
  return recv_sai_thrift_create_switch();
}

void switch_sai_rpcClient::send_sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_switch", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_switch_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_switch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_switch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_switch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_switch failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_get_switch_attribute(thrift_attr_list);
  recv_sai_thrift_get_switch_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_switch_attribute(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_switch_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_switch_attribute_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_switch_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_switch_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_switch_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return)
{
  send_sai_thrift_get_port_list_by_front_port();
  recv_sai_thrift_get_port_list_by_front_port(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_port_list_by_front_port()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_list_by_front_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_list_by_front_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_list_by_front_port failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_cpu_port_id()
{
  send_sai_thrift_get_cpu_port_id();
  return recv_sai_thrift_get_cpu_port_id();
}

void switch_sai_rpcClient::send_sai_thrift_get_cpu_port_id()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_cpu_port_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_cpu_port_id()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_cpu_port_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_cpu_port_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_cpu_port_id failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_default_trap_group()
{
  send_sai_thrift_get_default_trap_group();
  return recv_sai_thrift_get_default_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_get_default_trap_group()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_default_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_default_trap_group_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_default_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_default_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_default_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_default_trap_group failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_default_router_id()
{
  send_sai_thrift_get_default_router_id();
  return recv_sai_thrift_get_default_router_id();
}

void switch_sai_rpcClient::send_sai_thrift_get_default_router_id()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_default_router_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_default_router_id_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_default_router_id()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_default_router_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_default_router_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_default_router_id failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_port_id_by_front_port(const std::string& port_name)
{
  send_sai_thrift_get_port_id_by_front_port(port_name);
  return recv_sai_thrift_get_port_id_by_front_port();
}

void switch_sai_rpcClient::send_sai_thrift_get_port_id_by_front_port(const std::string& port_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_id_by_front_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs args;
  args.port_name = &port_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_port_id_by_front_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_id_by_front_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_id_by_front_port failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute)
{
  send_sai_thrift_set_switch_attribute(attribute);
  return recv_sai_thrift_set_switch_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_switch_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_switch_attribute_pargs args;
  args.attribute = &attribute;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_switch_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_switch_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_switch_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_switch_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif(thrift_attr_list);
  return recv_sai_thrift_create_hostif();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hostif()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif(const sai_thrift_object_id_t hif_id)
{
  send_sai_thrift_remove_hostif(hif_id);
  return recv_sai_thrift_remove_hostif();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif(const sai_thrift_object_id_t hif_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_pargs args;
  args.hif_id = &hif_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif_trap_group(thrift_attr_list);
  return recv_sai_thrift_create_hostif_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hostif_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif_trap_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t trap_group_id)
{
  send_sai_thrift_remove_hostif_trap_group(trap_group_id);
  return recv_sai_thrift_remove_hostif_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t trap_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs args;
  args.trap_group_id = &trap_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif_trap_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif_trap(thrift_attr_list);
  return recv_sai_thrift_create_hostif_trap();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif_trap", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_trap_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_hostif_trap()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif_trap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_trap_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif_trap failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif_trap(const sai_thrift_hostif_trap_id_t trap_id)
{
  send_sai_thrift_remove_hostif_trap(trap_id);
  return recv_sai_thrift_remove_hostif_trap();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif_trap(const sai_thrift_hostif_trap_id_t trap_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif_trap", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs args;
  args.trap_id = &trap_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif_trap()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif_trap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_trap_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif_trap failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hostif_trap(const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hostif_trap(trap_id, thrift_attr);
  return recv_sai_thrift_set_hostif_trap();
}

void switch_sai_rpcClient::send_sai_thrift_set_hostif_trap(const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hostif_trap", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hostif_trap_pargs args;
  args.trap_id = &trap_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hostif_trap()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hostif_trap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hostif_trap_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hostif_trap failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hostif_trap_group(const sai_thrift_object_id_t trap_group_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hostif_trap_group(trap_group_id, thrift_attr);
  return recv_sai_thrift_set_hostif_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_set_hostif_trap_group(const sai_thrift_object_id_t trap_group_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hostif_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_pargs args;
  args.trap_group_id = &trap_group_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hostif_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hostif_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hostif_trap_group failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_table(thrift_attr_list);
  return recv_sai_thrift_create_acl_table();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_table", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_table_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_table()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_table") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_table_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_table failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_delete_acl_table(const sai_thrift_object_id_t acl_table_id)
{
  send_sai_thrift_delete_acl_table(acl_table_id);
  return recv_sai_thrift_delete_acl_table();
}

void switch_sai_rpcClient::send_sai_thrift_delete_acl_table(const sai_thrift_object_id_t acl_table_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_delete_acl_table", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_delete_acl_table_pargs args;
  args.acl_table_id = &acl_table_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_delete_acl_table()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_delete_acl_table") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_delete_acl_table_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_delete_acl_table failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_entry(thrift_attr_list);
  return recv_sai_thrift_create_acl_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_delete_acl_entry(const sai_thrift_object_id_t acl_entry)
{
  send_sai_thrift_delete_acl_entry(acl_entry);
  return recv_sai_thrift_delete_acl_entry();
}

void switch_sai_rpcClient::send_sai_thrift_delete_acl_entry(const sai_thrift_object_id_t acl_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_delete_acl_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_delete_acl_entry_pargs args;
  args.acl_entry = &acl_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_delete_acl_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_delete_acl_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_delete_acl_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_delete_acl_entry failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_counter(thrift_attr_list);
  return recv_sai_thrift_create_acl_counter();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_counter", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_counter_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_counter()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_counter") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_counter_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_counter failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_delete_acl_counter(const sai_thrift_object_id_t acl_counter_id)
{
  send_sai_thrift_delete_acl_counter(acl_counter_id);
  return recv_sai_thrift_delete_acl_counter();
}

void switch_sai_rpcClient::send_sai_thrift_delete_acl_counter(const sai_thrift_object_id_t acl_counter_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_delete_acl_counter", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_delete_acl_counter_pargs args;
  args.acl_counter_id = &acl_counter_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_delete_acl_counter()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_delete_acl_counter") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_delete_acl_counter_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_delete_acl_counter failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_acl_counter_attribute(acl_counter_id, thrift_attr_ids);
  recv_sai_thrift_get_acl_counter_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_acl_counter_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs args;
  args.acl_counter_id = &acl_counter_id;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_acl_counter_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_acl_counter_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_mirror_session(thrift_attr_list);
  return recv_sai_thrift_create_mirror_session();
}

void switch_sai_rpcClient::send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_mirror_session", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_mirror_session_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_mirror_session()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_mirror_session") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_mirror_session_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_mirror_session failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id)
{
  send_sai_thrift_remove_mirror_session(session_id);
  return recv_sai_thrift_remove_mirror_session();
}

void switch_sai_rpcClient::send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_mirror_session", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_mirror_session_pargs args;
  args.session_id = &session_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_mirror_session()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_mirror_session") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_mirror_session_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_mirror_session failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_policer(thrift_attr_list);
  return recv_sai_thrift_create_policer();
}

void switch_sai_rpcClient::send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_policer", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_policer_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_policer()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_policer") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_policer_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_policer failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_policer(const sai_thrift_object_id_t policer_id)
{
  send_sai_thrift_remove_policer(policer_id);
  return recv_sai_thrift_remove_policer();
}

void switch_sai_rpcClient::send_sai_thrift_remove_policer(const sai_thrift_object_id_t policer_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_policer", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_policer_pargs args;
  args.policer_id = &policer_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_policer()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_policer") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_policer_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_policer failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_policer_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t policer_id, const std::vector<sai_thrift_policer_stat_counter_t> & counter_ids)
{
  send_sai_thrift_get_policer_stats(policer_id, counter_ids);
  recv_sai_thrift_get_policer_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t policer_id, const std::vector<sai_thrift_policer_stat_counter_t> & counter_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_policer_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_policer_stats_pargs args;
  args.policer_id = &policer_id;
  args.counter_ids = &counter_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_policer_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_policer_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_policer_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_policer_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_scheduler_profile(thrift_attr_list);
  return recv_sai_thrift_create_scheduler_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_scheduler_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_scheduler_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_scheduler_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_scheduler_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_scheduler_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id)
{
  send_sai_thrift_remove_scheduler_profile(scheduler_id);
  return recv_sai_thrift_remove_scheduler_profile();
}

void switch_sai_rpcClient::send_sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_scheduler_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs args;
  args.scheduler_id = &scheduler_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_scheduler_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_scheduler_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_scheduler_profile failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_queue_stats(queue_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_queue_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_queue_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_queue_stats_pargs args;
  args.queue_id = &queue_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_queue_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_queue_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_queue_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_queue_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters);
  return recv_sai_thrift_clear_queue_stats();
}

void switch_sai_rpcClient::send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_queue_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_queue_stats_pargs args;
  args.queue_id = &queue_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_clear_queue_stats()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_queue_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_clear_queue_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_queue_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_queue_attribute(queue_id, thrift_attr);
  return recv_sai_thrift_set_queue_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_queue_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_queue_attribute_pargs args;
  args.queue_id = &queue_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_queue_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_queue_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_queue_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_queue_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_buffer_profile(thrift_attr_list);
  return recv_sai_thrift_create_buffer_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_buffer_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_buffer_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_buffer_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_buffer_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_buffer_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_buffer_profile failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_pool_profile(thrift_attr_list);
  return recv_sai_thrift_create_pool_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_pool_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_pool_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_pool_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_pool_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_pool_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_pool_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_priority_group_attribute(pg_id, thrift_attr);
  return recv_sai_thrift_set_priority_group_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_priority_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs args;
  args.pg_id = &pg_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_priority_group_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_priority_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_priority_group_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_pg_stats(pg_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_pg_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_pg_stats(const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_pg_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_pg_stats_pargs args;
  args.pg_id = &pg_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_pg_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_pg_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_pg_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_pg_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_wred_profile(thrift_attr_list);
  return recv_sai_thrift_create_wred_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_wred_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_wred_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_wred_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_wred_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_wred_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_wred_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id)
{
  send_sai_thrift_remove_wred_profile(wred_id);
  return recv_sai_thrift_remove_wred_profile();
}

void switch_sai_rpcClient::send_sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_wred_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_wred_profile_pargs args;
  args.wred_id = &wred_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_wred_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_wred_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_wred_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_wred_profile failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_qos_map(thrift_attr_list);
  return recv_sai_thrift_create_qos_map();
}

void switch_sai_rpcClient::send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_qos_map", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_qos_map_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_qos_map()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_qos_map") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_qos_map_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_qos_map failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id)
{
  send_sai_thrift_remove_qos_map(qos_map_id);
  return recv_sai_thrift_remove_qos_map();
}

void switch_sai_rpcClient::send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_qos_map", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_qos_map_pargs args;
  args.qos_map_id = &qos_map_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_qos_map()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_qos_map") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_qos_map_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_qos_map failed: unknown result");
}

bool switch_sai_rpcProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void switch_sai_rpcProcessor::process_sai_thrift_set_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_port_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");
  }

  switch_sai_rpc_sai_thrift_set_port_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_port_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_port_attribute(args.port_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_port_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_port_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");
  }

  switch_sai_rpc_sai_thrift_get_port_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_attribute_result result;
  try {
    iface_->sai_thrift_get_port_attribute(result.success, args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_stats");
  }

  switch_sai_rpc_sai_thrift_get_port_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_stats_result result;
  try {
    iface_->sai_thrift_get_port_stats(result.success, args.port_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_port_all_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_port_all_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");
  }

  switch_sai_rpc_sai_thrift_clear_port_all_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_port_all_stats_result result;
  try {
    result.success = iface_->sai_thrift_clear_port_all_stats(args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_port_all_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");
  }

  oprot->writeMessageBegin("sai_thrift_clear_port_all_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_port");
  }

  switch_sai_rpc_sai_thrift_remove_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_port", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_port_result result;
  try {
    result.success = iface_->sai_thrift_remove_port(args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_port");
  }

  oprot->writeMessageBegin("sai_thrift_remove_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_port");
  }

  switch_sai_rpc_sai_thrift_create_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_port", bytes);
  }

  switch_sai_rpc_sai_thrift_create_port_result result;
  try {
    result.success = iface_->sai_thrift_create_port(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_port");
  }

  oprot->writeMessageBegin("sai_thrift_create_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_bridge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_bridge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge");
  }

  switch_sai_rpc_sai_thrift_create_bridge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge", bytes);
  }

  switch_sai_rpc_sai_thrift_create_bridge_result result;
  try {
    result.success = iface_->sai_thrift_create_bridge(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_bridge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_bridge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge");
  }

  oprot->writeMessageBegin("sai_thrift_create_bridge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_bridge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_bridge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge");
  }

  switch_sai_rpc_sai_thrift_remove_bridge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_bridge_result result;
  try {
    result.success = iface_->sai_thrift_remove_bridge(args.bridge_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_bridge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_bridge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge");
  }

  oprot->writeMessageBegin("sai_thrift_remove_bridge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_bridge_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");
  }

  switch_sai_rpc_sai_thrift_create_bridge_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port", bytes);
  }

  switch_sai_rpc_sai_thrift_create_bridge_port_result result;
  try {
    result.success = iface_->sai_thrift_create_bridge_port(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_bridge_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");
  }

  oprot->writeMessageBegin("sai_thrift_create_bridge_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_bridge_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");
  }

  switch_sai_rpc_sai_thrift_remove_bridge_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_bridge_port_result result;
  try {
    result.success = iface_->sai_thrift_remove_bridge_port(args.bridge_port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_bridge_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");
  }

  oprot->writeMessageBegin("sai_thrift_remove_bridge_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thirft_get_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thirft_get_bridge_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thirft_get_bridge_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thirft_get_bridge_attribute");
  }

  switch_sai_rpc_sai_thirft_get_bridge_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thirft_get_bridge_attribute", bytes);
  }

  switch_sai_rpc_sai_thirft_get_bridge_attribute_result result;
  try {
    iface_->sai_thirft_get_bridge_attribute(result.success, args.bridge_id, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thirft_get_bridge_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thirft_get_bridge_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thirft_get_bridge_attribute");
  }

  oprot->writeMessageBegin("sai_thirft_get_bridge_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thirft_get_bridge_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_fdb_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");
  }

  switch_sai_rpc_sai_thrift_create_fdb_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_fdb_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_fdb_entry(args.thrift_fdb_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_fdb_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_fdb_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_delete_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_delete_fdb_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");
  }

  switch_sai_rpc_sai_thrift_delete_fdb_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_delete_fdb_entry_result result;
  try {
    result.success = iface_->sai_thrift_delete_fdb_entry(args.thrift_fdb_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_delete_fdb_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");
  }

  oprot->writeMessageBegin("sai_thrift_delete_fdb_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_flush_fdb_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_flush_fdb_entries", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");
  }

  switch_sai_rpc_sai_thrift_flush_fdb_entries_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries", bytes);
  }

  switch_sai_rpc_sai_thrift_flush_fdb_entries_result result;
  try {
    result.success = iface_->sai_thrift_flush_fdb_entries(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_flush_fdb_entries", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");
  }

  oprot->writeMessageBegin("sai_thrift_flush_fdb_entries", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_vlan", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_vlan");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan");
  }

  switch_sai_rpc_sai_thrift_create_vlan_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan", bytes);
  }

  switch_sai_rpc_sai_thrift_create_vlan_result result;
  try {
    result.success = iface_->sai_thrift_create_vlan(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_vlan");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_vlan", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan");
  }

  oprot->writeMessageBegin("sai_thrift_create_vlan", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_delete_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_delete_vlan", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_delete_vlan");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_delete_vlan");
  }

  switch_sai_rpc_sai_thrift_delete_vlan_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_delete_vlan", bytes);
  }

  switch_sai_rpc_sai_thrift_delete_vlan_result result;
  try {
    result.success = iface_->sai_thrift_delete_vlan(args.vlan_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_delete_vlan");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_delete_vlan", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_delete_vlan");
  }

  oprot->writeMessageBegin("sai_thrift_delete_vlan", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_delete_vlan", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_vlan_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");
  }

  switch_sai_rpc_sai_thrift_get_vlan_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_vlan_stats_result result;
  try {
    iface_->sai_thrift_get_vlan_stats(result.success, args.vlan_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_vlan_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_vlan_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_vlan_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");
  }

  switch_sai_rpc_sai_thrift_create_vlan_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_vlan_member_result result;
  try {
    result.success = iface_->sai_thrift_create_vlan_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_vlan_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_vlan_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_vlan_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");
  }

  switch_sai_rpc_sai_thrift_remove_vlan_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_vlan_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_vlan_member(args.vlan_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_vlan_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_vlan_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_vlan_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");
  }

  switch_sai_rpc_sai_thrift_get_vlan_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_vlan_attribute_result result;
  try {
    iface_->sai_thrift_get_vlan_attribute(result.success, args.vlan_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_vlan_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_vlan_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_virtual_router", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");
  }

  switch_sai_rpc_sai_thrift_create_virtual_router_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router", bytes);
  }

  switch_sai_rpc_sai_thrift_create_virtual_router_result result;
  try {
    result.success = iface_->sai_thrift_create_virtual_router(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_virtual_router", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");
  }

  oprot->writeMessageBegin("sai_thrift_create_virtual_router", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_virtual_router", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");
  }

  switch_sai_rpc_sai_thrift_remove_virtual_router_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_virtual_router_result result;
  try {
    result.success = iface_->sai_thrift_remove_virtual_router(args.vr_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_virtual_router", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");
  }

  oprot->writeMessageBegin("sai_thrift_remove_virtual_router", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_route", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_route");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_route");
  }

  switch_sai_rpc_sai_thrift_create_route_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_route", bytes);
  }

  switch_sai_rpc_sai_thrift_create_route_result result;
  try {
    result.success = iface_->sai_thrift_create_route(args.thrift_unicast_route_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_route");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_route", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_route");
  }

  oprot->writeMessageBegin("sai_thrift_create_route", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_route", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_route", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_route");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_route");
  }

  switch_sai_rpc_sai_thrift_remove_route_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_route", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_route_result result;
  try {
    result.success = iface_->sai_thrift_remove_route(args.thrift_unicast_route_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_route");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_route", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_route");
  }

  oprot->writeMessageBegin("sai_thrift_remove_route", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_route", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_router_interface", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_router_interface");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_router_interface");
  }

  switch_sai_rpc_sai_thrift_create_router_interface_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_router_interface", bytes);
  }

  switch_sai_rpc_sai_thrift_create_router_interface_result result;
  try {
    result.success = iface_->sai_thrift_create_router_interface(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_router_interface");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_router_interface", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_router_interface");
  }

  oprot->writeMessageBegin("sai_thrift_create_router_interface", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_router_interface", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_router_interface", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");
  }

  switch_sai_rpc_sai_thrift_remove_router_interface_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_router_interface_result result;
  try {
    result.success = iface_->sai_thrift_remove_router_interface(args.rif_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_router_interface", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");
  }

  oprot->writeMessageBegin("sai_thrift_remove_router_interface", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_next_hop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_next_hop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop");
  }

  switch_sai_rpc_sai_thrift_create_next_hop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop", bytes);
  }

  switch_sai_rpc_sai_thrift_create_next_hop_result result;
  try {
    result.success = iface_->sai_thrift_create_next_hop(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_next_hop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_next_hop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop");
  }

  oprot->writeMessageBegin("sai_thrift_create_next_hop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_next_hop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_result result;
  try {
    result.success = iface_->sai_thrift_remove_next_hop(args.next_hop_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_next_hop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");
  }

  oprot->writeMessageBegin("sai_thrift_remove_next_hop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_next_hop_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");
  }

  switch_sai_rpc_sai_thrift_create_next_hop_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_next_hop_group_result result;
  try {
    result.success = iface_->sai_thrift_create_next_hop_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_next_hop_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_next_hop_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_next_hop_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_next_hop_group(args.next_hop_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_next_hop_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_next_hop_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_add_next_hop_to_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_add_next_hop_to_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_add_next_hop_to_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_add_next_hop_to_group");
  }

  switch_sai_rpc_sai_thrift_add_next_hop_to_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_add_next_hop_to_group", bytes);
  }

  switch_sai_rpc_sai_thrift_add_next_hop_to_group_result result;
  try {
    result.success = iface_->sai_thrift_add_next_hop_to_group(args.next_hop_group_id, args.thrift_nexthops);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_add_next_hop_to_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_add_next_hop_to_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_add_next_hop_to_group");
  }

  oprot->writeMessageBegin("sai_thrift_add_next_hop_to_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_add_next_hop_to_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_from_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_next_hop_from_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_from_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_from_group");
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_from_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_from_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_from_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_next_hop_from_group(args.next_hop_group_id, args.thrift_nexthops);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_from_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_next_hop_from_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_from_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_next_hop_from_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_from_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_lag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_lag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_lag");
  }

  switch_sai_rpc_sai_thrift_create_lag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_lag", bytes);
  }

  switch_sai_rpc_sai_thrift_create_lag_result result;
  try {
    result.success = iface_->sai_thrift_create_lag(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_lag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_lag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag");
  }

  oprot->writeMessageBegin("sai_thrift_create_lag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_lag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_lag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag");
  }

  switch_sai_rpc_sai_thrift_remove_lag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_lag_result result;
  try {
    result.success = iface_->sai_thrift_remove_lag(args.lag_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_lag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_lag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag");
  }

  oprot->writeMessageBegin("sai_thrift_remove_lag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_lag_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_lag_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_lag_member");
  }

  switch_sai_rpc_sai_thrift_create_lag_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_lag_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_lag_member_result result;
  try {
    result.success = iface_->sai_thrift_create_lag_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_lag_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_lag_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_lag_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_lag_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");
  }

  switch_sai_rpc_sai_thrift_remove_lag_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_lag_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_lag_member(args.lag_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_lag_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_lag_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_stp_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");
  }

  switch_sai_rpc_sai_thrift_create_stp_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_stp_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_stp_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_stp_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_stp_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_stp_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");
  }

  switch_sai_rpc_sai_thrift_remove_stp_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_stp_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_stp_entry(args.stp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_stp_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_stp_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_stp_port_state", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");
  }

  switch_sai_rpc_sai_thrift_set_stp_port_state_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state", bytes);
  }

  switch_sai_rpc_sai_thrift_set_stp_port_state_result result;
  try {
    result.success = iface_->sai_thrift_set_stp_port_state(args.stp_id, args.port_id, args.stp_port_state);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_stp_port_state", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");
  }

  oprot->writeMessageBegin("sai_thrift_set_stp_port_state", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_stp_port_state", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");
  }

  switch_sai_rpc_sai_thrift_get_stp_port_state_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state", bytes);
  }

  switch_sai_rpc_sai_thrift_get_stp_port_state_result result;
  try {
    result.success = iface_->sai_thrift_get_stp_port_state(args.stp_id, args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_stp_port_state", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");
  }

  oprot->writeMessageBegin("sai_thrift_get_stp_port_state", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_neighbor_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");
  }

  switch_sai_rpc_sai_thrift_create_neighbor_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_neighbor_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_neighbor_entry(args.thrift_neighbor_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_neighbor_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_neighbor_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_neighbor_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");
  }

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_neighbor_entry(args.thrift_neighbor_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_neighbor_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_neighbor_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_switch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_switch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_switch");
  }

  switch_sai_rpc_sai_thrift_create_switch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_switch", bytes);
  }

  switch_sai_rpc_sai_thrift_create_switch_result result;
  try {
    result.success = iface_->sai_thrift_create_switch(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_switch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_switch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_switch");
  }

  oprot->writeMessageBegin("sai_thrift_create_switch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_switch", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_switch_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");
  }

  switch_sai_rpc_sai_thrift_get_switch_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_switch_attribute_result result;
  try {
    iface_->sai_thrift_get_switch_attribute(result.success, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_switch_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_switch_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_list_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_list_by_front_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");
  }

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result result;
  try {
    iface_->sai_thrift_get_port_list_by_front_port(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_list_by_front_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_list_by_front_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_cpu_port_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_cpu_port_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");
  }

  switch_sai_rpc_sai_thrift_get_cpu_port_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_cpu_port_id_result result;
  try {
    result.success = iface_->sai_thrift_get_cpu_port_id();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_cpu_port_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_cpu_port_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_default_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_default_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");
  }

  switch_sai_rpc_sai_thrift_get_default_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_get_default_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_get_default_trap_group();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_default_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_get_default_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_default_router_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_default_router_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");
  }

  switch_sai_rpc_sai_thrift_get_default_router_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_default_router_id_result result;
  try {
    result.success = iface_->sai_thrift_get_default_router_id();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_default_router_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_default_router_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_id_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_id_by_front_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");
  }

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result result;
  try {
    result.success = iface_->sai_thrift_get_port_id_by_front_port(args.port_name);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_id_by_front_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_id_by_front_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_switch_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");
  }

  switch_sai_rpc_sai_thrift_set_switch_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_switch_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_switch_attribute(args.attribute);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_switch_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_switch_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif");
  }

  switch_sai_rpc_sai_thrift_create_hostif_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif(args.hif_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif_trap_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif_trap_group(args.trap_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif_trap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif_trap(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif_trap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif_trap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif_trap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif_trap(args.trap_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif_trap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif_trap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hostif_trap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap");
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_result result;
  try {
    result.success = iface_->sai_thrift_set_hostif_trap(args.trap_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hostif_trap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap");
  }

  oprot->writeMessageBegin("sai_thrift_set_hostif_trap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hostif_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group");
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_set_hostif_trap_group(args.trap_group_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hostif_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_set_hostif_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_table", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_table");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table");
  }

  switch_sai_rpc_sai_thrift_create_acl_table_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_table_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_table(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_table");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_table", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_delete_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_delete_acl_table", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_delete_acl_table");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_delete_acl_table");
  }

  switch_sai_rpc_sai_thrift_delete_acl_table_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_delete_acl_table", bytes);
  }

  switch_sai_rpc_sai_thrift_delete_acl_table_result result;
  try {
    result.success = iface_->sai_thrift_delete_acl_table(args.acl_table_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_delete_acl_table");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_delete_acl_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_delete_acl_table");
  }

  oprot->writeMessageBegin("sai_thrift_delete_acl_table", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_delete_acl_table", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");
  }

  switch_sai_rpc_sai_thrift_create_acl_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_delete_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_delete_acl_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_delete_acl_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_delete_acl_entry");
  }

  switch_sai_rpc_sai_thrift_delete_acl_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_delete_acl_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_delete_acl_entry_result result;
  try {
    result.success = iface_->sai_thrift_delete_acl_entry(args.acl_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_delete_acl_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_delete_acl_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_delete_acl_entry");
  }

  oprot->writeMessageBegin("sai_thrift_delete_acl_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_delete_acl_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_counter", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");
  }

  switch_sai_rpc_sai_thrift_create_acl_counter_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_counter_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_counter(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_counter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_counter", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_delete_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_delete_acl_counter", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_delete_acl_counter");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_delete_acl_counter");
  }

  switch_sai_rpc_sai_thrift_delete_acl_counter_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_delete_acl_counter", bytes);
  }

  switch_sai_rpc_sai_thrift_delete_acl_counter_result result;
  try {
    result.success = iface_->sai_thrift_delete_acl_counter(args.acl_counter_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_delete_acl_counter");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_delete_acl_counter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_delete_acl_counter");
  }

  oprot->writeMessageBegin("sai_thrift_delete_acl_counter", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_delete_acl_counter", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_acl_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_acl_counter_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");
  }

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result result;
  try {
    iface_->sai_thrift_get_acl_counter_attribute(result.success, args.acl_counter_id, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_acl_counter_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_acl_counter_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_mirror_session", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");
  }

  switch_sai_rpc_sai_thrift_create_mirror_session_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session", bytes);
  }

  switch_sai_rpc_sai_thrift_create_mirror_session_result result;
  try {
    result.success = iface_->sai_thrift_create_mirror_session(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_mirror_session", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");
  }

  oprot->writeMessageBegin("sai_thrift_create_mirror_session", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_mirror_session", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");
  }

  switch_sai_rpc_sai_thrift_remove_mirror_session_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_mirror_session_result result;
  try {
    result.success = iface_->sai_thrift_remove_mirror_session(args.session_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_mirror_session", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");
  }

  oprot->writeMessageBegin("sai_thrift_remove_mirror_session", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_policer", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_policer");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_policer");
  }

  switch_sai_rpc_sai_thrift_create_policer_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_policer", bytes);
  }

  switch_sai_rpc_sai_thrift_create_policer_result result;
  try {
    result.success = iface_->sai_thrift_create_policer(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_policer");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_policer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_policer");
  }

  oprot->writeMessageBegin("sai_thrift_create_policer", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_policer", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_policer", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_policer");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_policer");
  }

  switch_sai_rpc_sai_thrift_remove_policer_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_policer", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_policer_result result;
  try {
    result.success = iface_->sai_thrift_remove_policer(args.policer_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_policer");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_policer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_policer");
  }

  oprot->writeMessageBegin("sai_thrift_remove_policer", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_policer", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_policer_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");
  }

  switch_sai_rpc_sai_thrift_get_policer_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_policer_stats_result result;
  try {
    iface_->sai_thrift_get_policer_stats(result.success, args.policer_id, args.counter_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_policer_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_policer_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_scheduler_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");
  }

  switch_sai_rpc_sai_thrift_create_scheduler_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_scheduler_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_scheduler_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_scheduler_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_scheduler_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_scheduler_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");
  }

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result result;
  try {
    result.success = iface_->sai_thrift_remove_scheduler_profile(args.scheduler_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_scheduler_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");
  }

  oprot->writeMessageBegin("sai_thrift_remove_scheduler_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_queue_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");
  }

  switch_sai_rpc_sai_thrift_get_queue_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_queue_stats_result result;
  try {
    iface_->sai_thrift_get_queue_stats(result.success, args.queue_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_queue_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_queue_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_queue_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");
  }

  switch_sai_rpc_sai_thrift_clear_queue_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_queue_stats_result result;
  try {
    result.success = iface_->sai_thrift_clear_queue_stats(args.queue_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_queue_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");
  }

  oprot->writeMessageBegin("sai_thrift_clear_queue_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_queue_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");
  }

  switch_sai_rpc_sai_thrift_set_queue_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_queue_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_queue_attribute(args.queue_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_queue_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_queue_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_buffer_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");
  }

  switch_sai_rpc_sai_thrift_create_buffer_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_buffer_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_buffer_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_buffer_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_buffer_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_pool_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_pool_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");
  }

  switch_sai_rpc_sai_thrift_create_pool_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_pool_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_pool_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_pool_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_pool_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_priority_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");
  }

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_priority_group_attribute(args.pg_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_priority_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_priority_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_pg_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_pg_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");
  }

  switch_sai_rpc_sai_thrift_get_pg_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_pg_stats_result result;
  try {
    iface_->sai_thrift_get_pg_stats(result.success, args.pg_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_pg_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_pg_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_wred_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");
  }

  switch_sai_rpc_sai_thrift_create_wred_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_wred_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_wred_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_wred_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_wred_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_wred_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");
  }

  switch_sai_rpc_sai_thrift_remove_wred_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_wred_profile_result result;
  try {
    result.success = iface_->sai_thrift_remove_wred_profile(args.wred_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_wred_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");
  }

  oprot->writeMessageBegin("sai_thrift_remove_wred_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_qos_map", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_qos_map");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_qos_map");
  }

  switch_sai_rpc_sai_thrift_create_qos_map_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_qos_map", bytes);
  }

  switch_sai_rpc_sai_thrift_create_qos_map_result result;
  try {
    result.success = iface_->sai_thrift_create_qos_map(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_qos_map");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_qos_map", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_qos_map");
  }

  oprot->writeMessageBegin("sai_thrift_create_qos_map", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_qos_map", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_qos_map", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");
  }

  switch_sai_rpc_sai_thrift_remove_qos_map_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_qos_map_result result;
  try {
    result.success = iface_->sai_thrift_remove_qos_map(args.qos_map_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_qos_map", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");
  }

  oprot->writeMessageBegin("sai_thrift_remove_qos_map", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > switch_sai_rpcProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< switch_sai_rpcIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< switch_sai_rpcIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new switch_sai_rpcProcessor(handler));
  return processor;
}
} // namespace

