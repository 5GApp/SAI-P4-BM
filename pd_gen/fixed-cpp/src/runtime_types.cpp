/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "runtime_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace bm_runtime {

int _kTableOperationErrorCodeValues[] = {
  TableOperationErrorCode::TABLE_FULL,
  TableOperationErrorCode::INVALID_HANDLE,
  TableOperationErrorCode::ERROR
};
const char* _kTableOperationErrorCodeNames[] = {
  "TABLE_FULL",
  "INVALID_HANDLE",
  "ERROR"
};
const std::map<int, const char*> _TableOperationErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTableOperationErrorCodeValues, _kTableOperationErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMcOperationErrorCodeValues[] = {
  McOperationErrorCode::TABLE_FULL,
  McOperationErrorCode::INVALID_HANDLE,
  McOperationErrorCode::INVALID_MGID,
  McOperationErrorCode::INVALID_L1_HANDLE,
  McOperationErrorCode::INVALID_L2_HANLDE,
  McOperationErrorCode::ERROR
};
const char* _kMcOperationErrorCodeNames[] = {
  "TABLE_FULL",
  "INVALID_HANDLE",
  "INVALID_MGID",
  "INVALID_L1_HANDLE",
  "INVALID_L2_HANLDE",
  "ERROR"
};
const std::map<int, const char*> _McOperationErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kMcOperationErrorCodeValues, _kMcOperationErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


InvalidTableOperation::~InvalidTableOperation() throw() {
}


void InvalidTableOperation::__set_what(const TableOperationErrorCode::type val) {
  this->what = val;
}

const char* InvalidTableOperation::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t InvalidTableOperation::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t InvalidTableOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->what = (TableOperationErrorCode::type)ecast0;
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidTableOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidTableOperation");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidTableOperation &a, InvalidTableOperation &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.__isset, b.__isset);
}

InvalidTableOperation::InvalidTableOperation(const InvalidTableOperation& other1) : TException() {
  what = other1.what;
  __isset = other1.__isset;
}
InvalidTableOperation& InvalidTableOperation::operator=(const InvalidTableOperation& other2) {
  what = other2.what;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidTableOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidTableOperation(";
  out << "what=" << to_string(obj.what);
  out << ")";
  return out;
}


InvalidMcOperation::~InvalidMcOperation() throw() {
}


void InvalidMcOperation::__set_what(const McOperationErrorCode::type val) {
  this->what = val;
}

const char* InvalidMcOperation::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t InvalidMcOperation::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t InvalidMcOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->what = (McOperationErrorCode::type)ecast3;
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidMcOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidMcOperation");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidMcOperation &a, InvalidMcOperation &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.__isset, b.__isset);
}

InvalidMcOperation::InvalidMcOperation(const InvalidMcOperation& other4) : TException() {
  what = other4.what;
  __isset = other4.__isset;
}
InvalidMcOperation& InvalidMcOperation::operator=(const InvalidMcOperation& other5) {
  what = other5.what;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidMcOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidMcOperation(";
  out << "what=" << to_string(obj.what);
  out << ")";
  return out;
}

} // namespace
