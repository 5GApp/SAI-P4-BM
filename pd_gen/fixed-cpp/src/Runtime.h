/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Runtime_H
#define Runtime_H

#include <thrift/TDispatchProcessor.h>
#include "runtime_types.h"

namespace bm_runtime {

class RuntimeIf {
 public:
  virtual ~RuntimeIf() {}
  virtual BmEntryHandle bm_table_add_exact_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmActionData& action_data) = 0;
  virtual BmEntryHandle bm_table_add_lpm_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const int32_t prefix_length, const BmActionData& action_data) = 0;
  virtual BmEntryHandle bm_table_add_ternary_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmMatchKey& match_mask, const int32_t priority, const BmActionData& action_data) = 0;
  virtual void bm_set_default_action(const std::string& table_name, const std::string& action_name, const BmActionData& action_data) = 0;
  virtual void bm_table_delete_entry(const std::string& table_name, const BmEntryHandle entry_handle) = 0;
  virtual void bm_learning_ack(const BmLearningListId list_id, const BmLearningBufferId buffer_id, const std::vector<BmLearningSampleId> & sample_ids) = 0;
  virtual void bm_learning_ack_buffer(const BmLearningListId list_id, const BmLearningBufferId buffer_id) = 0;
  virtual BmMcMgrpHandle bm_mc_mgrp_create(const BmMcMgrp mgrp) = 0;
  virtual void bm_mc_mgrp_destroy(const BmMcMgrpHandle mgrp_handle) = 0;
  virtual BmMcL1Handle bm_mc_l1_node_create(const BmMcRid rid) = 0;
  virtual void bm_mc_l1_node_associate(const BmMcMgrpHandle mgrp_handle, const BmMcL1Handle l1_handle) = 0;
  virtual void bm_mc_l1_node_destroy(const BmMcL1Handle l1_handle) = 0;
  virtual BmMcL2Handle bm_mc_l2_node_create(const BmMcL1Handle l1_handle, const BmMcPortMap& port_map) = 0;
  virtual void bm_mc_l2_node_update(const BmMcL2Handle l2_handle, const BmMcPortMap& port_map) = 0;
  virtual void bm_mc_l2_node_destroy(const BmMcL2Handle l2_handle) = 0;
};

class RuntimeIfFactory {
 public:
  typedef RuntimeIf Handler;

  virtual ~RuntimeIfFactory() {}

  virtual RuntimeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RuntimeIf* /* handler */) = 0;
};

class RuntimeIfSingletonFactory : virtual public RuntimeIfFactory {
 public:
  RuntimeIfSingletonFactory(const boost::shared_ptr<RuntimeIf>& iface) : iface_(iface) {}
  virtual ~RuntimeIfSingletonFactory() {}

  virtual RuntimeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RuntimeIf* /* handler */) {}

 protected:
  boost::shared_ptr<RuntimeIf> iface_;
};

class RuntimeNull : virtual public RuntimeIf {
 public:
  virtual ~RuntimeNull() {}
  BmEntryHandle bm_table_add_exact_match_entry(const std::string& /* table_name */, const std::string& /* action_name */, const BmMatchKey& /* match_key */, const BmActionData& /* action_data */) {
    BmEntryHandle _return = 0;
    return _return;
  }
  BmEntryHandle bm_table_add_lpm_entry(const std::string& /* table_name */, const std::string& /* action_name */, const BmMatchKey& /* match_key */, const int32_t /* prefix_length */, const BmActionData& /* action_data */) {
    BmEntryHandle _return = 0;
    return _return;
  }
  BmEntryHandle bm_table_add_ternary_match_entry(const std::string& /* table_name */, const std::string& /* action_name */, const BmMatchKey& /* match_key */, const BmMatchKey& /* match_mask */, const int32_t /* priority */, const BmActionData& /* action_data */) {
    BmEntryHandle _return = 0;
    return _return;
  }
  void bm_set_default_action(const std::string& /* table_name */, const std::string& /* action_name */, const BmActionData& /* action_data */) {
    return;
  }
  void bm_table_delete_entry(const std::string& /* table_name */, const BmEntryHandle /* entry_handle */) {
    return;
  }
  void bm_learning_ack(const BmLearningListId /* list_id */, const BmLearningBufferId /* buffer_id */, const std::vector<BmLearningSampleId> & /* sample_ids */) {
    return;
  }
  void bm_learning_ack_buffer(const BmLearningListId /* list_id */, const BmLearningBufferId /* buffer_id */) {
    return;
  }
  BmMcMgrpHandle bm_mc_mgrp_create(const BmMcMgrp /* mgrp */) {
    BmMcMgrpHandle _return = 0;
    return _return;
  }
  void bm_mc_mgrp_destroy(const BmMcMgrpHandle /* mgrp_handle */) {
    return;
  }
  BmMcL1Handle bm_mc_l1_node_create(const BmMcRid /* rid */) {
    BmMcL1Handle _return = 0;
    return _return;
  }
  void bm_mc_l1_node_associate(const BmMcMgrpHandle /* mgrp_handle */, const BmMcL1Handle /* l1_handle */) {
    return;
  }
  void bm_mc_l1_node_destroy(const BmMcL1Handle /* l1_handle */) {
    return;
  }
  BmMcL2Handle bm_mc_l2_node_create(const BmMcL1Handle /* l1_handle */, const BmMcPortMap& /* port_map */) {
    BmMcL2Handle _return = 0;
    return _return;
  }
  void bm_mc_l2_node_update(const BmMcL2Handle /* l2_handle */, const BmMcPortMap& /* port_map */) {
    return;
  }
  void bm_mc_l2_node_destroy(const BmMcL2Handle /* l2_handle */) {
    return;
  }
};

typedef struct _Runtime_bm_table_add_exact_match_entry_args__isset {
  _Runtime_bm_table_add_exact_match_entry_args__isset() : table_name(false), action_name(false), match_key(false), action_data(false) {}
  bool table_name :1;
  bool action_name :1;
  bool match_key :1;
  bool action_data :1;
} _Runtime_bm_table_add_exact_match_entry_args__isset;

class Runtime_bm_table_add_exact_match_entry_args {
 public:

  static const char* ascii_fingerprint; // = "5F51D90BC323BCE4B704B7D98EDA0BD4";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x51,0xD9,0x0B,0xC3,0x23,0xBC,0xE4,0xB7,0x04,0xB7,0xD9,0x8E,0xDA,0x0B,0xD4};

  Runtime_bm_table_add_exact_match_entry_args(const Runtime_bm_table_add_exact_match_entry_args&);
  Runtime_bm_table_add_exact_match_entry_args& operator=(const Runtime_bm_table_add_exact_match_entry_args&);
  Runtime_bm_table_add_exact_match_entry_args() : table_name(), action_name() {
  }

  virtual ~Runtime_bm_table_add_exact_match_entry_args() throw();
  std::string table_name;
  std::string action_name;
  BmMatchKey match_key;
  BmActionData action_data;

  _Runtime_bm_table_add_exact_match_entry_args__isset __isset;

  void __set_table_name(const std::string& val);

  void __set_action_name(const std::string& val);

  void __set_match_key(const BmMatchKey& val);

  void __set_action_data(const BmActionData& val);

  bool operator == (const Runtime_bm_table_add_exact_match_entry_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(action_name == rhs.action_name))
      return false;
    if (!(match_key == rhs.match_key))
      return false;
    if (!(action_data == rhs.action_data))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_add_exact_match_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_add_exact_match_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_exact_match_entry_args& obj);
};


class Runtime_bm_table_add_exact_match_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "5F51D90BC323BCE4B704B7D98EDA0BD4";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x51,0xD9,0x0B,0xC3,0x23,0xBC,0xE4,0xB7,0x04,0xB7,0xD9,0x8E,0xDA,0x0B,0xD4};


  virtual ~Runtime_bm_table_add_exact_match_entry_pargs() throw();
  const std::string* table_name;
  const std::string* action_name;
  const BmMatchKey* match_key;
  const BmActionData* action_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_exact_match_entry_pargs& obj);
};

typedef struct _Runtime_bm_table_add_exact_match_entry_result__isset {
  _Runtime_bm_table_add_exact_match_entry_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_table_add_exact_match_entry_result__isset;

class Runtime_bm_table_add_exact_match_entry_result {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};

  Runtime_bm_table_add_exact_match_entry_result(const Runtime_bm_table_add_exact_match_entry_result&);
  Runtime_bm_table_add_exact_match_entry_result& operator=(const Runtime_bm_table_add_exact_match_entry_result&);
  Runtime_bm_table_add_exact_match_entry_result() : success(0) {
  }

  virtual ~Runtime_bm_table_add_exact_match_entry_result() throw();
  BmEntryHandle success;
  InvalidTableOperation ouch;

  _Runtime_bm_table_add_exact_match_entry_result__isset __isset;

  void __set_success(const BmEntryHandle val);

  void __set_ouch(const InvalidTableOperation& val);

  bool operator == (const Runtime_bm_table_add_exact_match_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_add_exact_match_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_add_exact_match_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_exact_match_entry_result& obj);
};

typedef struct _Runtime_bm_table_add_exact_match_entry_presult__isset {
  _Runtime_bm_table_add_exact_match_entry_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_table_add_exact_match_entry_presult__isset;

class Runtime_bm_table_add_exact_match_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};


  virtual ~Runtime_bm_table_add_exact_match_entry_presult() throw();
  BmEntryHandle* success;
  InvalidTableOperation ouch;

  _Runtime_bm_table_add_exact_match_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_exact_match_entry_presult& obj);
};

typedef struct _Runtime_bm_table_add_lpm_entry_args__isset {
  _Runtime_bm_table_add_lpm_entry_args__isset() : table_name(false), action_name(false), match_key(false), prefix_length(false), action_data(false) {}
  bool table_name :1;
  bool action_name :1;
  bool match_key :1;
  bool prefix_length :1;
  bool action_data :1;
} _Runtime_bm_table_add_lpm_entry_args__isset;

class Runtime_bm_table_add_lpm_entry_args {
 public:

  static const char* ascii_fingerprint; // = "1EE89E47106745E516D68099446E6186";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xE8,0x9E,0x47,0x10,0x67,0x45,0xE5,0x16,0xD6,0x80,0x99,0x44,0x6E,0x61,0x86};

  Runtime_bm_table_add_lpm_entry_args(const Runtime_bm_table_add_lpm_entry_args&);
  Runtime_bm_table_add_lpm_entry_args& operator=(const Runtime_bm_table_add_lpm_entry_args&);
  Runtime_bm_table_add_lpm_entry_args() : table_name(), action_name(), prefix_length(0) {
  }

  virtual ~Runtime_bm_table_add_lpm_entry_args() throw();
  std::string table_name;
  std::string action_name;
  BmMatchKey match_key;
  int32_t prefix_length;
  BmActionData action_data;

  _Runtime_bm_table_add_lpm_entry_args__isset __isset;

  void __set_table_name(const std::string& val);

  void __set_action_name(const std::string& val);

  void __set_match_key(const BmMatchKey& val);

  void __set_prefix_length(const int32_t val);

  void __set_action_data(const BmActionData& val);

  bool operator == (const Runtime_bm_table_add_lpm_entry_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(action_name == rhs.action_name))
      return false;
    if (!(match_key == rhs.match_key))
      return false;
    if (!(prefix_length == rhs.prefix_length))
      return false;
    if (!(action_data == rhs.action_data))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_add_lpm_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_add_lpm_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_lpm_entry_args& obj);
};


class Runtime_bm_table_add_lpm_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "1EE89E47106745E516D68099446E6186";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xE8,0x9E,0x47,0x10,0x67,0x45,0xE5,0x16,0xD6,0x80,0x99,0x44,0x6E,0x61,0x86};


  virtual ~Runtime_bm_table_add_lpm_entry_pargs() throw();
  const std::string* table_name;
  const std::string* action_name;
  const BmMatchKey* match_key;
  const int32_t* prefix_length;
  const BmActionData* action_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_lpm_entry_pargs& obj);
};

typedef struct _Runtime_bm_table_add_lpm_entry_result__isset {
  _Runtime_bm_table_add_lpm_entry_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_table_add_lpm_entry_result__isset;

class Runtime_bm_table_add_lpm_entry_result {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};

  Runtime_bm_table_add_lpm_entry_result(const Runtime_bm_table_add_lpm_entry_result&);
  Runtime_bm_table_add_lpm_entry_result& operator=(const Runtime_bm_table_add_lpm_entry_result&);
  Runtime_bm_table_add_lpm_entry_result() : success(0) {
  }

  virtual ~Runtime_bm_table_add_lpm_entry_result() throw();
  BmEntryHandle success;
  InvalidTableOperation ouch;

  _Runtime_bm_table_add_lpm_entry_result__isset __isset;

  void __set_success(const BmEntryHandle val);

  void __set_ouch(const InvalidTableOperation& val);

  bool operator == (const Runtime_bm_table_add_lpm_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_add_lpm_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_add_lpm_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_lpm_entry_result& obj);
};

typedef struct _Runtime_bm_table_add_lpm_entry_presult__isset {
  _Runtime_bm_table_add_lpm_entry_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_table_add_lpm_entry_presult__isset;

class Runtime_bm_table_add_lpm_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};


  virtual ~Runtime_bm_table_add_lpm_entry_presult() throw();
  BmEntryHandle* success;
  InvalidTableOperation ouch;

  _Runtime_bm_table_add_lpm_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_lpm_entry_presult& obj);
};

typedef struct _Runtime_bm_table_add_ternary_match_entry_args__isset {
  _Runtime_bm_table_add_ternary_match_entry_args__isset() : table_name(false), action_name(false), match_key(false), match_mask(false), priority(false), action_data(false) {}
  bool table_name :1;
  bool action_name :1;
  bool match_key :1;
  bool match_mask :1;
  bool priority :1;
  bool action_data :1;
} _Runtime_bm_table_add_ternary_match_entry_args__isset;

class Runtime_bm_table_add_ternary_match_entry_args {
 public:

  static const char* ascii_fingerprint; // = "CF2E269ADC5BF829176B53715BD23AC0";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x2E,0x26,0x9A,0xDC,0x5B,0xF8,0x29,0x17,0x6B,0x53,0x71,0x5B,0xD2,0x3A,0xC0};

  Runtime_bm_table_add_ternary_match_entry_args(const Runtime_bm_table_add_ternary_match_entry_args&);
  Runtime_bm_table_add_ternary_match_entry_args& operator=(const Runtime_bm_table_add_ternary_match_entry_args&);
  Runtime_bm_table_add_ternary_match_entry_args() : table_name(), action_name(), priority(0) {
  }

  virtual ~Runtime_bm_table_add_ternary_match_entry_args() throw();
  std::string table_name;
  std::string action_name;
  BmMatchKey match_key;
  BmMatchKey match_mask;
  int32_t priority;
  BmActionData action_data;

  _Runtime_bm_table_add_ternary_match_entry_args__isset __isset;

  void __set_table_name(const std::string& val);

  void __set_action_name(const std::string& val);

  void __set_match_key(const BmMatchKey& val);

  void __set_match_mask(const BmMatchKey& val);

  void __set_priority(const int32_t val);

  void __set_action_data(const BmActionData& val);

  bool operator == (const Runtime_bm_table_add_ternary_match_entry_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(action_name == rhs.action_name))
      return false;
    if (!(match_key == rhs.match_key))
      return false;
    if (!(match_mask == rhs.match_mask))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(action_data == rhs.action_data))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_add_ternary_match_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_add_ternary_match_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_ternary_match_entry_args& obj);
};


class Runtime_bm_table_add_ternary_match_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "CF2E269ADC5BF829176B53715BD23AC0";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x2E,0x26,0x9A,0xDC,0x5B,0xF8,0x29,0x17,0x6B,0x53,0x71,0x5B,0xD2,0x3A,0xC0};


  virtual ~Runtime_bm_table_add_ternary_match_entry_pargs() throw();
  const std::string* table_name;
  const std::string* action_name;
  const BmMatchKey* match_key;
  const BmMatchKey* match_mask;
  const int32_t* priority;
  const BmActionData* action_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_ternary_match_entry_pargs& obj);
};

typedef struct _Runtime_bm_table_add_ternary_match_entry_result__isset {
  _Runtime_bm_table_add_ternary_match_entry_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_table_add_ternary_match_entry_result__isset;

class Runtime_bm_table_add_ternary_match_entry_result {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};

  Runtime_bm_table_add_ternary_match_entry_result(const Runtime_bm_table_add_ternary_match_entry_result&);
  Runtime_bm_table_add_ternary_match_entry_result& operator=(const Runtime_bm_table_add_ternary_match_entry_result&);
  Runtime_bm_table_add_ternary_match_entry_result() : success(0) {
  }

  virtual ~Runtime_bm_table_add_ternary_match_entry_result() throw();
  BmEntryHandle success;
  InvalidTableOperation ouch;

  _Runtime_bm_table_add_ternary_match_entry_result__isset __isset;

  void __set_success(const BmEntryHandle val);

  void __set_ouch(const InvalidTableOperation& val);

  bool operator == (const Runtime_bm_table_add_ternary_match_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_add_ternary_match_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_add_ternary_match_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_ternary_match_entry_result& obj);
};

typedef struct _Runtime_bm_table_add_ternary_match_entry_presult__isset {
  _Runtime_bm_table_add_ternary_match_entry_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_table_add_ternary_match_entry_presult__isset;

class Runtime_bm_table_add_ternary_match_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};


  virtual ~Runtime_bm_table_add_ternary_match_entry_presult() throw();
  BmEntryHandle* success;
  InvalidTableOperation ouch;

  _Runtime_bm_table_add_ternary_match_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_add_ternary_match_entry_presult& obj);
};

typedef struct _Runtime_bm_set_default_action_args__isset {
  _Runtime_bm_set_default_action_args__isset() : table_name(false), action_name(false), action_data(false) {}
  bool table_name :1;
  bool action_name :1;
  bool action_data :1;
} _Runtime_bm_set_default_action_args__isset;

class Runtime_bm_set_default_action_args {
 public:

  static const char* ascii_fingerprint; // = "8E2AD6401E83558ECFD6A13D74DD0A3F";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

  Runtime_bm_set_default_action_args(const Runtime_bm_set_default_action_args&);
  Runtime_bm_set_default_action_args& operator=(const Runtime_bm_set_default_action_args&);
  Runtime_bm_set_default_action_args() : table_name(), action_name() {
  }

  virtual ~Runtime_bm_set_default_action_args() throw();
  std::string table_name;
  std::string action_name;
  BmActionData action_data;

  _Runtime_bm_set_default_action_args__isset __isset;

  void __set_table_name(const std::string& val);

  void __set_action_name(const std::string& val);

  void __set_action_data(const BmActionData& val);

  bool operator == (const Runtime_bm_set_default_action_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(action_name == rhs.action_name))
      return false;
    if (!(action_data == rhs.action_data))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_set_default_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_set_default_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_set_default_action_args& obj);
};


class Runtime_bm_set_default_action_pargs {
 public:

  static const char* ascii_fingerprint; // = "8E2AD6401E83558ECFD6A13D74DD0A3F";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};


  virtual ~Runtime_bm_set_default_action_pargs() throw();
  const std::string* table_name;
  const std::string* action_name;
  const BmActionData* action_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_set_default_action_pargs& obj);
};

typedef struct _Runtime_bm_set_default_action_result__isset {
  _Runtime_bm_set_default_action_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_set_default_action_result__isset;

class Runtime_bm_set_default_action_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_set_default_action_result(const Runtime_bm_set_default_action_result&);
  Runtime_bm_set_default_action_result& operator=(const Runtime_bm_set_default_action_result&);
  Runtime_bm_set_default_action_result() {
  }

  virtual ~Runtime_bm_set_default_action_result() throw();
  InvalidTableOperation ouch;

  _Runtime_bm_set_default_action_result__isset __isset;

  void __set_ouch(const InvalidTableOperation& val);

  bool operator == (const Runtime_bm_set_default_action_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_set_default_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_set_default_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_set_default_action_result& obj);
};

typedef struct _Runtime_bm_set_default_action_presult__isset {
  _Runtime_bm_set_default_action_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_set_default_action_presult__isset;

class Runtime_bm_set_default_action_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_set_default_action_presult() throw();
  InvalidTableOperation ouch;

  _Runtime_bm_set_default_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_set_default_action_presult& obj);
};

typedef struct _Runtime_bm_table_delete_entry_args__isset {
  _Runtime_bm_table_delete_entry_args__isset() : table_name(false), entry_handle(false) {}
  bool table_name :1;
  bool entry_handle :1;
} _Runtime_bm_table_delete_entry_args__isset;

class Runtime_bm_table_delete_entry_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Runtime_bm_table_delete_entry_args(const Runtime_bm_table_delete_entry_args&);
  Runtime_bm_table_delete_entry_args& operator=(const Runtime_bm_table_delete_entry_args&);
  Runtime_bm_table_delete_entry_args() : table_name(), entry_handle(0) {
  }

  virtual ~Runtime_bm_table_delete_entry_args() throw();
  std::string table_name;
  BmEntryHandle entry_handle;

  _Runtime_bm_table_delete_entry_args__isset __isset;

  void __set_table_name(const std::string& val);

  void __set_entry_handle(const BmEntryHandle val);

  bool operator == (const Runtime_bm_table_delete_entry_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(entry_handle == rhs.entry_handle))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_delete_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_delete_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_delete_entry_args& obj);
};


class Runtime_bm_table_delete_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~Runtime_bm_table_delete_entry_pargs() throw();
  const std::string* table_name;
  const BmEntryHandle* entry_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_delete_entry_pargs& obj);
};

typedef struct _Runtime_bm_table_delete_entry_result__isset {
  _Runtime_bm_table_delete_entry_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_table_delete_entry_result__isset;

class Runtime_bm_table_delete_entry_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_table_delete_entry_result(const Runtime_bm_table_delete_entry_result&);
  Runtime_bm_table_delete_entry_result& operator=(const Runtime_bm_table_delete_entry_result&);
  Runtime_bm_table_delete_entry_result() {
  }

  virtual ~Runtime_bm_table_delete_entry_result() throw();
  InvalidTableOperation ouch;

  _Runtime_bm_table_delete_entry_result__isset __isset;

  void __set_ouch(const InvalidTableOperation& val);

  bool operator == (const Runtime_bm_table_delete_entry_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_table_delete_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_table_delete_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_delete_entry_result& obj);
};

typedef struct _Runtime_bm_table_delete_entry_presult__isset {
  _Runtime_bm_table_delete_entry_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_table_delete_entry_presult__isset;

class Runtime_bm_table_delete_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_table_delete_entry_presult() throw();
  InvalidTableOperation ouch;

  _Runtime_bm_table_delete_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_table_delete_entry_presult& obj);
};

typedef struct _Runtime_bm_learning_ack_args__isset {
  _Runtime_bm_learning_ack_args__isset() : list_id(false), buffer_id(false), sample_ids(false) {}
  bool list_id :1;
  bool buffer_id :1;
  bool sample_ids :1;
} _Runtime_bm_learning_ack_args__isset;

class Runtime_bm_learning_ack_args {
 public:

  static const char* ascii_fingerprint; // = "614A0C7F2510A54DAE1BCF40D04D9514";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x4A,0x0C,0x7F,0x25,0x10,0xA5,0x4D,0xAE,0x1B,0xCF,0x40,0xD0,0x4D,0x95,0x14};

  Runtime_bm_learning_ack_args(const Runtime_bm_learning_ack_args&);
  Runtime_bm_learning_ack_args& operator=(const Runtime_bm_learning_ack_args&);
  Runtime_bm_learning_ack_args() : list_id(0), buffer_id(0) {
  }

  virtual ~Runtime_bm_learning_ack_args() throw();
  BmLearningListId list_id;
  BmLearningBufferId buffer_id;
  std::vector<BmLearningSampleId>  sample_ids;

  _Runtime_bm_learning_ack_args__isset __isset;

  void __set_list_id(const BmLearningListId val);

  void __set_buffer_id(const BmLearningBufferId val);

  void __set_sample_ids(const std::vector<BmLearningSampleId> & val);

  bool operator == (const Runtime_bm_learning_ack_args & rhs) const
  {
    if (!(list_id == rhs.list_id))
      return false;
    if (!(buffer_id == rhs.buffer_id))
      return false;
    if (!(sample_ids == rhs.sample_ids))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_learning_ack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_learning_ack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_args& obj);
};


class Runtime_bm_learning_ack_pargs {
 public:

  static const char* ascii_fingerprint; // = "614A0C7F2510A54DAE1BCF40D04D9514";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x4A,0x0C,0x7F,0x25,0x10,0xA5,0x4D,0xAE,0x1B,0xCF,0x40,0xD0,0x4D,0x95,0x14};


  virtual ~Runtime_bm_learning_ack_pargs() throw();
  const BmLearningListId* list_id;
  const BmLearningBufferId* buffer_id;
  const std::vector<BmLearningSampleId> * sample_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_pargs& obj);
};


class Runtime_bm_learning_ack_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Runtime_bm_learning_ack_result(const Runtime_bm_learning_ack_result&);
  Runtime_bm_learning_ack_result& operator=(const Runtime_bm_learning_ack_result&);
  Runtime_bm_learning_ack_result() {
  }

  virtual ~Runtime_bm_learning_ack_result() throw();

  bool operator == (const Runtime_bm_learning_ack_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Runtime_bm_learning_ack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_learning_ack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_result& obj);
};


class Runtime_bm_learning_ack_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Runtime_bm_learning_ack_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_presult& obj);
};

typedef struct _Runtime_bm_learning_ack_buffer_args__isset {
  _Runtime_bm_learning_ack_buffer_args__isset() : list_id(false), buffer_id(false) {}
  bool list_id :1;
  bool buffer_id :1;
} _Runtime_bm_learning_ack_buffer_args__isset;

class Runtime_bm_learning_ack_buffer_args {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  Runtime_bm_learning_ack_buffer_args(const Runtime_bm_learning_ack_buffer_args&);
  Runtime_bm_learning_ack_buffer_args& operator=(const Runtime_bm_learning_ack_buffer_args&);
  Runtime_bm_learning_ack_buffer_args() : list_id(0), buffer_id(0) {
  }

  virtual ~Runtime_bm_learning_ack_buffer_args() throw();
  BmLearningListId list_id;
  BmLearningBufferId buffer_id;

  _Runtime_bm_learning_ack_buffer_args__isset __isset;

  void __set_list_id(const BmLearningListId val);

  void __set_buffer_id(const BmLearningBufferId val);

  bool operator == (const Runtime_bm_learning_ack_buffer_args & rhs) const
  {
    if (!(list_id == rhs.list_id))
      return false;
    if (!(buffer_id == rhs.buffer_id))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_learning_ack_buffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_learning_ack_buffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_buffer_args& obj);
};


class Runtime_bm_learning_ack_buffer_pargs {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};


  virtual ~Runtime_bm_learning_ack_buffer_pargs() throw();
  const BmLearningListId* list_id;
  const BmLearningBufferId* buffer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_buffer_pargs& obj);
};


class Runtime_bm_learning_ack_buffer_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Runtime_bm_learning_ack_buffer_result(const Runtime_bm_learning_ack_buffer_result&);
  Runtime_bm_learning_ack_buffer_result& operator=(const Runtime_bm_learning_ack_buffer_result&);
  Runtime_bm_learning_ack_buffer_result() {
  }

  virtual ~Runtime_bm_learning_ack_buffer_result() throw();

  bool operator == (const Runtime_bm_learning_ack_buffer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Runtime_bm_learning_ack_buffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_learning_ack_buffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_buffer_result& obj);
};


class Runtime_bm_learning_ack_buffer_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Runtime_bm_learning_ack_buffer_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_learning_ack_buffer_presult& obj);
};

typedef struct _Runtime_bm_mc_mgrp_create_args__isset {
  _Runtime_bm_mc_mgrp_create_args__isset() : mgrp(false) {}
  bool mgrp :1;
} _Runtime_bm_mc_mgrp_create_args__isset;

class Runtime_bm_mc_mgrp_create_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Runtime_bm_mc_mgrp_create_args(const Runtime_bm_mc_mgrp_create_args&);
  Runtime_bm_mc_mgrp_create_args& operator=(const Runtime_bm_mc_mgrp_create_args&);
  Runtime_bm_mc_mgrp_create_args() : mgrp(0) {
  }

  virtual ~Runtime_bm_mc_mgrp_create_args() throw();
  BmMcMgrp mgrp;

  _Runtime_bm_mc_mgrp_create_args__isset __isset;

  void __set_mgrp(const BmMcMgrp val);

  bool operator == (const Runtime_bm_mc_mgrp_create_args & rhs) const
  {
    if (!(mgrp == rhs.mgrp))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_mgrp_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_mgrp_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_create_args& obj);
};


class Runtime_bm_mc_mgrp_create_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Runtime_bm_mc_mgrp_create_pargs() throw();
  const BmMcMgrp* mgrp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_create_pargs& obj);
};

typedef struct _Runtime_bm_mc_mgrp_create_result__isset {
  _Runtime_bm_mc_mgrp_create_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_mc_mgrp_create_result__isset;

class Runtime_bm_mc_mgrp_create_result {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};

  Runtime_bm_mc_mgrp_create_result(const Runtime_bm_mc_mgrp_create_result&);
  Runtime_bm_mc_mgrp_create_result& operator=(const Runtime_bm_mc_mgrp_create_result&);
  Runtime_bm_mc_mgrp_create_result() : success(0) {
  }

  virtual ~Runtime_bm_mc_mgrp_create_result() throw();
  BmMcMgrpHandle success;
  InvalidMcOperation ouch;

  _Runtime_bm_mc_mgrp_create_result__isset __isset;

  void __set_success(const BmMcMgrpHandle val);

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_mgrp_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_mgrp_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_mgrp_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_create_result& obj);
};

typedef struct _Runtime_bm_mc_mgrp_create_presult__isset {
  _Runtime_bm_mc_mgrp_create_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_mc_mgrp_create_presult__isset;

class Runtime_bm_mc_mgrp_create_presult {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};


  virtual ~Runtime_bm_mc_mgrp_create_presult() throw();
  BmMcMgrpHandle* success;
  InvalidMcOperation ouch;

  _Runtime_bm_mc_mgrp_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_create_presult& obj);
};

typedef struct _Runtime_bm_mc_mgrp_destroy_args__isset {
  _Runtime_bm_mc_mgrp_destroy_args__isset() : mgrp_handle(false) {}
  bool mgrp_handle :1;
} _Runtime_bm_mc_mgrp_destroy_args__isset;

class Runtime_bm_mc_mgrp_destroy_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Runtime_bm_mc_mgrp_destroy_args(const Runtime_bm_mc_mgrp_destroy_args&);
  Runtime_bm_mc_mgrp_destroy_args& operator=(const Runtime_bm_mc_mgrp_destroy_args&);
  Runtime_bm_mc_mgrp_destroy_args() : mgrp_handle(0) {
  }

  virtual ~Runtime_bm_mc_mgrp_destroy_args() throw();
  BmMcMgrpHandle mgrp_handle;

  _Runtime_bm_mc_mgrp_destroy_args__isset __isset;

  void __set_mgrp_handle(const BmMcMgrpHandle val);

  bool operator == (const Runtime_bm_mc_mgrp_destroy_args & rhs) const
  {
    if (!(mgrp_handle == rhs.mgrp_handle))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_mgrp_destroy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_mgrp_destroy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_destroy_args& obj);
};


class Runtime_bm_mc_mgrp_destroy_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Runtime_bm_mc_mgrp_destroy_pargs() throw();
  const BmMcMgrpHandle* mgrp_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_destroy_pargs& obj);
};

typedef struct _Runtime_bm_mc_mgrp_destroy_result__isset {
  _Runtime_bm_mc_mgrp_destroy_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_mgrp_destroy_result__isset;

class Runtime_bm_mc_mgrp_destroy_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_mc_mgrp_destroy_result(const Runtime_bm_mc_mgrp_destroy_result&);
  Runtime_bm_mc_mgrp_destroy_result& operator=(const Runtime_bm_mc_mgrp_destroy_result&);
  Runtime_bm_mc_mgrp_destroy_result() {
  }

  virtual ~Runtime_bm_mc_mgrp_destroy_result() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_mgrp_destroy_result__isset __isset;

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_mgrp_destroy_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_mgrp_destroy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_mgrp_destroy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_destroy_result& obj);
};

typedef struct _Runtime_bm_mc_mgrp_destroy_presult__isset {
  _Runtime_bm_mc_mgrp_destroy_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_mgrp_destroy_presult__isset;

class Runtime_bm_mc_mgrp_destroy_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_mc_mgrp_destroy_presult() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_mgrp_destroy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_mgrp_destroy_presult& obj);
};

typedef struct _Runtime_bm_mc_l1_node_create_args__isset {
  _Runtime_bm_mc_l1_node_create_args__isset() : rid(false) {}
  bool rid :1;
} _Runtime_bm_mc_l1_node_create_args__isset;

class Runtime_bm_mc_l1_node_create_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Runtime_bm_mc_l1_node_create_args(const Runtime_bm_mc_l1_node_create_args&);
  Runtime_bm_mc_l1_node_create_args& operator=(const Runtime_bm_mc_l1_node_create_args&);
  Runtime_bm_mc_l1_node_create_args() : rid(0) {
  }

  virtual ~Runtime_bm_mc_l1_node_create_args() throw();
  BmMcRid rid;

  _Runtime_bm_mc_l1_node_create_args__isset __isset;

  void __set_rid(const BmMcRid val);

  bool operator == (const Runtime_bm_mc_l1_node_create_args & rhs) const
  {
    if (!(rid == rhs.rid))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l1_node_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l1_node_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_create_args& obj);
};


class Runtime_bm_mc_l1_node_create_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Runtime_bm_mc_l1_node_create_pargs() throw();
  const BmMcRid* rid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_create_pargs& obj);
};

typedef struct _Runtime_bm_mc_l1_node_create_result__isset {
  _Runtime_bm_mc_l1_node_create_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_mc_l1_node_create_result__isset;

class Runtime_bm_mc_l1_node_create_result {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};

  Runtime_bm_mc_l1_node_create_result(const Runtime_bm_mc_l1_node_create_result&);
  Runtime_bm_mc_l1_node_create_result& operator=(const Runtime_bm_mc_l1_node_create_result&);
  Runtime_bm_mc_l1_node_create_result() : success(0) {
  }

  virtual ~Runtime_bm_mc_l1_node_create_result() throw();
  BmMcL1Handle success;
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l1_node_create_result__isset __isset;

  void __set_success(const BmMcL1Handle val);

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_l1_node_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l1_node_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l1_node_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_create_result& obj);
};

typedef struct _Runtime_bm_mc_l1_node_create_presult__isset {
  _Runtime_bm_mc_l1_node_create_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_mc_l1_node_create_presult__isset;

class Runtime_bm_mc_l1_node_create_presult {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};


  virtual ~Runtime_bm_mc_l1_node_create_presult() throw();
  BmMcL1Handle* success;
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l1_node_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_create_presult& obj);
};

typedef struct _Runtime_bm_mc_l1_node_associate_args__isset {
  _Runtime_bm_mc_l1_node_associate_args__isset() : mgrp_handle(false), l1_handle(false) {}
  bool mgrp_handle :1;
  bool l1_handle :1;
} _Runtime_bm_mc_l1_node_associate_args__isset;

class Runtime_bm_mc_l1_node_associate_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Runtime_bm_mc_l1_node_associate_args(const Runtime_bm_mc_l1_node_associate_args&);
  Runtime_bm_mc_l1_node_associate_args& operator=(const Runtime_bm_mc_l1_node_associate_args&);
  Runtime_bm_mc_l1_node_associate_args() : mgrp_handle(0), l1_handle(0) {
  }

  virtual ~Runtime_bm_mc_l1_node_associate_args() throw();
  BmMcMgrpHandle mgrp_handle;
  BmMcL1Handle l1_handle;

  _Runtime_bm_mc_l1_node_associate_args__isset __isset;

  void __set_mgrp_handle(const BmMcMgrpHandle val);

  void __set_l1_handle(const BmMcL1Handle val);

  bool operator == (const Runtime_bm_mc_l1_node_associate_args & rhs) const
  {
    if (!(mgrp_handle == rhs.mgrp_handle))
      return false;
    if (!(l1_handle == rhs.l1_handle))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l1_node_associate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l1_node_associate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_associate_args& obj);
};


class Runtime_bm_mc_l1_node_associate_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~Runtime_bm_mc_l1_node_associate_pargs() throw();
  const BmMcMgrpHandle* mgrp_handle;
  const BmMcL1Handle* l1_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_associate_pargs& obj);
};

typedef struct _Runtime_bm_mc_l1_node_associate_result__isset {
  _Runtime_bm_mc_l1_node_associate_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l1_node_associate_result__isset;

class Runtime_bm_mc_l1_node_associate_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_mc_l1_node_associate_result(const Runtime_bm_mc_l1_node_associate_result&);
  Runtime_bm_mc_l1_node_associate_result& operator=(const Runtime_bm_mc_l1_node_associate_result&);
  Runtime_bm_mc_l1_node_associate_result() {
  }

  virtual ~Runtime_bm_mc_l1_node_associate_result() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l1_node_associate_result__isset __isset;

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_l1_node_associate_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l1_node_associate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l1_node_associate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_associate_result& obj);
};

typedef struct _Runtime_bm_mc_l1_node_associate_presult__isset {
  _Runtime_bm_mc_l1_node_associate_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l1_node_associate_presult__isset;

class Runtime_bm_mc_l1_node_associate_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_mc_l1_node_associate_presult() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l1_node_associate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_associate_presult& obj);
};

typedef struct _Runtime_bm_mc_l1_node_destroy_args__isset {
  _Runtime_bm_mc_l1_node_destroy_args__isset() : l1_handle(false) {}
  bool l1_handle :1;
} _Runtime_bm_mc_l1_node_destroy_args__isset;

class Runtime_bm_mc_l1_node_destroy_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Runtime_bm_mc_l1_node_destroy_args(const Runtime_bm_mc_l1_node_destroy_args&);
  Runtime_bm_mc_l1_node_destroy_args& operator=(const Runtime_bm_mc_l1_node_destroy_args&);
  Runtime_bm_mc_l1_node_destroy_args() : l1_handle(0) {
  }

  virtual ~Runtime_bm_mc_l1_node_destroy_args() throw();
  BmMcL1Handle l1_handle;

  _Runtime_bm_mc_l1_node_destroy_args__isset __isset;

  void __set_l1_handle(const BmMcL1Handle val);

  bool operator == (const Runtime_bm_mc_l1_node_destroy_args & rhs) const
  {
    if (!(l1_handle == rhs.l1_handle))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l1_node_destroy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l1_node_destroy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_destroy_args& obj);
};


class Runtime_bm_mc_l1_node_destroy_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Runtime_bm_mc_l1_node_destroy_pargs() throw();
  const BmMcL1Handle* l1_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_destroy_pargs& obj);
};

typedef struct _Runtime_bm_mc_l1_node_destroy_result__isset {
  _Runtime_bm_mc_l1_node_destroy_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l1_node_destroy_result__isset;

class Runtime_bm_mc_l1_node_destroy_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_mc_l1_node_destroy_result(const Runtime_bm_mc_l1_node_destroy_result&);
  Runtime_bm_mc_l1_node_destroy_result& operator=(const Runtime_bm_mc_l1_node_destroy_result&);
  Runtime_bm_mc_l1_node_destroy_result() {
  }

  virtual ~Runtime_bm_mc_l1_node_destroy_result() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l1_node_destroy_result__isset __isset;

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_l1_node_destroy_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l1_node_destroy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l1_node_destroy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_destroy_result& obj);
};

typedef struct _Runtime_bm_mc_l1_node_destroy_presult__isset {
  _Runtime_bm_mc_l1_node_destroy_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l1_node_destroy_presult__isset;

class Runtime_bm_mc_l1_node_destroy_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_mc_l1_node_destroy_presult() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l1_node_destroy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l1_node_destroy_presult& obj);
};

typedef struct _Runtime_bm_mc_l2_node_create_args__isset {
  _Runtime_bm_mc_l2_node_create_args__isset() : l1_handle(false), port_map(false) {}
  bool l1_handle :1;
  bool port_map :1;
} _Runtime_bm_mc_l2_node_create_args__isset;

class Runtime_bm_mc_l2_node_create_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Runtime_bm_mc_l2_node_create_args(const Runtime_bm_mc_l2_node_create_args&);
  Runtime_bm_mc_l2_node_create_args& operator=(const Runtime_bm_mc_l2_node_create_args&);
  Runtime_bm_mc_l2_node_create_args() : l1_handle(0), port_map() {
  }

  virtual ~Runtime_bm_mc_l2_node_create_args() throw();
  BmMcL1Handle l1_handle;
  BmMcPortMap port_map;

  _Runtime_bm_mc_l2_node_create_args__isset __isset;

  void __set_l1_handle(const BmMcL1Handle val);

  void __set_port_map(const BmMcPortMap& val);

  bool operator == (const Runtime_bm_mc_l2_node_create_args & rhs) const
  {
    if (!(l1_handle == rhs.l1_handle))
      return false;
    if (!(port_map == rhs.port_map))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l2_node_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l2_node_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_create_args& obj);
};


class Runtime_bm_mc_l2_node_create_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~Runtime_bm_mc_l2_node_create_pargs() throw();
  const BmMcL1Handle* l1_handle;
  const BmMcPortMap* port_map;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_create_pargs& obj);
};

typedef struct _Runtime_bm_mc_l2_node_create_result__isset {
  _Runtime_bm_mc_l2_node_create_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_mc_l2_node_create_result__isset;

class Runtime_bm_mc_l2_node_create_result {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};

  Runtime_bm_mc_l2_node_create_result(const Runtime_bm_mc_l2_node_create_result&);
  Runtime_bm_mc_l2_node_create_result& operator=(const Runtime_bm_mc_l2_node_create_result&);
  Runtime_bm_mc_l2_node_create_result() : success(0) {
  }

  virtual ~Runtime_bm_mc_l2_node_create_result() throw();
  BmMcL2Handle success;
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l2_node_create_result__isset __isset;

  void __set_success(const BmMcL2Handle val);

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_l2_node_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l2_node_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l2_node_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_create_result& obj);
};

typedef struct _Runtime_bm_mc_l2_node_create_presult__isset {
  _Runtime_bm_mc_l2_node_create_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Runtime_bm_mc_l2_node_create_presult__isset;

class Runtime_bm_mc_l2_node_create_presult {
 public:

  static const char* ascii_fingerprint; // = "848AEE3C942ADC100077F4225B720BB5";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x8A,0xEE,0x3C,0x94,0x2A,0xDC,0x10,0x00,0x77,0xF4,0x22,0x5B,0x72,0x0B,0xB5};


  virtual ~Runtime_bm_mc_l2_node_create_presult() throw();
  BmMcL2Handle* success;
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l2_node_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_create_presult& obj);
};

typedef struct _Runtime_bm_mc_l2_node_update_args__isset {
  _Runtime_bm_mc_l2_node_update_args__isset() : l2_handle(false), port_map(false) {}
  bool l2_handle :1;
  bool port_map :1;
} _Runtime_bm_mc_l2_node_update_args__isset;

class Runtime_bm_mc_l2_node_update_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Runtime_bm_mc_l2_node_update_args(const Runtime_bm_mc_l2_node_update_args&);
  Runtime_bm_mc_l2_node_update_args& operator=(const Runtime_bm_mc_l2_node_update_args&);
  Runtime_bm_mc_l2_node_update_args() : l2_handle(0), port_map() {
  }

  virtual ~Runtime_bm_mc_l2_node_update_args() throw();
  BmMcL2Handle l2_handle;
  BmMcPortMap port_map;

  _Runtime_bm_mc_l2_node_update_args__isset __isset;

  void __set_l2_handle(const BmMcL2Handle val);

  void __set_port_map(const BmMcPortMap& val);

  bool operator == (const Runtime_bm_mc_l2_node_update_args & rhs) const
  {
    if (!(l2_handle == rhs.l2_handle))
      return false;
    if (!(port_map == rhs.port_map))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l2_node_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l2_node_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_update_args& obj);
};


class Runtime_bm_mc_l2_node_update_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~Runtime_bm_mc_l2_node_update_pargs() throw();
  const BmMcL2Handle* l2_handle;
  const BmMcPortMap* port_map;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_update_pargs& obj);
};

typedef struct _Runtime_bm_mc_l2_node_update_result__isset {
  _Runtime_bm_mc_l2_node_update_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l2_node_update_result__isset;

class Runtime_bm_mc_l2_node_update_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_mc_l2_node_update_result(const Runtime_bm_mc_l2_node_update_result&);
  Runtime_bm_mc_l2_node_update_result& operator=(const Runtime_bm_mc_l2_node_update_result&);
  Runtime_bm_mc_l2_node_update_result() {
  }

  virtual ~Runtime_bm_mc_l2_node_update_result() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l2_node_update_result__isset __isset;

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_l2_node_update_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l2_node_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l2_node_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_update_result& obj);
};

typedef struct _Runtime_bm_mc_l2_node_update_presult__isset {
  _Runtime_bm_mc_l2_node_update_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l2_node_update_presult__isset;

class Runtime_bm_mc_l2_node_update_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_mc_l2_node_update_presult() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l2_node_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_update_presult& obj);
};

typedef struct _Runtime_bm_mc_l2_node_destroy_args__isset {
  _Runtime_bm_mc_l2_node_destroy_args__isset() : l2_handle(false) {}
  bool l2_handle :1;
} _Runtime_bm_mc_l2_node_destroy_args__isset;

class Runtime_bm_mc_l2_node_destroy_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Runtime_bm_mc_l2_node_destroy_args(const Runtime_bm_mc_l2_node_destroy_args&);
  Runtime_bm_mc_l2_node_destroy_args& operator=(const Runtime_bm_mc_l2_node_destroy_args&);
  Runtime_bm_mc_l2_node_destroy_args() : l2_handle(0) {
  }

  virtual ~Runtime_bm_mc_l2_node_destroy_args() throw();
  BmMcL2Handle l2_handle;

  _Runtime_bm_mc_l2_node_destroy_args__isset __isset;

  void __set_l2_handle(const BmMcL2Handle val);

  bool operator == (const Runtime_bm_mc_l2_node_destroy_args & rhs) const
  {
    if (!(l2_handle == rhs.l2_handle))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l2_node_destroy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l2_node_destroy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_destroy_args& obj);
};


class Runtime_bm_mc_l2_node_destroy_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Runtime_bm_mc_l2_node_destroy_pargs() throw();
  const BmMcL2Handle* l2_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_destroy_pargs& obj);
};

typedef struct _Runtime_bm_mc_l2_node_destroy_result__isset {
  _Runtime_bm_mc_l2_node_destroy_result__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l2_node_destroy_result__isset;

class Runtime_bm_mc_l2_node_destroy_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  Runtime_bm_mc_l2_node_destroy_result(const Runtime_bm_mc_l2_node_destroy_result&);
  Runtime_bm_mc_l2_node_destroy_result& operator=(const Runtime_bm_mc_l2_node_destroy_result&);
  Runtime_bm_mc_l2_node_destroy_result() {
  }

  virtual ~Runtime_bm_mc_l2_node_destroy_result() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l2_node_destroy_result__isset __isset;

  void __set_ouch(const InvalidMcOperation& val);

  bool operator == (const Runtime_bm_mc_l2_node_destroy_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Runtime_bm_mc_l2_node_destroy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Runtime_bm_mc_l2_node_destroy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_destroy_result& obj);
};

typedef struct _Runtime_bm_mc_l2_node_destroy_presult__isset {
  _Runtime_bm_mc_l2_node_destroy_presult__isset() : ouch(false) {}
  bool ouch :1;
} _Runtime_bm_mc_l2_node_destroy_presult__isset;

class Runtime_bm_mc_l2_node_destroy_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~Runtime_bm_mc_l2_node_destroy_presult() throw();
  InvalidMcOperation ouch;

  _Runtime_bm_mc_l2_node_destroy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Runtime_bm_mc_l2_node_destroy_presult& obj);
};

class RuntimeClient : virtual public RuntimeIf {
 public:
  RuntimeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RuntimeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  BmEntryHandle bm_table_add_exact_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmActionData& action_data);
  void send_bm_table_add_exact_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmActionData& action_data);
  BmEntryHandle recv_bm_table_add_exact_match_entry();
  BmEntryHandle bm_table_add_lpm_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const int32_t prefix_length, const BmActionData& action_data);
  void send_bm_table_add_lpm_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const int32_t prefix_length, const BmActionData& action_data);
  BmEntryHandle recv_bm_table_add_lpm_entry();
  BmEntryHandle bm_table_add_ternary_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmMatchKey& match_mask, const int32_t priority, const BmActionData& action_data);
  void send_bm_table_add_ternary_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmMatchKey& match_mask, const int32_t priority, const BmActionData& action_data);
  BmEntryHandle recv_bm_table_add_ternary_match_entry();
  void bm_set_default_action(const std::string& table_name, const std::string& action_name, const BmActionData& action_data);
  void send_bm_set_default_action(const std::string& table_name, const std::string& action_name, const BmActionData& action_data);
  void recv_bm_set_default_action();
  void bm_table_delete_entry(const std::string& table_name, const BmEntryHandle entry_handle);
  void send_bm_table_delete_entry(const std::string& table_name, const BmEntryHandle entry_handle);
  void recv_bm_table_delete_entry();
  void bm_learning_ack(const BmLearningListId list_id, const BmLearningBufferId buffer_id, const std::vector<BmLearningSampleId> & sample_ids);
  void send_bm_learning_ack(const BmLearningListId list_id, const BmLearningBufferId buffer_id, const std::vector<BmLearningSampleId> & sample_ids);
  void recv_bm_learning_ack();
  void bm_learning_ack_buffer(const BmLearningListId list_id, const BmLearningBufferId buffer_id);
  void send_bm_learning_ack_buffer(const BmLearningListId list_id, const BmLearningBufferId buffer_id);
  void recv_bm_learning_ack_buffer();
  BmMcMgrpHandle bm_mc_mgrp_create(const BmMcMgrp mgrp);
  void send_bm_mc_mgrp_create(const BmMcMgrp mgrp);
  BmMcMgrpHandle recv_bm_mc_mgrp_create();
  void bm_mc_mgrp_destroy(const BmMcMgrpHandle mgrp_handle);
  void send_bm_mc_mgrp_destroy(const BmMcMgrpHandle mgrp_handle);
  void recv_bm_mc_mgrp_destroy();
  BmMcL1Handle bm_mc_l1_node_create(const BmMcRid rid);
  void send_bm_mc_l1_node_create(const BmMcRid rid);
  BmMcL1Handle recv_bm_mc_l1_node_create();
  void bm_mc_l1_node_associate(const BmMcMgrpHandle mgrp_handle, const BmMcL1Handle l1_handle);
  void send_bm_mc_l1_node_associate(const BmMcMgrpHandle mgrp_handle, const BmMcL1Handle l1_handle);
  void recv_bm_mc_l1_node_associate();
  void bm_mc_l1_node_destroy(const BmMcL1Handle l1_handle);
  void send_bm_mc_l1_node_destroy(const BmMcL1Handle l1_handle);
  void recv_bm_mc_l1_node_destroy();
  BmMcL2Handle bm_mc_l2_node_create(const BmMcL1Handle l1_handle, const BmMcPortMap& port_map);
  void send_bm_mc_l2_node_create(const BmMcL1Handle l1_handle, const BmMcPortMap& port_map);
  BmMcL2Handle recv_bm_mc_l2_node_create();
  void bm_mc_l2_node_update(const BmMcL2Handle l2_handle, const BmMcPortMap& port_map);
  void send_bm_mc_l2_node_update(const BmMcL2Handle l2_handle, const BmMcPortMap& port_map);
  void recv_bm_mc_l2_node_update();
  void bm_mc_l2_node_destroy(const BmMcL2Handle l2_handle);
  void send_bm_mc_l2_node_destroy(const BmMcL2Handle l2_handle);
  void recv_bm_mc_l2_node_destroy();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RuntimeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RuntimeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RuntimeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_bm_table_add_exact_match_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_table_add_lpm_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_table_add_ternary_match_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_set_default_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_table_delete_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_learning_ack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_learning_ack_buffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_mgrp_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_mgrp_destroy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_l1_node_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_l1_node_associate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_l1_node_destroy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_l2_node_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_l2_node_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bm_mc_l2_node_destroy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RuntimeProcessor(boost::shared_ptr<RuntimeIf> iface) :
    iface_(iface) {
    processMap_["bm_table_add_exact_match_entry"] = &RuntimeProcessor::process_bm_table_add_exact_match_entry;
    processMap_["bm_table_add_lpm_entry"] = &RuntimeProcessor::process_bm_table_add_lpm_entry;
    processMap_["bm_table_add_ternary_match_entry"] = &RuntimeProcessor::process_bm_table_add_ternary_match_entry;
    processMap_["bm_set_default_action"] = &RuntimeProcessor::process_bm_set_default_action;
    processMap_["bm_table_delete_entry"] = &RuntimeProcessor::process_bm_table_delete_entry;
    processMap_["bm_learning_ack"] = &RuntimeProcessor::process_bm_learning_ack;
    processMap_["bm_learning_ack_buffer"] = &RuntimeProcessor::process_bm_learning_ack_buffer;
    processMap_["bm_mc_mgrp_create"] = &RuntimeProcessor::process_bm_mc_mgrp_create;
    processMap_["bm_mc_mgrp_destroy"] = &RuntimeProcessor::process_bm_mc_mgrp_destroy;
    processMap_["bm_mc_l1_node_create"] = &RuntimeProcessor::process_bm_mc_l1_node_create;
    processMap_["bm_mc_l1_node_associate"] = &RuntimeProcessor::process_bm_mc_l1_node_associate;
    processMap_["bm_mc_l1_node_destroy"] = &RuntimeProcessor::process_bm_mc_l1_node_destroy;
    processMap_["bm_mc_l2_node_create"] = &RuntimeProcessor::process_bm_mc_l2_node_create;
    processMap_["bm_mc_l2_node_update"] = &RuntimeProcessor::process_bm_mc_l2_node_update;
    processMap_["bm_mc_l2_node_destroy"] = &RuntimeProcessor::process_bm_mc_l2_node_destroy;
  }

  virtual ~RuntimeProcessor() {}
};

class RuntimeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RuntimeProcessorFactory(const ::boost::shared_ptr< RuntimeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RuntimeIfFactory > handlerFactory_;
};

class RuntimeMultiface : virtual public RuntimeIf {
 public:
  RuntimeMultiface(std::vector<boost::shared_ptr<RuntimeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RuntimeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RuntimeIf> > ifaces_;
  RuntimeMultiface() {}
  void add(boost::shared_ptr<RuntimeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  BmEntryHandle bm_table_add_exact_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmActionData& action_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_table_add_exact_match_entry(table_name, action_name, match_key, action_data);
    }
    return ifaces_[i]->bm_table_add_exact_match_entry(table_name, action_name, match_key, action_data);
  }

  BmEntryHandle bm_table_add_lpm_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const int32_t prefix_length, const BmActionData& action_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_table_add_lpm_entry(table_name, action_name, match_key, prefix_length, action_data);
    }
    return ifaces_[i]->bm_table_add_lpm_entry(table_name, action_name, match_key, prefix_length, action_data);
  }

  BmEntryHandle bm_table_add_ternary_match_entry(const std::string& table_name, const std::string& action_name, const BmMatchKey& match_key, const BmMatchKey& match_mask, const int32_t priority, const BmActionData& action_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_table_add_ternary_match_entry(table_name, action_name, match_key, match_mask, priority, action_data);
    }
    return ifaces_[i]->bm_table_add_ternary_match_entry(table_name, action_name, match_key, match_mask, priority, action_data);
  }

  void bm_set_default_action(const std::string& table_name, const std::string& action_name, const BmActionData& action_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_set_default_action(table_name, action_name, action_data);
    }
    ifaces_[i]->bm_set_default_action(table_name, action_name, action_data);
  }

  void bm_table_delete_entry(const std::string& table_name, const BmEntryHandle entry_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_table_delete_entry(table_name, entry_handle);
    }
    ifaces_[i]->bm_table_delete_entry(table_name, entry_handle);
  }

  void bm_learning_ack(const BmLearningListId list_id, const BmLearningBufferId buffer_id, const std::vector<BmLearningSampleId> & sample_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_learning_ack(list_id, buffer_id, sample_ids);
    }
    ifaces_[i]->bm_learning_ack(list_id, buffer_id, sample_ids);
  }

  void bm_learning_ack_buffer(const BmLearningListId list_id, const BmLearningBufferId buffer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_learning_ack_buffer(list_id, buffer_id);
    }
    ifaces_[i]->bm_learning_ack_buffer(list_id, buffer_id);
  }

  BmMcMgrpHandle bm_mc_mgrp_create(const BmMcMgrp mgrp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_mgrp_create(mgrp);
    }
    return ifaces_[i]->bm_mc_mgrp_create(mgrp);
  }

  void bm_mc_mgrp_destroy(const BmMcMgrpHandle mgrp_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_mgrp_destroy(mgrp_handle);
    }
    ifaces_[i]->bm_mc_mgrp_destroy(mgrp_handle);
  }

  BmMcL1Handle bm_mc_l1_node_create(const BmMcRid rid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_l1_node_create(rid);
    }
    return ifaces_[i]->bm_mc_l1_node_create(rid);
  }

  void bm_mc_l1_node_associate(const BmMcMgrpHandle mgrp_handle, const BmMcL1Handle l1_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_l1_node_associate(mgrp_handle, l1_handle);
    }
    ifaces_[i]->bm_mc_l1_node_associate(mgrp_handle, l1_handle);
  }

  void bm_mc_l1_node_destroy(const BmMcL1Handle l1_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_l1_node_destroy(l1_handle);
    }
    ifaces_[i]->bm_mc_l1_node_destroy(l1_handle);
  }

  BmMcL2Handle bm_mc_l2_node_create(const BmMcL1Handle l1_handle, const BmMcPortMap& port_map) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_l2_node_create(l1_handle, port_map);
    }
    return ifaces_[i]->bm_mc_l2_node_create(l1_handle, port_map);
  }

  void bm_mc_l2_node_update(const BmMcL2Handle l2_handle, const BmMcPortMap& port_map) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_l2_node_update(l2_handle, port_map);
    }
    ifaces_[i]->bm_mc_l2_node_update(l2_handle, port_map);
  }

  void bm_mc_l2_node_destroy(const BmMcL2Handle l2_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bm_mc_l2_node_destroy(l2_handle);
    }
    ifaces_[i]->bm_mc_l2_node_destroy(l2_handle);
  }

};

} // namespace

#endif
